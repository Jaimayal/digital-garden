<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on</title><link>https://jaimayal.github.io/digital-garden/tags/programming/</link><description>Recent content in programming on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaimayal.github.io/digital-garden/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Call Stack</title><link>https://jaimayal.github.io/digital-garden/notes/Call-Stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Call-Stack/</guid><description>Es la forma en que un compilador trabaja con el llamado y la ejecucion de funciones. Mediante ella, se sabe que funcion se ejecuta primero, quien esta esperando su resultado y quien sigue posteriormente.</description></item><item><title>Compilacion vs Interpretacion</title><link>https://jaimayal.github.io/digital-garden/notes/Compilacion-vs-Interpretacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Compilacion-vs-Interpretacion/</guid><description>Como se sabe, las computadoras solamente entienden codigo maquina (Binario, regularmente). En la [[notes/Programacion]] existen dos tipos de lenguajes que llegan a este fin de maneras diferentes, los lenguajes Compilados y los Interpretados.</description></item><item><title>Desarrollo Profesional</title><link>https://jaimayal.github.io/digital-garden/notes/Desarrollo-Profesional/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Desarrollo-Profesional/</guid><description>Ocurre cuando en el proceso de Programacion se analiza y escribe el codigo pensando claramente en cumplir los Requisitos, contrario al Pseudohacking, en el desarrollo profesional se busca agregar unicamente el codigo que se sabe y entiende claramente lo que realiza.</description></item><item><title>Desarrollo Top-Down</title><link>https://jaimayal.github.io/digital-garden/notes/Desarrollo-Top-Down/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Desarrollo-Top-Down/</guid><description>Es un metodo de desarrollo que sirve para escribir programas simples de forma ordenada, manteniendo en todo momento los conceptos de [[notes/Cohesion]], [[notes/Modularidad]] y [[notes/Granularidad]].</description></item><item><title>Diseño en Codigo</title><link>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-en-Codigo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-en-Codigo/</guid><description>El Diseño en el Codigo es la aplicacion mas basica del diseño en la [[notes/Programacion|programacion]] y contempla dos aspectos generales:</description></item><item><title>Diseño Modular</title><link>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-Modular/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-Modular/</guid><description>Es el nivel posterior al Diseño en Codigo, aparte de ser codigo bien inspirado del modelo del dominio que es altamente legible, se agrega que son modulos (o piezas) de codigo que tienen un tamaño homogeneo con alta cohesion y poco acoplamiento.</description></item><item><title>Expresion de Programacion</title><link>https://jaimayal.github.io/digital-garden/notes/Expresion-de-Programacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Expresion-de-Programacion/</guid><description>Una expresion es un componente basico de todo lenguaje de programacion. Es un conjunto de caracteres que puede ser evaluado por el compilador para obtener un valor concreto.</description></item><item><title>Funciones de Alto Orden</title><link>https://jaimayal.github.io/digital-garden/notes/Funciones-de-Alto-Orden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Funciones-de-Alto-Orden/</guid><description>Una funcion de alto orden es toda aquella que recibe como parametro otra funcion, que retorna una funcion o ambas,</description></item><item><title>Funciones de Primera Clase</title><link>https://jaimayal.github.io/digital-garden/notes/Funciones-de-Primera-Clase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Funciones-de-Primera-Clase/</guid><description>Significa que las funciones son tratadas como simples valores, por tanto, pueden ser utilizadas como propiedades, retornadas desde otra funcion o recibidas como parametros desde otras funciones.</description></item><item><title>Fundamentos de la Programacion</title><link>https://jaimayal.github.io/digital-garden/notes/Fundamentos-de-la-Programacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Fundamentos-de-la-Programacion/</guid><description>Los fundamentos de la [[notes/Programacion|programacion]] (En cualquier paradigma) son cuatro:
Abstraccion. Utilizar terminos, conceptos e ideas para representar un concepto de manera fundamental, ignorando lo superfluo.</description></item><item><title>Leetcode Effectively</title><link>https://jaimayal.github.io/digital-garden/notes/Leetcode-Effectively/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Leetcode-Effectively/</guid><description>Basic Knowledge:
Algorithms Post on Blind with the most common problems
Memorizar las partes mas relevantes, no las evidentes Agrupa los problemas por tipos (dinamic, string, tree).</description></item><item><title>Legibilidad del Codigo</title><link>https://jaimayal.github.io/digital-garden/notes/Legibilidad-del-Codigo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Legibilidad-del-Codigo/</guid><description>Es la disciplina encargada de escribir ya no las clases ni las partes especificas, es la parte del diseño que se enfoca a las lineas especificas de cada metodo, clase, etc.</description></item><item><title>Nombres con Sentido</title><link>https://jaimayal.github.io/digital-garden/notes/Recomendaciones-de-Nombrado-para-mantener-un-buen-codigo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Recomendaciones-de-Nombrado-para-mantener-un-buen-codigo/</guid><description>Son una serie de heuristicas que se enfocan en el [[notes/Diseño en Codigo]] de bajo nivel. Particularmente, en el nombrado de las cosas.</description></item><item><title>Programacion</title><link>https://jaimayal.github.io/digital-garden/notes/Programacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Programacion/</guid><description>Es una disciplina encargada de crear una serie de instrucciones en forma de codigo, utilizando un lenguaje especializado para hablar con la maquina que le permita dar las instrucciones suficientes como para que ejecute las tareas que se le asignan.</description></item><item><title>Pseudohacking</title><link>https://jaimayal.github.io/digital-garden/notes/Pseudohacking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Pseudohacking/</guid><description>Es una practica que ocurre en la Programacion de un software, ocurre cuando un desarrollador agrega codigo casi aleatorio con el fin de conseguir un objetivo (cumplir un requisito, regularmente) sin entender realmente lo que hace el codigo que esta agregando al Software.</description></item><item><title>Recursion</title><link>https://jaimayal.github.io/digital-garden/notes/Recursion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Recursion/</guid><description>Se trata de una tecnica de programacion en la cual una funcion, metodo o subrutina (dependiendo del paradigma que estemos llevando a cabo), que, para llevar acabo sus funciones, se llama a si misma.</description></item><item><title>Scope</title><link>https://jaimayal.github.io/digital-garden/notes/Scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Scope/</guid><description>Alcance que tiene una variable tomando en cuenta desde donde fue declarada. Pueden ser globales, de funcion o de bloque.</description></item><item><title>Sentencias en Programacion</title><link>https://jaimayal.github.io/digital-garden/notes/Sentencias-en-Programacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Sentencias-en-Programacion/</guid><description>Una sentencia es una instruccion a ejecutar por el compilador en un lenguaje de programacion.
Es una unidad minima de la cual podemos partir para crear software.</description></item><item><title>Shallow Copy</title><link>https://jaimayal.github.io/digital-garden/notes/Shallow-Copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Shallow-Copy/</guid><description>Tipo de clonado de un objeto que ocurre cuando solo se logra clonar los atributos superficiales, las referencias internas que componen al objeto no cambiaran, solo lo superficial.</description></item><item><title>Swagger</title><link>https://jaimayal.github.io/digital-garden/notes/Swagger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Swagger/</guid><description>Es un conjunto de aplicaciones que sirven para generar codigo y documentacion interactiva siguiendo el estandar de OpenAPI.
Integracion en Spring En Spring puede ser integrada para hacer ingenieria inversa, es decir, generar un documento Swagger a partir de una API ya establecida.</description></item></channel></rss>