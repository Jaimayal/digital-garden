<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ooad on</title><link>https://jaimayal.github.io/digital-garden/tags/ooad/</link><description>Recent content in ooad on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaimayal.github.io/digital-garden/tags/ooad/index.xml" rel="self" type="application/rss+xml"/><item><title>Antipatron Descomposicion Funcional</title><link>https://jaimayal.github.io/digital-garden/notes/Antipatron-Descomposicion-Funcional/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Antipatron-Descomposicion-Funcional/</guid><description>Tambien llamado Functional Descomposition, concepto creado por William Brown, se refiere a una mala practica que puede ocurrir en el desarrollo de un programa que consiste en romper completamente el Principio General de Asignacion de Responsabilidades.</description></item><item><title>Diseño en Codigo</title><link>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-en-Codigo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-en-Codigo/</guid><description>El Diseño en el Codigo es la aplicacion mas basica del diseño en la [[notes/Programacion|programacion]] y contempla dos aspectos generales:</description></item><item><title>Diseño Modular</title><link>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-Modular/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-Modular/</guid><description>Es el nivel posterior al Diseño en Codigo, aparte de ser codigo bien inspirado del modelo del dominio que es altamente legible, se agrega que son modulos (o piezas) de codigo que tienen un tamaño homogeneo con alta cohesion y poco acoplamiento.</description></item><item><title>Diseño orientado a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-orientado-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-orientado-a-Objetos/</guid><description>Nivel siguiente al Diseño Modular, ahora ya no solo son piezas bien inspiradas, legibles, poco acopladas y cohesivas, si no que se aprovechan los mecanismos de Polimorfismo y Herencia + Composicion para hacer jerarquias altamente reusables y flexibles respetando principios de la programacion orientada a objetos.</description></item><item><title>Nombres con Sentido</title><link>https://jaimayal.github.io/digital-garden/notes/Recomendaciones-de-Nombrado-para-mantener-un-buen-codigo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Recomendaciones-de-Nombrado-para-mantener-un-buen-codigo/</guid><description>Son una serie de heuristicas que se enfocan en el [[notes/Diseño en Codigo]] de bajo nivel. Particularmente, en el nombrado de las cosas.</description></item><item><title>Patron Controlador</title><link>https://jaimayal.github.io/digital-garden/notes/Patron-Controlador/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Patron-Controlador/</guid><description>Es uno de los patrones que le dio vida a la arquitectura MVC. En este, se indica que las Entidades del dominio de tu problema deberian estar desacopladas de las reglas de negocio que van a ser aplicadas a ellas.</description></item><item><title>Patron de Indireccion</title><link>https://jaimayal.github.io/digital-garden/notes/Patron-de-Indireccion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Patron-de-Indireccion/</guid><description>Es un Patron que dicta que la Indireccion de la complejidad en la [[notes/Programacion Orientada a Objetos]] debe ocurrir mediante la creacion de mas clases.</description></item><item><title>Patron de Vista Separada</title><link>https://jaimayal.github.io/digital-garden/notes/Patron-de-Vista-Separada/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Patron-de-Vista-Separada/</guid><description>Es uno de los Patrones recurrentes que dio vida a la arquitectura MVC. Dicta que, los modelos como minimo deben estar desacoplados totalmente de la tecnologia de vista necesaria para interactuar con los usuarios, puesto que, de estar acoplados (Mediante el [[notes/Patron Experto en la Informacion]], por ejemplo) crearian clases que romperian con los principios de [[notes/Cohesion]], [[notes/Acoplamiento]] y [[notes/Granularidad]].</description></item><item><title>Patron Experto en la Informacion</title><link>https://jaimayal.github.io/digital-garden/notes/Patron-Experto-en-la-Informacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Patron-Experto-en-la-Informacion/</guid><description>Es una heuristica que dicta que un objeto tiene obligaciones que son dadas por los datos que guarda. Sus obligaciones deben ser cumplidas y debe proveer interfaz publica para hacerlas accesibles a otros objetos desde fuera.</description></item><item><title>Principio de Inversion de Dependencias</title><link>https://jaimayal.github.io/digital-garden/notes/Principio-de-Inversion-de-Dependencias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Principio-de-Inversion-de-Dependencias/</guid><description>Surge como resultado de cumplir el principio Open/Closed y la Sustitucion de Barbara Liskov.
Dicta que, si se busca flexibilidad y extensibilidad ni los modulos de alto nivel ni los de bajo nivel debeben de trabajar con interfaces intermedias para que se pueda extender a futuro y incremente la flexibilidad de mis colaboradores.</description></item><item><title>Principio de Segregacion de Interfaces</title><link>https://jaimayal.github.io/digital-garden/notes/Principio-de-Segregacion-de-Interfaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Principio-de-Segregacion-de-Interfaces/</guid><description>Es un principio que dicta que una clase no debe conocer nada mas alla de lo que le compete con otra clase con la que colabora.</description></item><item><title>Principio de Sustitucion de Liskov</title><link>https://jaimayal.github.io/digital-garden/notes/Principio-de-Sustitucion-de-Liskov/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Principio-de-Sustitucion-de-Liskov/</guid><description>Cualquier subclase debe sustituir de forma satisfactoria a una clase padre dentro de una jerarquia, sin cambiar de forma exagerada su comportamiento</description></item><item><title>Principio General de Asignacion de Responsabilidades</title><link>https://jaimayal.github.io/digital-garden/notes/Principio-General-de-Asignacion-de-Responsabilidades/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Principio-General-de-Asignacion-de-Responsabilidades/</guid><description>Inspirate en el Mundo Real, pero se coherente y has que las clases hagan las operaciones que les corresponden con los datos que encapsulan.</description></item><item><title>Principio Open-Closed</title><link>https://jaimayal.github.io/digital-garden/notes/Principio-Open-Closed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Principio-Open-Closed/</guid><description>Es el Objetivo del Diseño Orientado a Objetos.
Dicta que: *Todas las partes del paradigma orientaod a objetos deberian estar abiertas a la extension, cerradas a la modificacion.</description></item><item><title>Relaciones entre Clases (Gestion de Dependencias)</title><link>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-Gestion-de-Dependencias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-Gestion-de-Dependencias/</guid><description>Dependencia y Relacion son sinonimos en la Programacion Orientada a Objetos. Ambas se refieren a las colaboraciones que pueden existir entre las clases de una aplicacion.</description></item><item><title>Tecnica de Doble Despacho</title><link>https://jaimayal.github.io/digital-garden/notes/Tecnica-de-Doble-Despacho/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Tecnica-de-Doble-Despacho/</guid><description>Esta tecnica se utiliza cuando un objeto A tiene que responder de una u otra forma dependiendo del tipo de objeto que es B dentro de una Jerarquia Polimorfica.</description></item></channel></rss>