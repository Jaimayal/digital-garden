<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>oop on</title><link>https://jaimayal.github.io/digital-garden/tags/oop/</link><description>Recent content in oop on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaimayal.github.io/digital-garden/tags/oop/index.xml" rel="self" type="application/rss+xml"/><item><title>Atributos</title><link>https://jaimayal.github.io/digital-garden/notes/Atributos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Atributos/</guid><description>Constituyen los datos particulares de una clase, pueden estar soportados por tipos primitivos (int, char, boolean, float, double, etc) o pueden estar soportados por otras clases.</description></item><item><title>Banco de Preguntas | Programacion Orientada a Objetos</title><link>https://jaimayal.github.io/digital-garden/banks/Banco-de-Preguntas-OOP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/banks/Banco-de-Preguntas-OOP/</guid><description>¿Que es una Clase? Una clase es un conjunto de datos (atributos, valores) y funciones (metodos, operaciones, rutinas) que sirven como modelo (patron base) sobre el cual se podran obtener uno o mas ejemplares (objetos, instancias).</description></item><item><title>Clase</title><link>https://jaimayal.github.io/digital-garden/notes/Clase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Clase/</guid><description>Las clases son un concepto basico de la programacion orientada a objetos. Una clase es un molde del cual podemos instanciar (crear, generar, construir, inicializar) objetos de ese tipo en particular.</description></item><item><title>Constructores</title><link>https://jaimayal.github.io/digital-garden/notes/Constructores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Constructores/</guid><description>Popularmente llamados &amp;ldquo;constructores&amp;rdquo; son metodos especiales en el codigo que sirven como inicializadores de objetos. Buscan crear instancias especificas de una clase, una instancia en particular tambien es llamada Objeto.</description></item><item><title>Desarrollo Top-Down</title><link>https://jaimayal.github.io/digital-garden/notes/Desarrollo-Top-Down/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Desarrollo-Top-Down/</guid><description>Es un metodo de desarrollo que sirve para escribir programas simples de forma ordenada, manteniendo en todo momento los conceptos de [[notes/Cohesion]], [[notes/Modularidad]] y [[notes/Granularidad]].</description></item><item><title>Descomposicion</title><link>https://jaimayal.github.io/digital-garden/notes/Composicion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Composicion/</guid><description>Es un principio no muy popular de la Programacion Orientada a Objetos. Mediante este, se dice que un Todo esta formado por distintas partes.</description></item><item><title>Diseño orientado a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-orientado-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-orientado-a-Objetos/</guid><description>Nivel siguiente al Diseño Modular, ahora ya no solo son piezas bien inspiradas, legibles, poco acopladas y cohesivas, si no que se aprovechan los mecanismos de Polimorfismo y Herencia + Composicion para hacer jerarquias altamente reusables y flexibles respetando principios de la programacion orientada a objetos.</description></item><item><title>Diseño por Contrato</title><link>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-por-Contrato/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-por-Contrato/</guid><description>El diseño por contrato establece un contrato entre dos partes, el cliente y el servidor. Regularmente, es utilizada al desarrollar la implementacion de una clase.</description></item><item><title>Estado</title><link>https://jaimayal.github.io/digital-garden/notes/Estado/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Estado/</guid><description>Se refiere a los valores que tiene el conjunto de datos que encontramos en un objeto en determinado momento.
Regularmente el estado lo podemos comprobar mediante la interfaz publica especificada en la clase del objeto al que queremos consultar, imaginando que en algun lugar existe la clase fecha podriamos hacer:</description></item><item><title>Flexibilidad</title><link>https://jaimayal.github.io/digital-garden/notes/Flexibilidad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Flexibilidad/</guid><description>Clases Abstractas e Interfaces La interfaz es un contrato que existe entre una clase derivada y la interfaz, declara que, toda clase que la implemente como minimo debe implementar de forma concreta un algoritmo para los metodos si no quiere ser abstracta.</description></item><item><title>Generalizacion</title><link>https://jaimayal.github.io/digital-garden/notes/Generalizacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Generalizacion/</guid><description>Es un concepto general aplicable a la [[notes/Programacion Orientada a Objetos]]. La Generalizacion se refiere a la reutilizacion de datos o metodos que se presentan en un sistema.</description></item><item><title>Granularidad</title><link>https://jaimayal.github.io/digital-garden/notes/Granularidad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Granularidad/</guid><description>Las heuristicas de Granularidad sirven como una referencia a tener en cuenta para escribir codigo de calidad, no se deben seguir a rajatabla sin embargo establecen un punto de partida para permitir identificar codigo de calidad.</description></item><item><title>Herencia</title><link>https://jaimayal.github.io/digital-garden/notes/Herencia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Herencia/</guid><description>La herencia tiene la misma reusabilidad que una composicion.
La herencia te acopla fuertemente a la interfaz de tu padre y a sus atributos.</description></item><item><title>Herencia frente a Parametrizacion (Genericos)</title><link>https://jaimayal.github.io/digital-garden/notes/Herencia-frente-a-Parametrizacion-Genericos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Herencia-frente-a-Parametrizacion-Genericos/</guid><description>La parametrizacion es la programacion generica, en general se usa cuando se busca tener exactamente las mismas operaciones en una clase pero hablando de diferentes cosas.</description></item><item><title>Implementacion de una Clase</title><link>https://jaimayal.github.io/digital-garden/notes/Implementacion-de-una-Clase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Implementacion-de-una-Clase/</guid><description>Cohesion Cohesion de Metodos Principio de Unica Responsabilidad (S de SOLID) Responsabilidad fuera de Lugar. La responsabilidad no esta donde deberia de estar Condigo Sucio por Envidia de Caracteristicas Codigo Sucio por Clase de Datos Codigo Sucio por Cambios Divergentes Sin clase para una Responsabilidad.</description></item><item><title>Interfaz de una Clase</title><link>https://jaimayal.github.io/digital-garden/notes/Interfaz-de-una-Clase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Interfaz-de-una-Clase/</guid><description>La interfaz de una [[notes/Clase]] se refiere al conjunto de [[notes/Metodos]] que estan expuestos de forma publica para que otras clases desde cualquier otro paquete puedan colaborar con ella.</description></item><item><title>Inversion de Control</title><link>https://jaimayal.github.io/digital-garden/notes/Inversion-de-Control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Inversion-de-Control/</guid><description>Cuando escribimos codigo normalmente nosotros hacemos llamada a las distintas librerias y partes que nosotros queremos a lo largo de nuestro programa, en otras palabras &amp;ldquo;Nosotros tenemos el control sobre lo que utilizamos y lo que no&amp;rdquo;.</description></item><item><title>Inyeccion de Dependencias</title><link>https://jaimayal.github.io/digital-garden/notes/Inyeccion-de-Dependencias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Inyeccion-de-Dependencias/</guid><description>Es basicamente, una relacion de asociacion que te llega por Constructor, Setter o de cualquier otra forma posible.
En vez de elegir de forma clara dentro de la clase que colaborador tienes, este te llega como parametro a un constructor o un setter.</description></item><item><title>Ley de Demeter</title><link>https://jaimayal.github.io/digital-garden/notes/Ley-de-Demeter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Ley-de-Demeter/</guid><description>Son un conjunto de leyes obtenidas desde un proyecto. En el cual se dictamenta que UNICAMENTE SE PUEDE COLABORAR CON:</description></item><item><title>Mensajes</title><link>https://jaimayal.github.io/digital-garden/notes/Mensajes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Mensajes/</guid><description>Es la base sobre la cual objetos pueden interactuar con otros utilizando sus vistas publicas, es decir, sus interfaces. En ese caso, un objeto activo (El que envia el mensaje) se comunica con un objeto pasivo (El que lo recibe).</description></item><item><title>Metodo</title><link>https://jaimayal.github.io/digital-garden/notes/Metodos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodos/</guid><description>Define las operaciones (funciones, rutinas, operaciones) implantadas dentro de una clase que estaran disponibles para ser ejecutadas por los objetos que se generen de ella.</description></item><item><title>Modularidad</title><link>https://jaimayal.github.io/digital-garden/notes/Modularidad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Modularidad/</guid><description>Es un concepto que se refiere a la descomposicion de un programa en multiples modulos. Un modulo es una pieza de construccion, en la [[notes/Programacion Orientada a Objetos]], un modulo es una [[notes/Clase]].</description></item><item><title>Objeto</title><link>https://jaimayal.github.io/digital-garden/notes/Objeto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Objeto/</guid><description>Es una instancia (es decir, una ocurrencia particular) o un ejemplar concreto proveniente de una clase ya definida.
Estos son creados a partir de los constructores de una clase particular y por lo tanto, cuentan con sus atributos, metodos, vista publica y privada.</description></item><item><title>Orientacion a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Orientacion-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Orientacion-a-Objetos/</guid><description>Vista publica de las clases - Interfaces Lo publico es lo que es conocido en cualquier parte del sistema. Lo privado es lo que se conoce unicamente dentro de la declaracion de una clase</description></item><item><title>Paradigma Orientado a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Paradigma-Orientado-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Paradigma-Orientado-a-Objetos/</guid><description>Es un paradigma que surge como sintesis tras la orientacion a datos y la orientacion a procesos. Tiene como objetivo dar la misma importancia tanto a datos como a procesos, utilizando el concepto de Clases y vistas.</description></item><item><title>Patron Controlador</title><link>https://jaimayal.github.io/digital-garden/notes/Patron-Controlador/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Patron-Controlador/</guid><description>Es uno de los patrones que le dio vida a la arquitectura MVC. En este, se indica que las Entidades del dominio de tu problema deberian estar desacopladas de las reglas de negocio que van a ser aplicadas a ellas.</description></item><item><title>Patron de Indireccion</title><link>https://jaimayal.github.io/digital-garden/notes/Patron-de-Indireccion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Patron-de-Indireccion/</guid><description>Es un Patron que dicta que la Indireccion de la complejidad en la [[notes/Programacion Orientada a Objetos]] debe ocurrir mediante la creacion de mas clases.</description></item><item><title>Polimorfismo</title><link>https://jaimayal.github.io/digital-garden/notes/Polimorfismo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Polimorfismo/</guid><description>El polimorfismo es una relajacion del sistema de tipos que nos permite interactuar con una clase y con todos sus derivados no abstractos apegandonos de forma fiel a su interfaz publica.</description></item><item><title>Principio de Inversion de Dependencias</title><link>https://jaimayal.github.io/digital-garden/notes/Principio-de-Inversion-de-Dependencias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Principio-de-Inversion-de-Dependencias/</guid><description>Surge como resultado de cumplir el principio Open/Closed y la Sustitucion de Barbara Liskov.
Dicta que, si se busca flexibilidad y extensibilidad ni los modulos de alto nivel ni los de bajo nivel debeben de trabajar con interfaces intermedias para que se pueda extender a futuro y incremente la flexibilidad de mis colaboradores.</description></item><item><title>Principio de Segregacion de Interfaces</title><link>https://jaimayal.github.io/digital-garden/notes/Principio-de-Segregacion-de-Interfaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Principio-de-Segregacion-de-Interfaces/</guid><description>Es un principio que dicta que una clase no debe conocer nada mas alla de lo que le compete con otra clase con la que colabora.</description></item><item><title>Principio de Sustitucion de Liskov</title><link>https://jaimayal.github.io/digital-garden/notes/Principio-de-Sustitucion-de-Liskov/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Principio-de-Sustitucion-de-Liskov/</guid><description>Cualquier subclase debe sustituir de forma satisfactoria a una clase padre dentro de una jerarquia, sin cambiar de forma exagerada su comportamiento</description></item><item><title>Principio Open-Closed</title><link>https://jaimayal.github.io/digital-garden/notes/Principio-Open-Closed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Principio-Open-Closed/</guid><description>Es el Objetivo del Diseño Orientado a Objetos.
Dicta que: *Todas las partes del paradigma orientaod a objetos deberian estar abiertas a la extension, cerradas a la modificacion.</description></item><item><title>Programacion Orientada a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Programacion-Orientada-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Programacion-Orientada-a-Objetos/</guid><description>Es un paradigma de [[notes/Programacion|programacion]] basado en componentes. En este caso, cada componente es una Clase (la unidad minima de construccion).</description></item><item><title>Relacion de Agregacion</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Agregacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Agregacion/</guid><description>Siguiendo las caracteristicas de las Relaciones entre Clases por Colaboracion. La relacion por agregacion tendria las siguientes:
En esta relacion la agregacion se encarga de gestionar todo lo relacionado con los agregados una vez forman parte de ella.</description></item><item><title>Relacion de Asociacion</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Asociacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Asociacion/</guid><description>NO cuenta con ningun tipo de composicion, ni debil, ni fuerte, pero a la vez, es la primera que hace que una relacion entre un cliente (objeto activo) y un servidor (objeto pasivo) persista a traves de una temporalidad mas larga.</description></item><item><title>Relacion de Composicion</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Composicion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Composicion/</guid><description>Siguiendo las caracteristicas de las Relaciones entre Clases por Colaboracion. La relacion por composicion tendria las siguientes:
Caracteristicas Temporalidad - Alta Regularmente, este tipo de relaciones vinculan toda la longevidad del todo con la longevidad de la parte.</description></item><item><title>Relacion de Uso (Dependencia)</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Uso-Dependencia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Uso-Dependencia/</guid><description>Este tipo de relacion ocurre cuando una clase A utiliza los servicios de una clase B en algun punto especifico sin mayor dependencia a futuro.</description></item><item><title>Relaciones entre Clases (Gestion de Dependencias)</title><link>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-Gestion-de-Dependencias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-Gestion-de-Dependencias/</guid><description>Dependencia y Relacion son sinonimos en la Programacion Orientada a Objetos. Ambas se refieren a las colaboraciones que pueden existir entre las clases de una aplicacion.</description></item><item><title>Relaciones entre Clases por Colaboracion</title><link>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Colaboracion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Colaboracion/</guid><description>Son un tipo de Relaciones entre Clases (Gestion de Dependencias) que ocurre cuando existe un paso de mensajes entre clases. Ya sea que una se encuentre como valor de retorno, parametro, atributo privado, u otro.</description></item><item><title>Relaciones entre Clases por Herencia</title><link>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Herencia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Herencia/</guid><description>Es un tipo de relacion que existe entre dos clases cuando se identifican factores en comun. Se obtiene una clase de mas alto nivel y se crea una pequeña jerarquia.</description></item><item><title>Tecnica de Doble Despacho</title><link>https://jaimayal.github.io/digital-garden/notes/Tecnica-de-Doble-Despacho/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Tecnica-de-Doble-Despacho/</guid><description>Esta tecnica se utiliza cuando un objeto A tiene que responder de una u otra forma dependiendo del tipo de objeto que es B dentro de una Jerarquia Polimorfica.</description></item><item><title>Template Method (Metodo Plantilla)</title><link>https://jaimayal.github.io/digital-garden/notes/Template-Method-Metodo-Plantilla/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Template-Method-Metodo-Plantilla/</guid><description>Es utilizado en una Jerarquia de herencia. Se utiliza cuando dos clases derivadas tienen partes similares dentro del algoritmo de un metodo cambiando solo una pequeña parte debido a los detalles de su especializacion.</description></item></channel></rss>