<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>oop on</title><link>https://jaimayal.github.io/digital-garden/tags/oop/</link><description>Recent content in oop on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaimayal.github.io/digital-garden/tags/oop/index.xml" rel="self" type="application/rss+xml"/><item><title>Atributos</title><link>https://jaimayal.github.io/digital-garden/notes/Atributos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Atributos/</guid><description>Constituyen los datos particulares de una clase, pueden estar soportados por tipos primitivos (int, char, boolean, float, double, etc) o pueden estar soportados por otras clases.</description></item><item><title>Banco de Preguntas | Programacion Orientada a Objetos</title><link>https://jaimayal.github.io/digital-garden/banks/Banco-de-Preguntas-OOP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/banks/Banco-de-Preguntas-OOP/</guid><description>¿Que es una Clase? Una clase es un conjunto de datos (atributos, valores) y funciones (metodos, operaciones, rutinas) que sirven como modelo (patron base) sobre el cual se podran obtener uno o mas ejemplares (objetos, instancias).</description></item><item><title>Clase</title><link>https://jaimayal.github.io/digital-garden/notes/Clase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Clase/</guid><description>Las clases son un concepto basico de la programacion orientada a objetos. Una clase es un molde del cual podemos instanciar (crear, generar, construir, inicializar) objetos de ese tipo en particular.</description></item><item><title>Constructores</title><link>https://jaimayal.github.io/digital-garden/notes/Constructores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Constructores/</guid><description>Popularmente llamados &amp;ldquo;constructores&amp;rdquo; son metodos especiales en el codigo que sirven como inicializadores de objetos. Buscan crear instancias especificas de una clase, una instancia en particular tambien es llamada Objeto.</description></item><item><title>Diseño orientado a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-orientado-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-orientado-a-Objetos/</guid><description>Nivel siguiente al Diseño Modular, ahora ya no solo son piezas bien inspiradas, legibles, poco acopladas y cohesivas, si no que se aprovechan los mecanismos de Polimorfismo y Herencia + Composicion para hacer jerarquias altamente reusables y flexibles respetando principios de la programacion orientada a objetos.</description></item><item><title>Estado</title><link>https://jaimayal.github.io/digital-garden/notes/Estado/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Estado/</guid><description>Se refiere a los valores que tiene el conjunto de datos que encontramos en un objeto en determinado momento.
Regularmente el estado lo podemos comprobar mediante la interfaz publica especificada en la clase del objeto al que queremos consultar, imaginando que en algun lugar existe la clase fecha podriamos hacer:</description></item><item><title>Mensajes</title><link>https://jaimayal.github.io/digital-garden/notes/Mensajes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Mensajes/</guid><description>Es la base sobre la cual objetos pueden interactuar con otros utilizando sus vistas publicas, es decir, sus interfaces. En ese caso, un objeto activo (El que envia el mensaje) se comunica con un objeto pasivo (El que lo recibe).</description></item><item><title>Metodo</title><link>https://jaimayal.github.io/digital-garden/notes/Metodos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodos/</guid><description>Define las operaciones (funciones, rutinas, operaciones) implantadas dentro de una clase que estaran disponibles para ser ejecutadas por los objetos que se generen de ella.</description></item><item><title>Objeto</title><link>https://jaimayal.github.io/digital-garden/notes/Objeto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Objeto/</guid><description>Es una instancia (es decir, una ocurrencia particular) o un ejemplar concreto proveniente de una clase ya definida.
Estos son creados a partir de los constructores de una clase particular y por lo tanto, cuentan con sus atributos, metodos, vista publica y privada.</description></item><item><title>Orientacion a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Orientacion-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Orientacion-a-Objetos/</guid><description>Vista publica de las clases - Interfaces Lo publico es lo que es conocido en cualquier parte del sistema. Lo privado es lo que se conoce unicamente dentro de la declaracion de una clase</description></item><item><title>Paradigma Orientado a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Paradigma-Orientado-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Paradigma-Orientado-a-Objetos/</guid><description>Es un paradigma que surge como sintesis tras la orientacion a datos y la orientacion a procesos. Tiene como objetivo dar la misma importancia tanto a datos como a procesos, utilizando el concepto de Clases y vistas.</description></item><item><title>Programacion Orientada a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Programacion-Orientada-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Programacion-Orientada-a-Objetos/</guid><description>Es un paradigma de [[notes/Programacion|programacion]] basado en componentes. En este caso, cada componente es un notes/Objeto (la unidad minima de construccion).</description></item><item><title>Relacion de Agregacion</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Agregacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Agregacion/</guid><description>Siguiendo las caracteristicas de las Relaciones entre Clases por Colaboracion. La relacion por agregacion tendria las siguientes:
En esta relacion la agregacion se encarga de gestionar todo lo relacionado con los agregados una vez forman parte de ella.</description></item><item><title>Relacion de Asociacion</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Asociacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Asociacion/</guid><description>NO cuenta con ningun tipo de composicion, ni debil, ni fuerte, pero a la vez, es la primera que hace que una relacion entre un cliente (objeto activo) y un servidor (objeto pasivo) persista a traves de una temporalidad mas larga.</description></item><item><title>Relacion de Composicion</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Composicion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Composicion/</guid><description>Siguiendo las caracteristicas de las Relaciones entre Clases por Colaboracion. La relacion por composicion tendria las siguientes:
Caracteristicas Temporalidad - Alta Regularmente, este tipo de relaciones vinculan toda la longevidad del todo con la longevidad de la parte.</description></item><item><title>Relacion de Uso (Dependencia)</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Uso-Dependencia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Uso-Dependencia/</guid><description>Este tipo de relacion ocurre cuando una clase A utiliza los servicios de una clase B en algun punto especifico sin mayor dependencia a futuro.</description></item><item><title>Relaciones entre Clases (Gestion de Dependencias)</title><link>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-Gestion-de-Dependencias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-Gestion-de-Dependencias/</guid><description>Dependencia y Relacion son sinonimos en la Programacion Orientada a Objetos. Ambas se refieren a las colaboraciones que pueden existir entre las clases de una aplicacion.</description></item><item><title>Relaciones entre Clases por Colaboracion</title><link>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Colaboracion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Colaboracion/</guid><description>Son un tipo de Relaciones entre Clases (Gestion de Dependencias) que ocurre cuando existe un paso de mensajes entre clases. Ya sea que una se encuentre como valor de retorno, parametro, atributo privado, u otro.</description></item><item><title>Relaciones entre Clases por Herencia</title><link>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Herencia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Herencia/</guid><description>Es un tipo de relacion que existe entre dos clases cuando se identifican factores en comun. Se obtiene una clase de mas alto nivel y se crea una pequeña jerarquia.</description></item></channel></rss>