<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithms on</title><link>https://jaimayal.github.io/digital-garden/tags/algorithms/</link><description>Recent content in algorithms on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaimayal.github.io/digital-garden/tags/algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>Algoritmos</title><link>https://jaimayal.github.io/digital-garden/notes/Algoritmos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Algoritmos/</guid><description>Es un conjunto de instrucciones que buscan conseguir un fin.
Searching Es un conjunto de instrucciones que sirven para realizar la busqueda de un elemento especifico dentro de una Estructura de Datos.</description></item><item><title>Big O</title><link>https://jaimayal.github.io/digital-garden/notes/Big-O/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Big-O/</guid><description>Es un criterio que sirve para categorizar la eficiencia de un algoritmo (en tiempo o espacio), basandose en que tan bien escala respecto a la informacion que recibe de entrada (n).</description></item><item><title>Binary Search</title><link>https://jaimayal.github.io/digital-garden/notes/Binary-Search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Binary-Search/</guid><description>El algoritmo consiste en saltar entre la estructura partiendola en la mitad cada vez hasta encontrar el elemento. Para esto, se requiere que la estructura este ordenada.</description></item><item><title>Bubble Sort</title><link>https://jaimayal.github.io/digital-garden/notes/Bubble-Sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Bubble-Sort/</guid><description>Es un Algoritmo de Ordenamiento que sirve para ordenar una estructura de datos.
En cada iteracion el elemento mas grande &amp;ldquo;flotara&amp;rdquo; hasta la ultima parte del array, es decir, en cada iteracion se reduce el numero de elementos a ordenar en uno porque el ultimo siempre estara ordenado.</description></item><item><title>Divide-and-conquer</title><link>https://jaimayal.github.io/digital-garden/notes/Divide-and-conquer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Divide-and-conquer/</guid><description>Divide y Venceras es una tecnica algoritma que sirve para resolver problemas en los cuales se divide un problema en subproblemas mas peque√±os mas faciles de resolver.</description></item><item><title>Linear Search</title><link>https://jaimayal.github.io/digital-garden/notes/Linear-Search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Linear-Search/</guid><description>Es la implementacion mas sencilla de busqueda que existe. Consiste en recorrer de forma lineal elemento por elemento desde el inicio hasta el fin de una estructura de datos comparando si el elemento que buscamos se encuentra en esa posicion o no.</description></item><item><title>Quick Sort</title><link>https://jaimayal.github.io/digital-garden/notes/Quick-Sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Quick-Sort/</guid><description>Es un Algoritmo de Sorting mucho mas rapido que [[notes/Bubble Sort]] o Selection Sort. Esta basado en [[notes/Divide-and-conquer]].
El caso Base de Quick Sort es el array mas sencilo de ordenar, es decir, un array de longitud 1 o 0.</description></item></channel></rss>