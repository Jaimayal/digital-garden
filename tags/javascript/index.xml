<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on</title><link>https://jaimayal.github.io/digital-garden/tags/javascript/</link><description>Recent content in javascript on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaimayal.github.io/digital-garden/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Arrays en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Arrays-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Arrays-en-JavaScript/</guid><description>Los Arrays son una de las estructuras de datos mas basicas de los lenguajes de Programacion, y en JavaScript se encuentran implementados de forma dinamica.</description></item><item><title>Closures en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Closures-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Closures-en-JavaScript/</guid><description>Es una caracteristica especial de las [[notes/Funciones en JavaScript]] que combina los [[notes/JavaScript Execution Context]], el [[notes/Call Stack]]y los [[notes/Scope]] .</description></item><item><title>Destructuring en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Destructuring-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Destructuring-en-JavaScript/</guid><description>Es un mecanismo de [[notes/JavaScript]] que sirve para desestructurar una estructura de datos hacia multiples variables.
Para esto, existe una sintaxis especial que sirve para declarar multiples variables basada en los elementos que ya tiene una estructura de datos.</description></item><item><title>DOM</title><link>https://jaimayal.github.io/digital-garden/notes/DOM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/DOM/</guid><description>El DOM se refiere al Document Object Model. El DOM es una representacion estructurada de un documento HTML, mediante este, podemos cambiar de forma dinamica los estilos y el contenido de los elementos de una pagina web.</description></item><item><title>Enhanced Object Literals en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Enhanced-Object-Literals-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Enhanced-Object-Literals-en-JavaScript/</guid><description>Es una mejora implementada en ES6 a las declaraciones de objetos literales.
Bindear un Objeto dentro de Otro En caso de querer agregar un objeto externo a otro objeto, la sintaxis clasica seria la siguiente</description></item><item><title>For of Loop en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/For-of-Loop-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/For-of-Loop-en-JavaScript/</guid><description>Es un nuevo tipo de for que fue agregado en ES6 como otra forma de iterar sobre estructuras de datos con una sintaxis mas simple sin preocuparte por contadores o condiciones.</description></item><item><title>Funciones en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Funciones-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Funciones-en-JavaScript/</guid><description>Existen tres tipos de funciones principales en JavaScript:
Funciones Declaradas ^4c2966 Expresiones Funcionales Funciones Flecha Todas estas funciones cuentan con dos caracteristicas principales:</description></item><item><title>Hoisting</title><link>https://jaimayal.github.io/digital-garden/notes/Hoisting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Hoisting/</guid><description>Es un mecanismo de [[notes/JavaScript]] que sirve para manejar la creacion y flujo de las variables. Lo que hace esque permite a algunas variables ser utilizadas antes de que sean declaradas.</description></item><item><title>IIFE (Expresiones Funcionales Inmediatamente Invokadas) en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/IIFE-Expresiones-Funcionales-Inmediatamente-Invokadas-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/IIFE-Expresiones-Funcionales-Inmediatamente-Invokadas-en-JavaScript/</guid><description>Permite invocar una funcion anonima inmediatamente que se carga la pagina, de modo que no requiere de invocacion ni de ningun otro mecanismo.</description></item><item><title>Interacciones con Objetos en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Propiedades-de-Objetos-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Propiedades-de-Objetos-en-JavaScript/</guid><description>Existen dos formas basicas de interactuar con Objetos en JavaScript y cambiar o obtener sus propiedades.
Notacion con Punto (Member Access) Se especifica el nombre de la propiedad REAL que guarda el objeto y que se quiere obtener.</description></item><item><title>Intercambiar la Visibilidad de un Elemento usando JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Intercambiar-la-Visibilidad-de-un-Elemento-usando-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Intercambiar-la-Visibilidad-de-un-Elemento-usando-JavaScript/</guid><description>Para saber como cambiar la visibilidad de un objeto en JavaScript primero debemos tener un poco de conocimiento sobre la Manipulacion del DOM.</description></item><item><title>JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/JavaScript/</guid><description>JavaScript es un lenguaje de programacion que integra muchas caracteristicas que lo hacen el lenguaje por excelencia de la web.</description></item><item><title>JavaScript Engine y Runtime</title><link>https://jaimayal.github.io/digital-garden/notes/JavaScript-Engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/JavaScript-Engine/</guid><description>JS Engine. El programa principal de un solo hilo que convierte el codigo de JavaScript, en un ejecutable de optimizacion constante.</description></item><item><title>JavaScript Execution Context</title><link>https://jaimayal.github.io/digital-garden/notes/JavaScript-Execution-Context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/JavaScript-Execution-Context/</guid><description>Definicion Un Execution Context es como un contenedor en el cual pueden vivir todas las partes de un codigo de javascript, keywords, objetos, funciones (solo las cabeceras), variables, etc.</description></item><item><title>JavaScript Runtime</title><link>https://jaimayal.github.io/digital-garden/notes/JavaScript-Runtime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/JavaScript-Runtime/</guid><description>Un Runtime funciona como un contenedor en el cual podemos encontrar herramientas que, de la mano de codigo en javascript, pueden lograr comunicarse y brindar funcionalidad especifica a ese runtime.</description></item><item><title>Logical Assignment Operators en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Logical-Assignment-Operators-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Logical-Assignment-Operators-en-JavaScript/</guid><description>Son operadores con sintaxis similar a los operadores de acumulacion. En este caso, los operadores logicos de asignacion sirven para comparar [[notes/Propiedades de Objetos en JavaScript]] y aplicar el mecanismo de [[notes/Short Circuiting en JavaScript]] para, por ejemplo, dar un valor por defecto a una propiedad.</description></item><item><title>Loopear sobre Objetos en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Loopear-sobre-Objetos-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Loopear-sobre-Objetos-en-JavaScript/</guid><description>Aunque los objetos en javascript no tienen la propiedad de ser iterables, existe una forma de obtener un conjunto de elementos que si integran esta propiedad.</description></item><item><title>Manipulacion del DOM</title><link>https://jaimayal.github.io/digital-garden/notes/Manipulacion-del-DOM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Manipulacion-del-DOM/</guid><description>La manipulacion del DOM ocurre cuando utilizamos un lenguaje de programacion para interactuar de forma dinamica con un documento de HTML mediante el WEB API que ofrecen los navegadores.</description></item><item><title>Maps en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Maps-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Maps-en-JavaScript/</guid><description>La diferencia entre objetos y mapas esque en los mapas las keys pueden ser de cualquier tipo de dato (No como en los objetos, que solo permiten strings).</description></item><item><title>Metodo apply en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodo-apply-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodo-apply-en-JavaScript/</guid><description>Es otro metodo que puede ser aplicado en las funciones que nos sirve para cambiar a donde apunta la keyword [[notes/this en JavaScript]].</description></item><item><title>Metodo bind en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodo-bind-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodo-bind-en-JavaScript/</guid><description>Tal y como los metodos [[notes/Metodo apply en JavaScript]] y [[notes/Metodo call en JavaScript]], este tambien nos permite cambiar la keyword [[notes/this en JavaScript]] de lugar.</description></item><item><title>Metodos call y apply en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodo-call-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodo-call-en-JavaScript/</guid><description>Es un metodo muy util que sirve para aplicar una funcion global como si fuese llamada desde un objeto. De esta forma, hacemos que la keyword [[notes/this en JavaScript]] apunte al objeto en cuestion y no a undefined o window.</description></item><item><title>Metodos de Objetos en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodos-de-Objetos-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodos-de-Objetos-en-JavaScript/</guid><description>Para crear metodos (funciones, rutinas, etc) dentro de un objeto primero debemos entender que estos no son mas que propiedades de un objeto ya existente.</description></item><item><title>Metodos Utiles Arrays en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodos-Utiles-Arrays-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodos-Utiles-Arrays-en-JavaScript/</guid><description>Algunos de los metodos mas basicos para trabajar con Arrays en JavaScript:
push. Apende un elemento al final del array unshift.</description></item><item><title>Metodos y Practicas de Strings en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodos-y-Practicas-de-Strings-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodos-y-Practicas-de-Strings-en-JavaScript/</guid><description>Aunque en JavaScript los strings son primitivos estos tienen metodos debido a que aprovecha el mecanismo del boxing.
Por tanto, nuestro string primitivo es enboxeado en el objeto String.</description></item><item><title>Nullish Coalescing Operator en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Nullish-Coalescing-Operator-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Nullish-Coalescing-Operator-en-JavaScript/</guid><description>Este operador sirve para resolver las situaciones en las que hacer el [[notes/Short Circuiting en JavaScript]] llevara a tener errores debido a los falsy values raros (como 0 o &amp;lsquo;&amp;rsquo;).</description></item><item><title>Objetos en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Objetos-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Objetos-en-JavaScript/</guid><description>Un objeto consiste un conjunto de pares de llave-valor. Es una estructura de datos desordenada, por lo que el orden en el que aparecen sus datos es aleatorio.</description></item><item><title>Optional Chaining en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Optional-Chaining-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Optional-Chaining-en-JavaScript/</guid><description>Esta caracteristica introducida en ES6 ayuda cuando tenemos que estar comprobando la existencia de propiedades dentro de objetos.
Propiedades Esto es muy util debido a que comunmente muchos objetos suelen venir del exterior, por tanto, hay muchas propiedades opcionales que podrian estar o no en ellos.</description></item><item><title>Parametros Default en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Parametros-Default-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Parametros-Default-en-JavaScript/</guid><description>Es una caracteristica agregada a las funciones en ES6 que permite asignar valores por defecto a los parametros en caso de que no sean brindados por el usuario.</description></item><item><title>Rest Pattern en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Rest-Pattern-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Rest-Pattern-en-JavaScript/</guid><description>Utiliza la misma sintaxis del [[notes/Spread Operator en JavaScript]], sin embargo, hace lo contrario, recolecta multiples elementos y los condensa en una sola estructura, un array.</description></item><item><title>Sets en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Sets-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Sets-en-JavaScript/</guid><description>Un set es una estructura de datos que no permite ningun elemento repetido. En JavaScript fue introducido en ES6 junto con los Maps en JavaScript.</description></item><item><title>Short Circuiting en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Short-Circuiting-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Short-Circuiting-en-JavaScript/</guid><description>En JavaScript los operadores logicos AND y OR (&amp;amp;&amp;amp; e ||) sirven para hacer mas que comparaciones logicas.
JavaScript posee un mecanismo que le permite utilizar cualquier valor mas alla de boleanos en ambos lados de la evaluacion logica.</description></item><item><title>Spread Operator</title><link>https://jaimayal.github.io/digital-garden/notes/Spread-Operator-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Spread-Operator-en-JavaScript/</guid><description>El Spread Operator es un operador que sirve para aplanar los elementos de un array, funciona como recorrer todo el array y colocarlo en variables independientes utilizando lel [[notes/Destructuring en JavaScript]], sin embargo, nos da una sintaxis super simple y limpia de trabajo.</description></item><item><title>this keyword</title><link>https://jaimayal.github.io/digital-garden/notes/this-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/this-en-JavaScript/</guid><description>Es una referencia creada para referirse al objeto actual (En el caso de [[notes/JavaScript]], al [[notes/JavaScript Execution Context]] actual).
En JavaScript esta referencia es dinamica y cambia dependiendo de la forma en que se llame a una funcion.</description></item><item><title>Valores vs Referencias en Funciones de JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Valores-vs-Referencias-en-Funciones-de-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Valores-vs-Referencias-en-Funciones-de-JavaScript/</guid><description>Es importante entender como funciona el paso por valor y paso por referencia en JavaScript.
Cuando a una funcion se le pasa una referencia (una estructura de datos o un objeto) le estamos pasando la misma referencia que existe dentro de cualquier otro contexto que se utilice la misma.</description></item></channel></rss>