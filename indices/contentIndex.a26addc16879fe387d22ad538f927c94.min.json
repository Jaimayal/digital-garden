{"/":{"title":"üå≤ Digital Garden | Jaimayal","content":"## üëâ ¬°Bienvenido a mi Jardin Digital!\nAqui se archivan todas las ideas y notas sobre lo que he aprendido a lo largo de mis estudios como universitario y autodidacta.\n## ‚úî Secciones Principales\nA continuacion las secciones principales del sitio:\n- [mapas de Contenido](mocs/mapas.md). Puntos de entrada para todos los temas que he aprendido. \n- [bancos de Prgeuntas](banks/bancos.md). Almacenamiento de preguntas divididas por temas. Te permiten crear tus propios examenes o flashcard\n## üîç C√≥mo navegar\nLas notas son mantenidas de tal forma que permitan libre navegacion entre una y otra (gracias a un va√∫l de [Obsidian](https://obsidian.md/)) por tanto cuentan con conexiones para navegar entre una y otra libremente.\n#### Color\nEs posible cambiar el tema actual (oscuro o claro) utilizando los iconos de noche / dia de la barra de navegacion superior.\n\n#### B√∫squeda\nLa barra de busqueda encuentra las ideas / notas que quieras en todo el sitio. Prueba utilizando palabras clave o prefijos.\n\n#### Backlinks y Grafica\nAl pie de pagina siempre encontrara una lista de notas que referencian a la pagina en la que se encuentra en ese momento. Adicionalmente en la grafica se puede visualizar las conexiones que tiene la pagina actual con otras.\n\n","lastmodified":"2022-10-19T23:41:24.48140529Z","tags":null},"/banks/Banco-de-Preguntas-OOP":{"title":"Banco de Preguntas | Programacion Orientada a Objetos","content":"###### ¬øQue es una Clase?\nUna clase es un conjunto de datos (atributos, valores) y funciones (metodos, operaciones, rutinas) que sirven como modelo (patron base) sobre el cual se podran obtener uno o mas ejemplares (objetos, instancias).\n\n###### ¬øQu√© es un Objeto?\nUn objeto es un ejemplar particular de una clase, cada objeto cuenta con sus propios datos y funciones. Adicionalmente, se le es permitido comunicarse con otros objetos mediante mensajes.\n\n###### ¬øQue es un Atributo?\nUn atributo es un dato contenido en una clase, regularmente, protegido mediante el modificador de vista privada. Esto con el fin de ocultar las estructuras que lo soportan (y por tanto, promover la abstraccion y el encapsulamiento).\n\n###### ¬øQue es el Estado de un Objeto?\nEl estado de un objeto esta formado por el conjunto de datos (atributos) y los valores respectivos para cada uno. Consultar el estado de un objeto es consultar qu√© valores tiene en sus atributos.\n\n###### ¬øQue son los Metodos?\nSon las operaciones que pueden ejecutar todos los ejemplares que surgan desde una clase (esto en caso de que formen parte de la interfaz publica). Por otro lado, tambien pueden ser submetodos creados para formar metodos mas complejos, esto en caso de ser declarados con el modificador de vista privada.\n\n###### ¬øQue es un Mensaje?\nEs la forma en la cual interactuan los objetos en la POO, ocurre entre dos objetos, el que envia el mensaje (activo) y el que lo recibe (pasivo). Esta interaccion ocurre mediante la interaccion de sus interfaces publicas.\n\n###### ¬øCu√°l es la Interfaz Publica de una clase?\n\n###### ¬øCu√°l es la implementacion de la interfaz publica?\n\n###### ¬øQu√© es un Constructor?\n\n###### ¬øCu√°ndo se llama a un Constructor?\n\n###### ¬øQu√© es el constructor Default y como es su implementacion?\n\n###### ¬øQu√© son los multiples constructores?\n\n###### ¬øQue es la sobrecarga de metodos?","lastmodified":"2022-10-19T23:41:24.48140529Z","tags":null},"/banks/bancos":{"title":"Bancos de Preguntas","content":"\nBienvenido a los bancos de preguntas. A continuacion se enlistan divididos por temas:\n### Desarrollo Personal\n- [Advice]()\n\n### Filosofia\n- [Descartes]()\n- [Nietzche]()\n\n### Programacion\n- [JavaScript]()\n- [Java]()\n- [Spring Framework]()\n- [HTML]()\n- [CSS]()\n\n### Finanzas\n- [Personales]()\n- [Analisis]()\n","lastmodified":"2022-10-19T23:41:24.48140529Z","tags":null},"/mocs/mapas":{"title":"Mapas de Contenido","content":"\nBienvenido a los Mapas de Contenido!. Aqui estan los puntos de entrada a cualquier idea / nota de este sitio.\n\n#### [MOC Programacion]()\n#### [MOC Finanzas]()\n#### [MOC Filosofia]()\n#### [MOC Desarrollo Personal]()","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Analisis-y-Disenio":{"title":"Analisis y Dise√±o","content":"## ¬øQu√© es el Dise√±o?\nEs un proceso que se realiza en el [Desarrollo de Software](notes/Desarrollo%20de%20Software.md), su objetivo principal es reducir la complejidad de un software.\n\n## ¬øPor qu√© deberiamos hacer Dise√±o?\nDebido a que se busca realizar un software de calidad para cumplir con todos los aspectos de un proyecto de software.\n- Cumplir con los requisitos (el ambito) en tiempo, cumpliendo el coste establecido.\n- Con una implementacion efectiva\n- Con un codigo bien legible\n\nNos ayuda a crear codigo de calidad en todos los aspectos (seguridad, legibilidad, mantenibilidad).\n- Que se puede probar\n- Que se puede leer\n- Que se puede evolucionar\n- Que se puede reutilizar\n\nEs decir, en rasgos generales, **se busca reducir la complejidad del software**. Como sabemos, la complejidad del software incrementa debido al constante cambio en los [Requisitos](notes/Requisitos.md) y otros problemas.\n\nPopularmente las personas usan el termino *Dise√±o* para referirse a las dos disciplinas (Analisis y Dise√±o), pero realmente, estas son dos muy diferentes.\n## Analisis\nBusca simplificar los requisitos y establecer unos diagramas bases ya hablando en el lenguaje de los desarrolladores. Se enfoca en partir el problema y prepara para tener un buen dise√±o.\n\nTambien se establece la terminologia con la que todos van a trabajar para que haya buena comunicacion entre los desarrolladores.\n\nResultados de esta disciplina:\n- Requisitos iniciales formalizados ya simplificados y consisos.\n- Diagrama que representa el esqueleto del software a realizar.\n\n\u003e *Para realizar el analisis se tiene que tener un pie en el modelo del dominio*\n\n## Dise√±o\nBusca dise√±ar en software lo ya analizado y hablar sobre las tecnologias con las que se va a trabajar para desarrollar el proyecto (sistemas operativos, bases de datos, frameworks, lenguajes, etc.). Las transacciones, los metodos, las conexiones, interfaces, etc.\n\n\u003e *Para realizar el dise√±o se toma en cuenta la implementacion, los frameworks, las tecnologias, etc.*\n\nResultado:\n- Diagramas que ayuden a interpretar las fases iniciales del software.\n- Reparto de Modulos y responsabilidades a multiples miembros de un equipo.\n\n## ¬øC√≥mo lograr tener un buen dise√±o?\nPara lograrlo debemos seguir los tres aspectos relacionados con el dise√±o:\n- [Dise√±o en Codigo](notes/Dise%C3%B1o%20en%20Codigo.md)\n- [Dise√±o Modular](notes/Dise%C3%B1o%20Modular.md)\n- [Dise√±o orientado a Objetos](notes/Dise√±o%20orientado%20a%20Objetos.md)","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Antipatron-Descomposicion-Funcional":{"title":"Antipatron Descomposicion Funcional","content":"Tambien llamado **Functional Descomposition**, concepto creado por William Brown, se refiere a una mala practica que puede ocurrir en el desarrollo de un programa que consiste en romper completamente el [Principio General de Asignacion de Responsabilidades](notes/Principio%20General%20de%20Asignacion%20de%20Responsabilidades.md). \n\nBasicamente es no repartir las responsabilidades (cacho de informacion y funciones respecto a ella). Esto ocurre cuando a una clase se le pasan todos los datos para hacer una operacion concreta y que despues tenga que devolver los resultados sobre toda la informacion, etc etc.\n\nAlgunos sintomas son:\n- Clases con un solo metodo \n- Ausencia de herencia y polimorfismo\n- Clases con muchos miembros estaticos\n- Datos saltando entre metodos\n\nLas consecuencias son:\n- Codigo poco mantenible, es decir, no reusable, no probable, no legible y no evolucionable. \n\nLleva a tener un mal [Analisis y Disenio](notes/Analisis%20y%20Disenio.md), a empeorar los [Fundamentos de la Programacion](notes/Fundamentos%20de%20la%20Programacion.md) y por tanto, hacer el software mucho mas complejo.\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Aprendizaje-por-Capas":{"title":"Aprendizaje por Capas","content":"Es una tecnica de estudio la cual sirve para aprender y organizar una estructura de conceptos en forma jerarquica de modo que puedas determinar que ideas son clave, cuales son detalles y cuales son extras.\n\n## Metodologia\n1. Extraer una lista de palabras clave sobre lo que vayas a estudiar\n2. Organizar esas tres palabras en una jerarquia de tres capas. Principales - Detalles - Extras\n3. Relaciona los distintos componentes de las capas.","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Arrays-en-JavaScript":{"title":"Arrays en JavaScript","content":"Los Arrays son una de las estructuras de datos mas basicas de los lenguajes de [Programacion](notes/Programacion.md), y en JavaScript se encuentran implementados de forma dinamica.\n\nUn Array dinamico puede cambiar de tama√±o, agregar elementos, quitar elementos y cambiar el contenido (Similar a un ArrayList en Java).\n\nAdicionalmente, al ser un lenguaje debilmente tipado, podemos insertar elementos de distintos tipos primitivos.\n\nExisten dos formas de crear un Array:\n- Sintaxis simple\n- Mediante un objeto\n\nLa sintaxis simple utiliza un **acortador con corchetes** y los elementos que la conforman:\n\n```JavaScript\nconst array = ['elem1', 'elem2', 'elem3'];\n```\n\nTambien se puede hacer **instanciando un objeto** de la clase *Array*:\n\n```javaScript\nconst array = new Array('elem1', 'elem2', 'elem3');\n```\n\nPara **acceder a sus elementos** se hace de la misma forma que en lenguajes como C y Java, se utiliza la notacion con \\[\\] e inicia desde 0:\n```JavaScript\nconsole.log(array[0]); // elem1\nconsole.log(array[1]); // elem2\nconsole.log(array[2]); // elem3\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Atributos":{"title":"Atributos","content":"Constituyen los datos particulares de una clase, pueden estar soportados por tipos primitivos (int, char, boolean, float, double, etc) o pueden estar soportados por otras clases.\n\nEstos suelen estar ocultos mediante el uso de la vista privada para evitar errores, mejorar seguridad, hacer efectivo el encapsulamiento y abstraer para reducir la complejidad de una clase.\n\n```Java\nclass Fecha {\n\t// Lista de atributos\n\tprivate int dia;\n\tprivate int mes;\n\tprivate int anio;\n}\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Awareness":{"title":"Awareness","content":"Se describe al awareness como una esfera de cristal que se desliza a traves de las partes de la [Mente](notes/Mente.md) y permite al consciente pensar sobre ese tema.\n\nEste desplazamiento puede ocurrir de forma voluntaria (consciente y a decision) o de forma involuntaria (influenciado por el ambiente).\n\n- El resultado del desplazamiento voluntario es el [Focus](notes/Focus.md)\n- El resultado del involuntario es la [Distraccion](notes/Distraccion.md).\n\n*Idea inspirada de: [The Power of Unwavering Focus - Podcast](reference/The%20Power%20of%20Unwavering%20Focus%20-%20Podcast.md)*","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Buenas-Practicas-API-REST":{"title":"Buenas Practicas API REST","content":"A continuacion una lista de buenas practicas recomendadas al desarrollar una RESTful API\n- Rest es orientado a recursos, por tanto, poner plurales en las URI\n- Entregar codigos HTTP adecuados\n- No anidar mas de tres niveles de recursos\n- Tener un JSON claro de maximo dos - tres niveles de anidacion\n- Integrar paginacion\n- Integrar Sorting\n- Integrar filtros\n- Documentar la API\n\t- Preferentemente OPEN API - Swagger\n- Generar links de Navegacion\n\t- Preferentemente siguiendo HATEOAS\n- Asegurar la API definiendo roles (seguridad)\n- Exportar clientes de demostracion\n\t- Preferentemente usando POSTMAN\n- Entregar errores definidos y verbosos\n- Validacion de Campos\n- Versionado de la API\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Call-Stack":{"title":"Call Stack","content":"Es la forma en que un compilador trabaja con el llamado y la ejecucion de funciones. Mediante ella, **se sabe que funcion se ejecuta primero, quien esta esperando su resultado y quien sigue posteriormente**.\n\nCuando se llama a una funcion, lo que pasa en el Call Stack es que se crea un Stack Frame (tambien llamado Function Frame o **Execution Context en JavaScript**), el cual contiene todos los datos sobre una funcion como sus parametros, el valor de retorno, nombre, memoria entre otras cosas.\n\nEl ultimo componente del Call Stack es el Active Frame, este concepto se refiere a un Stack Frame que se encuentra en la cabeza del Stack, es decir, el que va a ser ejecutado primero o mas bien, el que se encuentra activo.\n\nEntendiendo esto, veamos **como funciona el Call Stack**:\n1. Mientras se van llamando las funciones se *pushean* los Stack Frames respectivos para cada una hacia el Call Stack.\n2. Se asigna el Active Frame al Stack Frame que esta en la cabeza del Call Stack.\n3. Posteriormente se ejecuta el Active Frame hasta que es *popped* (regularmente, cuando un valor final es retornado), \n4. Finalmente el Active Frame pasa a ser el siguiente Frame del Stack y el Call Stack total se va reduciendo hasta llegar a 0.\n\nEntender esto nos sirve para entender como es que funciona la recursividad, mientras mas se van llamando las funciones (recursivamente), se va llenando el Call Stack hasta que se alcanza el Caso Base y se empiezan a retornar valores, cuyos resultados son encadenados hasta obtener el valor final el cual es el resultado de todos los retornos de las funciones recursivas.\n\nEs una parte del [[notes/JavaScript Engine]], representado por una estructura de datos 'Stack'.\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Clase":{"title":"Clase","content":"Las clases son un concepto basico de la programacion orientada a objetos. Una clase es un molde del cual podemos instanciar (crear, generar, construir, inicializar) objetos de ese tipo en particular. Este describe las operaciones y los datos que contendran los objetos que se instancien a partir de ella.\n\nFundamentalmente una clase se compone de dos cosas:\n- Atributos. Son los datos que encapsula una clase\n- Metodos. Son las acciones que puede ejecutar una clase\n\nAdicionalmente, una clase esta compuesta por una vista publica y una vista privada. \n- La vista publica representa una interfaz con la que otros objetos pueden interactuar, es el medio por el cual existe la comunicacion en la POO.\n- La vista privada representa todo lo que una clase encapsula, que es irrelevante para el mundo exterior y que se busca proteger de cambios malintencionados, suelen ser los datos (los cuales pueden ser otras clases o primitivos).\n\nUna clase tambien esta compuesta por uno o mas constructores, que son la base para inicializar los objetos.\n- Un constructor es como un metodo especial que sirve para brindar valores iniciales a una instancia en particular.\n\nA partir de una clase pueden ser instanciados objetos, cada objeto tendra sus propios miembros privados y publicos provenientes de su clase.\n\n```Java\nclass Fecha {\n\t// Vista privada\n\tprivate int dia;\n\tprivate int mes;\n\tprivate int anio;\n\n\t// Constructor\n\tpublic Fecha(int dia, int mes, int anio) {\n\t\tthis.dia = dia;\n\t\tthis.mes = mes;\n\t\tthis.anio = anio;\n\t}\n\n\t// Vista publica\n\tpublic void imprimirFecha() {\n\t\tSystem.out.println(dia + \"/\" + mes + \"/\" + anio);\n\t}\n}\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Closures-en-JavaScript":{"title":"Closures en JavaScript","content":"Es una caracteristica especial de las [[notes/Funciones en JavaScript]] que combina los [[notes/JavaScript Execution Context]], el [[notes/Call Stack]]y los [[notes/Scope]] .\n\nEs un fenomeno que ocurre gracias a las [[notes/Funciones de Primera Clase]]. \n\n**Basicamente un closure es la conexion que existe entre una funcion y el variable environment que existia cuando fue asignada**. Este **tiene prioridad sobre cualquier otro [[notes/Scope]]**.\n\n![[files/Closure.png]]\n\n```JavaScript\nconst secureBooking = function() {\n\tlet passengerCount = 0;\n\n\treturn function() {\n\t\tpassengerCount++;\n\t\tconsole.log(`${passengerCount}`);\n\t}\n\n\tconst booker = secureBooking();\n\tbooker();\n}\n```\n\nAun si donde fue creada ya no existe, sigue manteniendo las referencias y valores que le fueron asignados (o heredados) como propios.","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Compilacion-vs-Interpretacion":{"title":"Compilacion vs Interpretacion","content":"Como se sabe, las computadoras solamente entienden codigo maquina (Binario, regularmente). En la [[notes/Programacion]] existen dos tipos de lenguajes que llegan a este fin de maneras diferentes, los lenguajes Compilados y los Interpretados.\n\n## Compilacion\nPara ejecutar un programa desde un codigo escrito en un lenguaje compilado tenemos que hacer dos pasos.\n1. Traducir todo el codigo de una sola pasada a codigo maquina que es facilmente ejecutable\n2. Ejecutar el codigo mediante el archivo resultante en cualquier momento.\n\n![[files/Compilacion.png]]\n## Interpretacion\nCada vez que el codigo es ejecutado este tiene que ser traducido linea por linea a codigo maquina y despues ser ejecutada una tras otra, es por eso que se dice que los lenguajes interpretados son tan lentos.\n\n![[files/Interpretacion.png]]\n\n## Just-in-Time Compiled\nEs una variacion y combin acion entre la Compilacion y la Interpretacion.\n\nEn este caso, cuando se busca ejecutar codigo, primero es completamente pasado a codigo maquina y despues es ejecutado, con la caracteristica de que esta vez no obtenemos archivos intermedios portables\n\n![[files/Just-In-Time-Compiled.png]]","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Construccion-de-Software":{"title":"Construccion de Software","content":"Se podria decir que es una variante del [[notes/Desarrollo de Software]], sin embargo, tiene un enfoque mucho mas especifico a las partes de [[notes/Programacion]] y [[notes/Pruebas]].\n\nEs un termino utilizado tambien de forma analoga con [[notes/Programacion]] y Codificacion, se refiere al acto de escribir el codigo fuente de un software para atacar un problema en especifico. Es decir, la actividad principal sobre la cual se basa la profesion de un desarrollador.\n\nLos requisitos, analisis y dise√±o (tambien llamados [[notes/Prerequisitos]]) se hacen antes del proceso de [[notes/Programacion]] con el fin de buscar calidad desde el inicio del proyecto.\n\nLas buenas practicas de escritura de codigo se hacen durante el proceso de construccion con el fin de buscar calidad a la mitad del proyecto.\n\nTodo el trabajo de QA como el testing, el enfoque en el objetivo, buscar que se construya el software correcto y bien es parte de buscar la calidad cerca del final del proyecto.\n\n## Referencias\n*[[reference/@ Code complete]]*","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Constructores":{"title":"Constructores","content":"Popularmente llamados \"constructores\" son metodos especiales en el codigo que sirven como **inicializadores de objetos**. Buscan crear instancias especificas de una clase, una instancia en particular tambien es llamada [Objeto](notes/Objeto.md). Los constructores ademas son encargados de que todas las instancias sean **estables** inicializando todos los atributos de su clase a un valor especifico.\n\n```Java\nclass SomeClass {\n\tprivate int value\n\n\t// Constructor\n\tpublic SomeClass() {\n\t\tthis.value = 1;\n\t}\n}\n```\n\nEs buena practica inicializar todos los atributos y no depender de funciones del compilador. \n\nTambien es considerada buena practica integrar al menos un constructor y no recaer en el default constructor dado por el compilador en caso de que no tengamos ninguno en nuestra clase.","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/DOM":{"title":"DOM","content":"El DOM se refiere al Document Object Model. El DOM es una representacion estructurada de un documento HTML, mediante este, podemos cambiar de forma dinamica los estilos y el contenido de los elementos de una pagina web.\n\nEl punto de entrada para obtener el documento HTML en forma de objeto en Javascript es utilizar 'document.'\n\nEs representado con una estructura de arbol y permite representar **absolutamente todo lo que se encuentre en el documento de HTML**.\n\n![files/DOMTreeExample.PNG](files/DOMTreeExample.PNG)\n\n**La especificacion del DOM no esta incluida en JavaScript**, esta implementada mediante un WEB API comun en todos los navegadores web, es por eso que no se necesita instalar ni descargar nada. \n\n\n\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/DataGrip":{"title":"DataGrip","content":"\nCliente inteligente desarrollado por Jetbrains para el manejo de bases de datos.\n\nHerramiente excelente utilizada por un monton de empresas grandes","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Definicion-del-Problema-en-un-Desarrollo-de-Software":{"title":"Definicion del Problema en un Desarrollo de Software","content":"La definicion del problema es el primer paso para lograr tener unos buenos [[notes/Prerequisitos]]. \n\nBusca identificar lo que se busca resolver de modo que, si se desarrolla un software, se garantiza que se ataque al problema correcto.\n\nLa definicion del problema debe de estar escrita con el lenguaje del usuario final, y de preferencia debe de estar casi escrito por el mismo, solo el sabe el problema que tiene.\n\nEn caso de no hacerse, se puede incurrir en que se desarrolle el software bien pero no atacando al problema que deberia (es decir, atacanado a un problema fantasma).\n\n![[files/DefinicionDelProblema.png]]\n\n## Referencias\n*[[reference/@ Code complete]]*","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Desarrollo-Profesional":{"title":"Desarrollo Profesional","content":"Ocurre cuando en el proceso de [Programacion](notes/Programacion.md) se analiza y escribe el codigo pensando claramente en cumplir los [Requisitos](notes/Requisitos.md), contrario al [Pseudohacking](notes/Pseudohacking.md), en el desarrollo profesional se busca agregar unicamente el codigo que se sabe y entiende claramente lo que realiza.\n\nInspirado de: [The essentials of modern software engineering Free the practices from the method prisons](es/reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/main.md)]","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Desarrollo-de-Software":{"title":"Desarrollo de Software","content":"El desarrollo de Software es toda una serie de procesos que se realizan con el fin de desarrollar un software de fin a fin. El desarrollo comprende los procesos de\n- [Requisitos](notes/Requisitos.md)\n- [Analisis y Disenio](notes/Analisis%20y%20Disenio.md)\n- [Programacion](notes/Programacion.md)\n- [Pruebas](notes/Pruebas.md)\n- [Despliegue](notes/Despliegue.md)\n\nentre otros.\n\nEste proceso hoy en dia es mejorado fuertemente agregando disciplinas de la ingenieria de modo que sea mas facil de llevar, repetible y mejorable. A este proceso se le llama [Ingenieria del Software](notes/Ingenieria%20del%20Software.md).\n\nInspirado de: [The essentials of modern software engineering Free the practices from the method prisons](es/reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/main.md)","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Desarrollo-de-un-Monolito-en-Spring":{"title":"Desarrollo de un Monolito en Spring","content":"## Buenas Practicas Generales\nSpring Specification sirve para meter filtros a los recursos de forma estandarizada.\n\nEn caso de enviar un request malo es buena practica devolver los tipos de request que un endpoint acepta\n\nUna buena practica esque en post se devuelva la ruta donde se puede recuperar el usuario creado.\n\nOtra buena practica es retornar el header Location despues de crear un recurso.\n\nLos controladores normales no deberian de tener recursos anidados, para ellos se debe de crear otro aparte y a su vez para los recursos anidados se debe hacer otro por si se necesitan hacer operaciones mas alla de lectura (CRUD).\n\nDependiendo del Dominio un JSON deberia o no contener lo relacionado con un recurso y sus anidaciones. Si se requiere, se pueden enviar links para poder recuperar mas informacion del usuario.\n\nEs una integracion que sirve para hacer Restful APIs navegables entre los distintos endpoints de la API.\n\n## Capa Servicio\n- Se implementan las reglas de negiocs\n- Residen los algoritmos complejos\n- Un Controller puede usar uno o mas Servicios\n- Los servicios manipulan los repositorios o DAO\n\n- NO el acceso a datos\n- NO la comunicacion con servicios externos (consumo de datos)\n- NO algoritmos de controladores, nada de lo que tenga que ver con requests ni mecanismos de comunicacion\n\n## Consumo de Servicios Externos\nMuchas veces es parte de la capa de negocios pero debe de estar separada de la logica dura de negocio para mantener una modularidad. Para ello se crea una capa \"Cliente\" que es la que se encarga de consumir los servicios.\n\n- La capa cliente es un segmento de codigo que se enfoca en recuperar datos de otras APIs, cloud, web scrapping, etc.\n\n![[files/LayerClient.png]]\n\nRegularmente se utiliza **RestTemplate** para implementar la logica del consumo a otros servicios REST.\n\nEstas RestTemplate se a√±aden a clases concretas usualmente construidas a partir de interfaces para establecer contratos y aprovechar Spring. Se mapean a DTOs especificos y son utilizadas desde la logica fuerte en la capa de Servicio\n\n### Feign\nHay otra forma de hacerlo utilizando el Stack de Netflix y se hace mediante todo anotaciones y se puede utilizar tambien para consumir servicios\n\n## Librerias Utiles\n- Apache POI. Permite interactuar con cualquier programa de Office (Powerpoint, Word, Excel, etc)\n- iTEXT. Libreria para trabajar con PDF y otros formatos de texto planos.\n\n## Optional\nUna de las nuevas cosas que ofrece Java 8, Permite especificar que un objeto puede estar o no presente (es  opcional), de tal modo que las comprobaciones, excepciones y el trabajo con la API stream es mucho mas facil.\n\n## Sistema de Trazas - Logback\nPresente en Spring, es subyacente, es decir, se utiliza en Spring. \n- Logback viene a reemplazar a log4j\n- Es la forma de guardar informacion del programa\n- Permite trazar errores\n- Pueden ser persistidas en archivos planos, bases de datos, u otros.\n\nFrameworks \n- Log4j\n- Logback\n- JUL\n\nNiveles de Trazas\n- Debug\n- Info\n- Warn\n- Error\n- Fatal\n\nMedios para persistencia (Appenders)\n- Console\n- File\n- FTP\n- Kafka\n- Cassandra\n- \n\n### Recomendaciones generales\n- Configurar un Logger Manager\n- Implementar logs Info en las acciones mas signifcativas\n- Implementar debug en las acciones criticas (riesgosas, las que me dan mas miedo)\n- Implementar error lo mas verbosos posible\n\n### Configuracion\nPara cambiar la configuracion de logback (incluido con Spring) podemos utilizar el archivo logback.xml dentro de resources\n- ConsoleAppender - Apende las trazas a la consola\n- FileAppender - Apender a un archivo\n- RollingFileAppender - Apender a un archivo que reinicia cada que cumple determinada expresion (cada x tiempo, cada cantidad de lineas, etc). Ademas tambien puede eliminar cada ciertas lineas, cada cierto peso y cada cierto tiempo\n- SiftingAppender - Apender que sirve para logear hacia un archivo pero con la ventaja que permite colocar condiciones logicas para agregar a los archivos bajo determinadas situaciones, aplicaciones o contextos\n\n\nAparte de definir un Appender se tiene que especificar en el rel los distintos appenders a utilizar.\n\nExiste la anotacion @Slf4j para hacer logging evitando escribir toda la parte verbosa del logging\n\nAdemas, nos permite establecer condicionales con la etiqueta \\\u003cif\\\u003e lo que nos permitira cambiar los appender, la configruacion, las trazas y todo con solo cumplir o cambiar una variable de un archivo .properties!. Esto se hace gracias a la libreria **Janino**.\n\nAdemas, tambien podemos definir estrategias para loggear diferentes paquetes. Para ellos podemos utilizar la etiqueta \\\u003clogger\\\u003e en donde podemos especificar el paquete, el nivel de tracing, los appenders y asi a cada uno que queramos!\n\n### Infraestructura de Logging\n- Logs\n- Logstash para Data Processing\n- Elasticsearch para Storage\n- Kibana para Visualizar\n\n\n\n\n\n## Capa de Persistencia\nSpring utiliza Hibernate como motor ORM.\n- Jpa es un estandar que envuelve a Jdbc.\n\ndockercompose es una solucion YAML que permite declarar las imagenes necesarias para una solucion fullstack (Base de datos, Back, Front, etc).\n\ndocker brinda mucha practicidad para trabajar con bases de datos y programas complejos\n\n### Dependencia\nSe necesita de dos dependencias escenciales\n- La spring boot starter de JPA\n- El driver de la base de datos a utilizar\n\nPosteriormente se necesita de agregar configuracion al application.properties\n\ninitialization.mode=always. Es un parametro importante debido a que permite tener una inicializacion de tablas mediante un script sql. Se pueden tener multiples y se seleccionara el que coincida con el especificado en el platform de application;properties\n\njpa.hibernate.ddl=update|create-drop|validate|none. Similar al anterior pero en este claso se realiza de acuerdo a los cambios en las clases marcadas con @Entity.\n\n### Queries con Wildcards\nLa clave esta en los nombrados que se les puede dar a los metodos, expresado de esta manera se pueden obtener los datos sin problema.\n\nSe puede obtener mas informacion en la [documentacion oficial](https://docs.spring.io/spring-data/jpa/docs/1.3.0.RELEASE/reference/html/jpa.repositories.html#jpa.query-methods).\n\n### Queries con @Query\nTambien se pueden hacer queries cutomizadas utilizando la anotacion @Query, escribir la consulta y utilizar wildcards en ella que son pasados al metodo como parametro.\n\n### Pageable y Sort\nPageable es un objeto especial que nos sirve para limitar la cantidad de elementos que deben de mostrarse en una pagina.\n\nLos datos de Pageable llegan desde la URI mediante @RequestParam, requiere de un valor de 'page' y un valor de 'size' que determina cuantos elementos tendra la pagina.\n\nPodemos darle valores por defecto a un Pageable para que no sea necesario que el frontend lo tenga que enviar.\n- @PageableDefault(size, sort, direction). En caso de no ser suministrados\n\nSort es otro objeto especial\n\n### Repositorios NoSql\nJPA tambien tiene soporte para bases de datos NoSQL como Mongo o Cassandra basadas en Documentos.\n\nPara a√±adir soporte a ellos solo es necesario;\n- Agregar la dependencia\n- Crear unos beans para Mongo\n- A√±adir un Repositorio\n- Las entities ahora son decoradas con @Document\n\n## Mapping\n### Dtos vs Entities\nLos entities deben interaccionar con la base de datos y servir como objetos de transferencia\n\nLos DTOs deben ser los objetos utilizados para la comunicacion con clientes externos\n\nAl proceso de pasar un DTO an un Entity o viceversa es el Mapping\n\nLa libreira de MapStruct provee una forma de convertir entre entities y DTOs de forma automatica.\n\n1. Agregar Dependencia\n2. Agregar plugin para integracion con Lombok\n3. Crear una interfaz para hacer el mapping\n\n## Testing\nTodas las capas deben de ser testeadas, cada una de forma aislada de las otras. Hacer estas pruebas no asegura que el software este 100% libre de errores.\n### Testing Unitario\nSe escribe codigo para probar otro codigo. Un test Unitario como su nombre indica, busca probar una unica unidad de codigo.\n\nLos mocks nos sirven para desacoplar las capas y poder testear de forma verdadera la capa.\n\nLa anotacion @InjectMocks marca a la clase bajo test que se le van a inyectar los Mocks\n\nLa anotacion @Spy sirve para mockear parcialmente comportamientos, se utiliza en vez de @Mock\n\nAnotaciones Utiles de JUnit Jupiter\n- @DisplayName. Nombre que se va a mostrar como descripcion del test\n- @Order. Orden de ejecucion\n- @Disabled. Desactiva al test\n- @EnabledOnOs(OS.VALUE). Test que solo se activa al sistema operativo\n\nCualidades un poco mas avanzadas, test parametrizados\n- @ParametirzedTest marca que el test tiene parametros especificados por nosotros\n- @ValueSource. Una de las formas de especificar valores de entrada para el test\n\nLibreria muy util **Podam**. Sirve para poder crear multiples objetos de una misma clase y poder poblar listas u otras cosas, sirve mucho para proveer resultados para los metodos de los mocks. Sirve para poder generar informacion Dummy que puede ser utilizada para hacer tests u otras cosas.\n- Se recomienda la base de datos H2 para hacer tests a la capa de persistencia\n- @Import Hateoeas es necesario para importar la configuracion desde un bean\n- \n### Testing de Integracion\nCucumber + Gherkin\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Despliegue":{"title":"Despliegue","content":"Es uno de los procesos terminales que ocurre en el ciclo de [Desarrollo de Software](notes/Desarrollo%20de%20Software.md), busca crear un entorno de produccion para que los usuarios finales puedan utilizar el software.\n\nNormalmente se despliega en un servidor y en multiples instancias para satisfacer la demanda de los usuarios.\n\nSe utilizan multiples tecnologias para orquestar que este proceso se desarrolle de forma adecuada.\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Destructuring-en-JavaScript":{"title":"Destructuring en JavaScript","content":"Es un mecanismo de [[notes/JavaScript]] que sirve para desestructurar una estructura de datos hacia multiples variables.\n\nPara esto, existe una sintaxis especial que sirve para declarar multiples variables basada en los elementos que ya tiene una estructura de datos.\n\n### Desestructurando Arrays\nSe utiliza la sintaxis con corchetes, el orden de los elementos importa.\n\n```JavaScript\n// Array inicial\nconst array = [1, 2, 3];\n\n// Destructuracion\nconst [x, y, z] = array; // Asignacion de desestructura\nconsole.log(x) // 1\nconsole.log(y) // 2\nconsole.log(z) // 3\n```\n\n**Esta forma de deconstruccion duplica los elementos de un array, por tanto, si son modificados no afetara al array original.**\n\nAdicionalmente, el destructuring tambien es util para intercambiar dos valores de variables.\n\n```JavaScript\nlet [main, sec] = {1, 2}; // [1, 2];\n[main, sec] = [sec, main]; // [2, 1];\n```\n\nY tambien sirve para desestructurar estructuras anidadas\n```JavaScript\nconst nested = [2, 4, [5, 6]]; // array nested\nconst [i, , [j, k]] = nested; // 2, 5, 6\n```\n\nAdicionalmente, tambien podemos conseguir valores por defecto en caso de que estos no se encuentren o se salgan del rango maximo del array\n```JavaScript\nconst array = [1, 2];\nconst [one = -1, two = -1, three = -1] = array; // 1, 2, -1\n```\n\n### Desestructurando Objetos\n#### Variables Inmutables\nEn este aso, se utiliza la sintaxis con llaves, el orden de los elementos no importa mientras tengan el mismo nombre de las propiedades dentro de los objetos.\n\n\n```JavaScript\nconst {propiedad1, propiedad2, propiedad3} = objeto;\n```\n\nDe esta manera, cada variable obtendra su respectiva propiedad y podra trabajar de manera individual.\n\n#### Variables Mutables\nEn caso de estar trabajando con variables mutables, debemos notar que lo siguiente dara error de sintaxis debido a que JavaScript toma los corchetes como un inicio de bloque de codigo, por tanto, no puede hacer una asignacion.\n```JavaScript\nlet a = 3;\nlet b = 4;\n{a, b} = obj; // SIntaxis incorrecta\n```\n\nPara hacer esto, debemos utilizar un parentesis al rededor de toda la expresion.\n```JavaScript\nlet a = 3;\nlet b = 4;\n({a, b} = obj); // Sintaxis valida\n```\n\n#### Cambiar Nombres\nAdicionalmente, tambien podemos cambiar el nombre de las propiedades a otro que deseemos.\n\n```JavaScript\nconst {\n\tpropiedad1: nombreDeseado1, \n\tpropiedad2: nombreDeseado2, \n\tpropiedad3: nombreDeseado3\n} = objeto;\n```\n\n#### Valores por Defecto\nTambien podemos asignar un valor por defecto en caso de que la propiedad no exista dentro del objeto. De esta forma evitamos tener 'undefined'.\n\n```JavaScript\nconst {propiedad1 = valorPorDefeto} // En caso de no ser encontrado, seras vlaorpordefecto\nconst {propiedad1: nombreDeseado1 = valorPorDefecto} // Lo mismo pero sintaxis combinada\n```\n\n#### Mutabilidad del Objeto\nEn este caso, al utilizar la desestructura se te devuelve la misma referencia a los objetos que estan contenidos dentro del objeto. Por tanto, si cambias tus variables cambiaras las de tu objeto tambien.\n\n```JavaScript\nconst {name, mainMenu, starterMenu} = restaurant;\n\nconsole.log(mainMenu);\nconsole.log(restaurant.mainMenu);\n\nmainMenu.push('Pizza23');\nconsole.log(mainMenu);\nconsole.log(restaurant.mainMenu); \n```\n\n#### Objectos Anidados\nExiste tambien una sintaxis especial para lidiar con objetos anidados dentro de objetos. Suponiendo que tenemos el siguiente objeto con objetos anidados:\n\n```JavaScript\nconst restaurant = {\n¬† name: 'Classico Italiano',\n¬† openingHours: {\n¬† ¬† thu: {\n¬† ¬† ¬† open: 12,\n¬† ¬† ¬† close: 22,\n¬† ¬† },\n¬† ¬† fri: {\n¬† ¬† ¬† open: 11,\n¬† ¬† ¬† close: 23,\n¬† ¬† },\n¬† ¬† sat: {\n¬† ¬† ¬† open: 0, // Open 24 hours\n¬† ¬† ¬† close: 24,\n¬† ¬† },\n¬† },\n};\n```\n\nLa forma de obtener, por ejemplo, las horas del dia sabado seria utilizando la sintaxis de cambio de nombres + una anidacion:\n\n```JavaScript\nconst {openingHours: {sat: {open, close}}} = resturant;\nconsole.log(open, close) // 0, 24\n```\n\n#### Aplicacion a Funciones\nEn JavaScript usualmente las funciones suelen tener muchos argumentos, una forma de lidiar con ellos es utilizar un objeto para enviar los parametros, dentro del objeto que recibe la funcion, podemos hacer desestructuracion directamente!.\n\n```JavaScript\nconst obj = {\n\tattrib: 1\n\n\tfunc: function({parametro1 = 1, parametro2 = 1}) {\n\t\tconsole.log(parametro1); // valor o 1\n\t\tconsole.log(parametro2); // valor o 1\n\t}\n}\n\nobj.func({\n\tparametro1: 23;\n}) // Resultado sera 23, 1\n```\n\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Dise%C3%B1o-Modular":{"title":"Dise√±o Modular","content":"Es el nivel posterior al [Dise√±o en Codigo](notes/Dise%C3%B1o%20en%20Codigo.md), aparte de ser codigo bien inspirado del modelo del dominio que es altamente legible, se agrega que son modulos (o piezas) de codigo que tienen un tama√±o homogeneo con alta cohesion y poco acoplamiento. \n\nEs decir, piezas que tienen un tama√±o similar, en el cual cada una ejerce una sola y unica funcion que se acopla con muy pocas piezas porque no es un experto que tiene que realizar todo en la aplicacion.\n\nPara hacerlo aprovecha e impulsa la abstraccion, encapsulacion, modularidad y jerarquia, busca finalmente crear modulos de alta calidad, es decir, que tengan alta [Mantenibilidad](Mantenibilidad.md)] (escalabilidad, calidad, reusabilidad, etc).\n\n## Abuso del Patron Experto en la Informacion\nEsta forma de dise√±o surge principalmente por un excesivo abuso del [Patron Experto en la Informacion](notes/Patron%20Experto%20en%20la%20Informacion.md), de ese modo, una clase puede llegar a tener un acoplamiento excesivo y puede crear clases muy complejas que colabora no solo con una sino con muchas tecnologias y clases a la vez.\n\nY no solo eso, sino que acoplas la clase que tiene la informacion con determinada tecnologia de modo que no puede utilizar piezas intercambiables (otro tipo de vista, otro tipo de persistencia, de seguridad, etc).\n\n## Criterios\nEsta disciplina del dise√±o recupera tres conceptos recurrentes.\n- Cohesion (Maxima)\n- Acoplamiento (Menor)\n- Tama√±o (Poco)\n\nUna buena aplicacion de estos criterios resulta en clases altamente cohesivas y pocamente acopladas (acoplamiento eferente a clases inestables), con un bajo tama√±o. Es decir, respetando al maximo el [[Principio KISS]]\n## Cohesion\nEs una medida que nos sirve para determinar que tantas twresponsabilidades tiene un modulo y que tanto se relacionan entre ellas.\n\n- Una clase con alta cohesion tiene las responsabilidades minimas estrechamente relacionadas. Es decir, tiene un minimo numero de metodos altamente relacionados entre si.\n\nEste elemento es fundamental, se encuentra en todos lados, las nuevas arquitecturas de microservicios por ejemplo, en el que cada uno es dedicado a cierta funcionalidad exponiendo la minima cantidad de cosas que se relacionan estrechamente entre si.\n\nObjetivos:\n- Pocas funcionalidades\n- Altamente relacionadas\n\n## Acoplamiento\nEs otra medida que nos sirve para determinar la cantidad de [[notes/Relaciones entre Clases (Gestion de Dependencias)]] que tiene un modulo con otro. \n\nTener un bajo acoplamiento infiere que existen la minima cantidad de dependencias o colaboracion para llevar acabo la responsabilidad que le concierne.\n\nDe este modo, permite que, si una pieza es reemplazada solo sea afectada la minima cantida de modulos porque sus dependencias son muy pocas.\n\n### Visibilidad\n#### Acoplamiento Directo\nSon todos aquellos dados en cualquier [[notes/Relaciones entre Clases por Colaboracion]] o [[notes/Relaciones entre Clases por Herencia]].\n\nEs decir, para una clase A esta acoplada de una clase B si:\n- La tiene como atributo\n- La tiene como parametro de un metodo\n- La tiene como variable local dentro de un metodo\n- La devuelve de un metodo\n- Es derivada de ella\n- Utiliza sus metodos estaticos\n\n#### Acoplamiento Indirecto\nOcurre cuando:\n1. Clase A tiene una dependencia directa con la clase B. Y ademas, esta \n2. Clase B en uno de sus metodos retorna una clase C\n3. Clase A utiliza este metodo de la Clase B\n4. Ahora la clase C es utilizada en la clase A de forma indirecta\n\n```Java\nclass A {\n\tvoid main() {\n\t\tnew B().getClassPerformer().someMethod(); // Acoplamiento indirecto\n\t}\n}\n\nclass B {\n\tclassC getClassPerformer();\n}\n\nclass C {\n\t//...\n\tvoid someMethod();\n}\n```\n\n### Direccion\n#### Acoplamiento Aferente - Reusabilidad\nQuienes dependen de mi para realizar sus funciones, ya sea por colaboracion, por herencia o por acoplamiento indirecto.\n- Cuando esta clase es la usada en una relacion de uso\n- Cuando esta clase es una parte de una relacion de composicion\n- Cuando esta clase es el asociado en una relacion de asociacion\n- Cuando esta clase es padre de otras clases.\n\n#### Acoplamiento Eferente - Dependencias  \nDe quien dependeno para reaizar mi funcion, se identifica mediante relaciones de colaboracion, herencia o por acoplamiento indirecto.\n- Cuando esta clase es la que usa a otras en una relacion de uso\n- Cuando esta clase es el todo en una relacion de composicion\n- Cuando esta clase es la que requiere de un asociado en una relacion de asociacion\n- Cuando esta clase es hija de una superclase.\n\nSe puede permitir el acoplamiento alto si:\n- Las clases a las que estoy acoplado son muy estables y generalizadas (como libreria de Java)\n\nNormalmente habra un grado medio de acoplamiento si estoy trabajando para realizar mis funciones\n\nSe busca un bajo acoplamiento de clases que son inestables y que pueden tender a ser cambiadas a futuro (de interfaz o de implementacion).\n\nEstas propiedades estan fuertemente relacionadas, si se impulsa para bien una de ellas de forma inferente se impulsara la otra.\n\n## Tama√±o\nSirven como una referencia a tener en cuenta para escribir codigo de calidad, no se deben seguir a rajatabla sin embargo establecen un punto de partida para permitir identificar codigo de calidad.\n\n- Paquete - 12 a 20 clases\n- Clase - 3 a 5 atributos\n- Clase - 15 a 25 metodos\n- Clase - 200 a 500 lineas\n- Metodo - 1 a 3 parametros\n- Metodo - 10 a 25 lineas\n- Metodo - 2 a 3 sentencias anidadas\n- Linea - 80 a 120 caracteres\n\n**Son solo valores orientativos**.\n\n## Modularidad\n### Numero de Modulos\nLa cantidad de modulos por programa debe ser ajustada a la cantidad de codigo que tendra cada una.\n\nAl realizar dise√±o modular existen dos costes principales.\n- Costo por Implementacion. Lo que cuesta escribir cada clase (cantidad de lineas).\n- Costo por Integracion. Lo que cuesta integrar todas las clases con un buen dise√±o.\n\n### Distribucion de Responsabilidades\nEl problema debe ser dividido entre distintos modulos de modo que todos aporten algo a resolver el problema de forma relativamente equitativa\n\n## Jerarquizacion\nExisten dos formas de jerarquizar el dise√±o para resolver un problema\n- Top Down\n\t1. Se desarrolla la clase principal\n\t2. Se escriben sus atributos privados \n\t3. Se escribe su interfaz publica\n\t4. Se codifican las interfaces\n\t5. Se instancian objetos y se usan metodos conforme sean necesarios de otras clases.\n\t6. Se evalua que clase de las que faltan es la mas riesgosa de escribir\n\t7. Se vuelve al paso 2\n- Me hago el diagrama de clases en el que hago el reparto de responsabilidades e inicio con el metodo top down\n- Un dise√±o es un diagrama UML que puede servir para plantearse el codigo antes de escribirlo\n\n## Interfaz - Parte Publica\nLos smell codes contribuyen a tener un pesimo codigo.\n- Homogenea. Nombrado, orden de parametros, valores de retorno\n- Suficiente. Que no haya efectos secundarios, que solo sean acciones unicas.\n- Minima. Que ofrezca la interfaz minima suficiente para satisfacer las necesidades basicas (primitivas) y nada mas.\n\n**Una buena interfaz publica debe de ser minima, ofreciendo los metodos suficientes de forma homogenea para que otros lleven acabo sus operaciones**\n### Codigo Sucio por Clases Alternativas con Interfaces Diferentes\nSe debe homogeneizar el nombrado que se le da a las cosas de escencia similar dentro del codigo, tratar de mantener una terminologia homogenea en el como son nombrados los metodos publicos a traves de todas las clases es algo a lograr.\n\n- Homogeneizar los nombres\n- Utilizar herencia por extension o implementacion\n- Mover responsabilidades\n\n### Principios del Menor Compromiso\nUna clase solo debe exponer en su interfaz publica los metodos suficientes como para que desarrolle su unico trabajo sin tener efectos secundarios o tener metodos que no van de acuerdo con el nombrado / los datos que tiene.\n\n**Cada metodo tiene que ser un unico verbo, e implementa solo lo que dice**.\n\n### Interfaz Suficiente, Completa y Primitiva\n- Suficientes caracteristicas para satisfacer las funcionaldiades que debe proveer a otras clases\n- Primitiva. Solo contener operaciones que son primitivas para esta clase y no requiere de muchas especificaciones.\n\n## Dise√±o por contrato\nTres terminologias\n- Error\n- Defecto\n- Fallo\n\nDos tipos de errores\n- Errores Excepcionales\n- Errores logicos\n\nDos mecanismos para lidiar con fallos\n- Programacion Defensiva\n- Aserciones\n\nEl dise√±o por contrato establece un contrato entre dos partes, el cliente y el servidor.\nEl cliente de un metodo es quien le esta llamando, el servidor es el que procesa la entrada y del que se espera obtener un resultado.\n\nEl dise√±o por contrato concibe que estas dos partes tengan un contrato formal en el que se establecen:\n1. Las precondiciones que debe de cumplir un cliente para llamar una funcion\n2. Las postcondiciones que debe de cumplir el servidor y retornarle al cliente\n\nDe esta forma, las dos partes del contrato pueden estar seguras que ambas cumpliran con su parte y pueden avanzar de forma segura.\n\nPara implementarlo se suele utilizar los assert.\n\n## Implementacion - Vista Privada\n### Cohesion\n- Cohesion de Metodos\n- Principio de Unica Responsabilidad (S de SOLID)\n- Responsabilidad fuera de Lugar. La responsabilidad no esta donde deberia de estar\n\t- Condigo Sucio por Envidia de Caracteristicas\n\t- Codigo Sucio por Clase de Datos\n\t- Codigo Sucio por Cambios Divergentes\n- Sin clase para una Responsabilidad. Sin nadie puede asumir la responsabilidad\n\t- Codigo Sucio por Cirugia a Escopetazos\n\t- Codigo Sucio por Grupo de Datos\n\t- Codigo Sucio por Obsesion de Tipos Primitivos\n- Clase sin Responsabilidad. Existe una clase pero no tiene nada por hacer\n\t- Codigo Sucio por Clases Perezosas\n\n#### Cohesion de Metodos\n- Las funciones deberian hacer una sola cosa.\n- Violaciones\n\t- Las funciones realizan mas de una operacion\n\t- Las lineas persiguen objetivos distintos a lo que espeifica el metodo\n\t- Falta de Cohesion en el metodo\n- Solucion\n\t- Dividir las distintas lineas de distinto tipo en diferentes funciones\n\t- Evitar el acoplamiento entre distintas funcionalidades de una clase\n**Pedirle Cohesion a un metodo**\n\n#### Principio de Unica Responsabilidad\nUna clase cohesiva (como deberia de estar hecha) solo **deberia tener un unico motivo de cambio**, es decir, solo se deberia ver afectada por una unica cosa (persistencia, vista, comunicacion solo uno pero no todos a la ves).\n\n**Pedirle cohesion a una clase**.\n\n#### Codigo Sucio por Envidia de Caracteristicas\nUna clase que envidia a otra clase pidiendole todo el rato sus caracteristicas para hacer los calculos en vez de que la clase que tiene los datos hacerlos.\n\nEs decir, no se respeta el Patron Experto en la Informacion.\n\n#### Codigo Sucio por Clase de Datos\nEl otro lado de la moneda, en este caso la clase que permite que le pidan todo y queno calcula nada es la clase de Datos.\n\n#### Codigo Sucio por Cambios Divergentes\nOcurre cuando una clase puede ser afectada por multiples cambios, es decir, si se cambia una tecnologia se cambiara una parte, si se cambia la persistencia otra parte, si se cambia la vista otra parte. Eso esta mal, una clase solo deberia ser afectada por una sola cosa.\n\nLa solucion seria dividir esta en diferentes clases.\n\n#### Codigo Sucio por Cirugia a Escopetazos\nEs el lado contrario al anterior, en vez de que exista una clase que se encargue de una responsabilidad, esta responsabilidad esta distribuida a traves de multiples clases y si es cambiada tiene que cambiar en varios lugares a la ves.\n\n#### Codigo Sucio por Grupo de Datos\nHay grupos de datos que son utilizados en muchos lados y que en realidad deberia estar como una clase y no como datos separados.\n\nLa solucion es crear una clase que ademas de ser reusable puede asumir responsabilidad y aliviar a otras clases.\n\n#### Codigo Sucio Obsesion por Tipos Primitivos\nOcurre cuando en vez de utilizar una clase (donde es necesario porque se requieren operaciones) se utiliza un primitivo con el argumento de que una clase de un atributo no existe.\n\n#### Codigo Sucio por Clases Perezosas\nUna clase que tiene muy pocos datos y ni siquiera hace operaciones, es perezosa. Puede ser como un holder nada mas de datos que no hace nada.\n\n\n### Acoplamiento\n#### Codigo Sucio Inapropiada Intimidad (Evita los ciclos). - No te acoples en ciclos\nUna relacion bidireccional complica el codigo y muchas veces crea ciclos muy complejos que hacen al codigo dificil de manejar\n- Para quitar una relacion bidireccional se debe abstraer eso que tienen en comun las dos clases (se debe cosificar) en otra clase aparte. Entre Compra y Venta se deben conocer, para eviarlo se crea la clase CompraVenta,\n\n#### Leyes de Demeter - No te acoples con quien no conoces\nSon un conjunto de leyes obtenidas desde un proyecto. En el cual se dictamenta que UNICAMENTE SE PUEDE COLABORAR CON:\n- this\n- Parametros\n- Atributos\n- Objetos Locales\n\nPor tanto, nunca se debe interactuar con un encadenamiento de mensajes obtenidas de enviar un mensaje a otro objeto. Es decir EVITAR EL ACOPLAMIENTO INDIRECTO A TODA COSTA.\n\n\n#### Codigo Sucio por Libreria Incompleta - No te acoples a librerias\nCrea una clase para englobar una libreria, no hagas que la libreria interaccione con todos y despues, cuando quieras cambiar la libreria, se tenga que hacer una cirugia a escopetazos.\n\nENCAPSULA LA LIBRERIA EN UNA SOLA CLASE. PATRON FACHADA.\n\nLa libreria da las primitivas (en su interfaz) y es nuestro deber encapsular para reducir el acoplamiento que tenemos a ella.\n\n### Tama√±o\n#### Codigo Sucio por Listas de Parametros Largas\nEs una variacion del smell code de Grupos de Datos, cuando, en vez de utilizar una clase cohesivas que encapsule operaciones y datos se utilizan un grupo de valores primitivos, lo que incrementa mucho la complejidad de los metodos o clases.\n\nEn base a las heuristicas lo maximo serian 2 -3 parametros por metodo.\n\nPara tener cero parametros se necesitan de establecer buenas relaciones entre las clases. Muchas veces no hay necesidad de tenerlas\n\n#### Codigo Sucio por Metodos Largos\nTodos los metodos deben ser peque√±os 10 a 15 lineas\n\n#### Codigo Sucio por Clases Grandes\nSiguiendo las metricas tambien deben ser peque√±as 200 a 500 lineas\n## Patron de Indireccion\nLos niveles de abstraccion ayudan a reducir el acoplamiento de la cantidad de elementos con los que se trabaja.\n\nPara agregar un nivel de abstraccion en codigo basta con agregar una clase y posteriormente utilizar su interfaz publica para ejecutar las operaciones de los elementos que engloba. \n\nNo necesariamente se puede agregar una, se pueden agregar varias e incrementar la Cohesion, dividir un problema y dividir responsabilidades.\n\n**Todo se resuelve con mas clases, que reduzcan las responsabilidades y reduzcan el acoplamiento**\n\n## Patron de Invencion Pura\nInventate todas las clases que te hagan falta, mientras mantengan un conjunto altamente cohesivo de operaciones aunque no representen a un objeto del modelo del dominio en particular. Todo esto mientras no hagas YAGNI, NO TE INVENTES PROBLEMAS, creala donde veas que hay mucha\n\n## Patron de Vista Separada\nNunca hagas un modulo que interactue con el usuario, comunicacion o que sea cualquier interfaz para cualquier canal externo. SEPARA LAS COMUNICACIONES, LA PANTALLA Y TUS MODELOS.\n\nTodas las clases con System.out y todo deben ir en otra clase. Para trabajar con ficheros otra clase, para trabajar con GUI otra clase.\n\n**Una vista es todo aquello que recibe, lee y valida la informacion que proviene de un sitio externo al software**. \n\n## Patron Controlador\n**Un controlador maneja el evento proveniente de una vista, se encarga de mantener la logica**\n\n\nPor tanto en resumen, tenemos tres capas.\n- Modelos\n- Controladores\n- Vistas\n\nLas vistas son con lo que el usuario final interactua, este unicamente se encarga de recibir datos que pueden provenir desde multiples fuentes (una API, un archivo, un usuario u otro).\n\nLos controladores son aquellos que se encargan de procesar un pedido SIN IMPORTAR EL MEDIO DEL QUE PROVENGA, debido a que las vistas ya prepararon todo para que llegue como me tiene que llegar por el contrato.\n\nLos modelos se encargan de ejecutar y administrar las peticiones ya evaluadas, son los datos sensibles y no pueden estar siendo modificadas asi sin mas.\n\n## Patron Creador\nDebido a que, la solucion a los problemas de dise√±o (para lograr una buena cohesion con bajo acoplamiento y bajo tama√±o) es agregar clases las cuales pueden venir del modelo o ser inventadas (Como las vistas y los controladres), el patron creador viene para resolver toda esa conglomeracion de creacion de objetos y clases que pueden hacer que un sistema se vuelva dificil de manejar.\n\n- Factorias\n- Builder\n\nEn el caso de una aplicacion de Spring.\n- Lo comunmente llamado \"Controller\" (o donde recide toda la llegada de comunicacion mediante endpoints HTTP) es la Vista.\n- Lo comunmente llamado \"Service\" (o donde recide toda la logica de negocio fuerte) es el controlador.\n\nLa capa Controller solo se encarga de recibir peticiones y remover todo lo relacionado con HTTP, al servicio nada mas le llegan los datos y el lo procesa, ni siquiera sabe que llegan por HTTP, bien podria ser cambiado por una app de Swing y no hay ningun problema.\n\n- Vista, una por cada protocolo de comunicacion, interfaz o forma de recibir datos\n- Controlador, uno por cada caso de uso que se necesitan\n- Modelo, inspirados del modelo del dominio, datos duros\n\nInyeccion de Dependencias = Relacion por Asociacion\n\n**TODOS LOS PROBLEMAS DE DISE√ëO, DESACOPLAMIENTO, COHESION SE ARREGLAN AGREGANDO MAS CLASES.**","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Dise%C3%B1o-en-Codigo":{"title":"Dise√±o en Codigo","content":"El Dise√±o en el Codigo es la aplicacion mas basica del dise√±o en la [[notes/Programacion|programacion]] y contempla dos aspectos generales:\n- Modelo del Dominio. Respetar la terminologia y las funciones que se esperan obtener, por tanto, debe estar fuertemente inspirado en el.\n- Legibilidad del Codigo. Asegurar que el codigo sea legible utilizando buenos nombres de variables, funciones, KISS, DRY, YAGNI, etc.\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Dise%C3%B1o-orientado-a-Objetos":{"title":"Dise√±o orientado a Objetos","content":"Nivel siguiente al [Dise√±o Modular](notes/Dise%C3%B1o%20Modular.md), ahora ya no solo son piezas bien inspiradas, legibles, poco acopladas y cohesivas, si no que se aprovechan los mecanismos de Polimorfismo y Herencia + Composicion para hacer jerarquias altamente reusables y flexibles respetando principios de la programacion orientada a objetos.\n\nContempla:\n- Principio Open/Closed\n- Principio de Sustitucion de Liskov\n- Principio de Separacion de Interfaces\n- Principio de Inversion de Dependencias\n\nLa herencia tiene la misma reusabilidad que una composicion.\n\nLa herencia te acopla fuertemente a la interfaz de tu padre y a sus atributos. Solo se pueden agregar atributos y metodos y redefinir metodos, nada mas.\n\nEl polimorfismo es una relajacion del sistema de tipos que nos permite interactuar con una clase y con todos sus derivados no abstractos apegandonos de forma fiel a su interfaz publica.\n\n## Teoria de Lenguajes\nEnlace estatico, tiempo de compilacion. toda aquella caracteristica que se pueda resolver mirando el codigo, viendolo. Aqui entran las checked exceptions.\n\nEnlace dinamico, tiempo de ejecucion. lo contrario, esta caracteristica no se puede saber quien es hasta que se esta ejecutando la sentencia. Aqui entra el polimorfismo. Aqui entran las unchecked exceptions\n\nExpresion combinacion de operadores y operandos que se evaluan devolviendo un unico valor.\n\nSin polimorfismo es un enlace estatico puesto que en todo momento sabemos el tipo del valor de retorno. Lo unico que podemos utilizar es sobrecarga.\n\nCon polimorfismo tenemos un enlace dinamico puesto qu eno sabemos el tipo de valor real del retorno hasta que se ejecuta. Cada uno tendra comportamientos diferentes ya sea el original implantado o el de cualquiera de sus descendientes.\n\n### Operaciones Polimorficas\nLo anterior mismo puede mandar con comunicacion entre clases con mensajes. Mientras una expresion me prometa que me devuelve A yo no se si me va a devolver A realmente o alguno de sus subclases.\n\n- Prohibido el instanceof\n- Prohibido atributos publicos\n- Prohibidas las variables globales\n\nDEBIDO A QUE ESTO NOS ACOPLA A LAS PARTICULARIDADES DETRAS DE UNA JERARQUIA POLIMORFICA.\n \n## Principio Open/Closed\nEs el Objetivo del Dise√±o Orientado a Objetos.\n\nTodas las partes del paradigma orientaod a objetos deberian estar **abiertas a la extension, cerradas a la modificacion.**\n\nEs decir, debemos lograr tal dise√±o que no tengamos que modificar nada para arreglar algo, unicamente para extender su funcionalidad.\n\nEsto se hace teniendo dos partes\n1. Una clase fija, que sirve como base y que es polimorfica\n2. Multiples implementaciones dinamicas que pueden colgar de una referencia a una clase fija polimorfica\n\nPor tanto, la clase fija SIEMPRE sera abstracta y el infinito numero de posibilidades extensibles son las clases concretas dinamicas.\n\nEl controlador se encarga del dialogo entre el actor y el sistema. Existe uno por cada caso de uso.\n\n## Reusabilidad\nPresente en la Herencia, Composicion y Parametrizacion. La reusabilidad esta permitida y puede ser aprovechada mediante estos tres mecanismos\n\n### Herencia vs Parametrizacion\nLa parametrizacion es la programacion generica, en general se usa cuando se busca tener exactamente las mismas operaciones en una clase pero hablando de diferentes cosas. \n\nPor ejemplo una ColaDePersonas tiene las mismas operaciones que una ColaDeHormigas. Si quisieramos usar Jerarquia aqui tendriamos que hacer que la clase base utilizara Object, y todos los objetos que entraran serian objects y cuando necesitaramos obtener uno se tendria que hacer downcast preguntando el tipo y es un caos.\n\nPor otro lado, con la programacion parametrizada no tenemos esa necesidad, podemos tener una pila de T, cualquier objeto y las operaciones ya sabrian por si mismas de que tipo de objeto se esta tratando.\n\nLa diferencia entre usar genericos y Object es que con genericos te ahorras todos los cast y poder guardar cosas que no se podrian.\n\nEsta es un aspecto en que la herencia no sirve para hacer reusabilidad\n\n### Herencia vs Composicion\nEn la Composicion la reusabilidad es programatica, debido a que debo enviar mensajes a mis colaboradores y relegar las operaciones para que ellos la satisfascan. En este caso, la clase que mantiene las partes (el todo) tiene la capacidad de decidir que operaciones estan disponibles y cuale sno.\n- Enlace Dinamico\n- No existe acoplamiento alguno con la clase parte, solo le delego responsabilidades\n\nEn la Herencia la reusabilidad es automatica, debido a que teniendo operaciones en la clase padre no necesito redefinir los metodos. El lenguaje lo hace por ti. Caso contrario a la Composicion, la herencia no tiene forma de ocultar metodos heredados por el padre, los tiene que ofrecer si o si.\n- Enlace estatico\n- Acoplamiento a los atributos de la clase base por modificador 'protected'.\n\nLa herencia con polimorfismo es el mecanismo mas fuerte para utilizar en las partes del proyecto que son mas propensas a ser extendidas\n\n### Ley Flexible y Estricta de Demeter\n#### Ley Estricta de Demeter\n- Ni se te ocurra hablar con los atributos de la clase base, esto para evitar acoplamiento a la clase base.\n- Si es la parte critica de la aplicacion, la que mas tiende a los cambios, esta es la indicada\n#### Ley flexible de Demeter\n- Si se te permite hablar con los atributos de la clase base. Si es una herencia peque√±a esta es la indicada\n\n### Patron Metodo Plantilla\nTemplate Method. Es utilizado en una Jerarquia de herencia.\n\nSe utiliza cuando dos clases derivadas tienen partes similares dentro del algoritmo de un metodo cambiando solo una peque√±a parte debido a los detalles de su especializacion.\n\nLo que se hace es mover el codigo comun de ese metodo a la clase padre y definir un metodo abstracto para que los detalles que cambian sean redefinidos por las clases hijas.\n\n## Flexibilidad\n### Clases Abstractas e Interfaces\nLa interfaz es un contrato que existe entre una clase derivada y la interfaz, declara que, toda clase que la implemente como minimo debe implementar de forma concreta un algoritmo para los metodos si no quiere ser abstracta.\n\nUna interfaz es una clase abstracta pura la cual no fomenta la reusabilidad porque no tiene atributos ni metodos que debe transmitir, solo cabeceras de metodos (es decir, solo la interfaz).\n\nPor otro lado, las interfaces aportan mucha flexibilidad con respecto al cambio, porque, mientras que una clase concreta implemente esos metodos a nadie le interesa que tecnologias utiliza o como lo este haciendo.\n\n### Principio Separacion de Interfaces\nEs un principio que dicta que una clase no debe conocer nada mas alla de lo que le compete con otra clase con la que colabora.\n\nEs decir, solo deben de tener la minima cantidad de metodos de modo que puedan comunicarse y hablar entre ellos.\n\nImaginando que un Alumno interactua con un Profesor mediante su interfaz Profesor y no conoce sus otras interfaces de Padre, Hermano, Hijo que forman parte de el y con la que otros interactuan, el solo conoce la de Profesor.\n\nOtro ejemplo con una Secretaria se veria asi:\n\n![[files/SegregacionInterfaces.png]]\n\nEs como agregar otro nivel de abstraccion para que un cliente de una clase solo conozca las operaciones minimas.\n\n### Principio de Inversion de Dependencias\nSurge como resultado de cumplir el principio Open/Closed y la Sustitucion de Barbara Liskov.\n\nDicta que, si se busca flexibilidad y extensibilidad ni los modulos de alto nivel ni los de bajo nivel deb eben de trabajar con interfaces intermedias para que se pueda extender a futuro y incremente la flexibilidad de mis colaboradores.\n\n![[files/PrincipioInversionDeDependencias.png]]\n\n\n### Inversion de Control\nEs cuando. en vez de que llame a las funciones de una libreria, la libreria me llame a mi.\n\nNo me llames, ya te llamaremos.\n\nEl Template Pattern consigue la Inversion de Control debido a que el control se encuentra en la clase abstracta que cuenta con los metodos definidos en las clases concretas. Las clases concretas desconocen cuando su codigo sera llamado.\n\nOtro ejemplo es la inyeccion de dependencias\n\n### Inyeccion de Dependencias\nEn vez de elegir de forma clara dentro de la clase que colaborador tienes, este te llega como parametro a un constructor o un setter.\n\nEn vez de acoplarte como clase concreta, te acoplas unicamente con una clase abstracta y esperas a que te pasen una clase concreta desde fuera, unicamente apegandote a los metodos de la clase abstracta.\n\nEn vez de composicion, se basa en una asociacion.\n\n### Principio de Sustitucion de Liskov\nEs un principio que sirve para evaluar una Jerarquia de Clasificacion (herencia) y ver si es valido utilizarla en conjunto con sus colaboradores por un cliente.\n\nPara que la Jerarquia sea dada como valida, un cliente deberia de poder utilizar una clase abstracta y cualquiera de sus derivadas, utilizar sus operaciones publicas y que todas ellas ejecuten su funcion.\n\nComo sabemos que ejecuto su funcion correctamente?.\n- Lo que **si esta permitido** esque la precondicion de las derivadas sea mas flexible que la precondicion de la base.\n- Lo que **no esta permitido** esquie la postcondicion de la derivada sea mas flexible que la precondicion de la base\n\nSi una clase derivada tontita se le ocurre violar las condiciones de arriba es mejor ni concebirla como funcional.\n\nEs como el pinguino y el ave, no puede ser una jerarquia de clasificacion debido a que el pinguino limita las operaciones de ave porque no puede volar.\n\nComo yo lo entiendo tambien indica que las jerarquias de herencia por limitacion y herencia por exclusion rompen este principio.\n\n### Herencia vs Delegacion\nComo sabemos, la herencia permite transmitir metodos y datos de una clase base a unas clases derivadas. Asi mismo, si es una clase abstracta permite tener implementaciones entre meditas y utilizar el Template Pattern.\n\nSin embargo, todo esto tambien es posible hacer mediante una Composicion utilizando el mecanismo de Delegacion.\n\nCon el mecanismo de Delegacion, una clase todo puede utilizar el codigo de su parte para brindar un servicio, esta clase todo tiene un nivel de abstraccion debido a que los clientes que interactuan con el no saben ni la existencia de sus partes.\n\nMediante la delegacion tambien podemos aplicar el Template Pattern, teniendo en la clase parte una llamada al metodo de la clase Todo.\n\nEsto forma un ciclo, debido a que la clase todo conoce a la parte y la parte al todo para llevar a cabo el Template Pattern.\n\nLa forma de romperlo es meter una interfaz, de modo que la Parte puede utilizar a cualquiera que implemente la interfaz con el metodo que se encuentra dentro del Template y no necesita conocer de forma directa a ningun Todo.\n\n### Tecnica de Doble Despacho\nEsta tecnica se utiliza cuando un objeto A tiene que responder de una u otra forma dependiendo del tipo de objeto que es B dentro de una Jerarquia Polimorfica.\n\nLa mala solucion a este problema seria darle la responsabilidad al objeto A de checar el tipo del objeto polimorfico con el operador 'instanceof' o similar.\n\nLa solucion correcta recaeria en dejar que la responsabilidad recayera en cada uno de los objetos B polimorficos, de modo que ellos le pidan a el Objeto A ejecutar el metodo con ellos, pasandose a si mismos como parametro\n\n```Java\nabstract class Person {  \n    void greet() {  \n        System.out.println(\"Hi!\");  \n    }  \n  \n    abstract void accept(Global global);   \n}  \n  \nclass Men extends Person {  \n    @Override  \n    void accept(Global global) {  \n        global.visit(this);  \n    }  \n}  \n  \nclass Women extends Person {  \n    @Override  \n    void accept(Global global) {  \n        global.visit(this);  \n    }  \n}  \n  \nclass Global {  \n    void greet(Person person) {  \n        person.greet();  \n        person.accept(this);  \n    }  \n  \n    void visit(Men men) {  \n        System.out.println(\"I accept a men\");  \n    }  \n  \n    void visit(Women women) {  \n        System.out.println(\"I accept a women\");  \n    }  \n}\n```\n\nAhora para probarlo podriamos utilizar cualquier objeto polimorfico sin problemas\n\n```Java\npublic class Main {  \n    public static void main(String[] args) {  \n        Global global = new Global();  \n        Person men = new Men();  \n          \n        global.greet(men);  \n    }  \n}\n```\n\nUtilizar instanceof rompe el principio openclosed.\n\nAnte cualquier mala herencia se debe de considerar la composicion.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Distraccion":{"title":"Distraccion","content":"Es el fenomeno que ocurre cuando dejas que tu [Awareness](notes/Awareness.md) vaya a un lado de tu [Mente](notes/Mente.md) sin decidir tu de forma consciente a donde fue. \n\n- Su contrario es el [Focus](notes/Focus.md).\n- Hoy en dia somos muchisimo mas susceptibles a la distraccion, debido a que tenemos acceso a redes sociales (el ambiente) que permiten cambiar nuestro [Awareness](notes/Awareness.md) a donde sea. \n- Ser muy susceptible a la distraccion es una habilidad en si, si la practicamos por mucho tiempo, podemos ser susceptibles a enfermedades como el ADHD.\n\n*Idea inspirada de: [The Power of Unwavering Focus - Podcast](reference/The%20Power%20of%20Unwavering%20Focus%20-%20Podcast.md)*","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Docker":{"title":"Docker","content":"Es una tecnologia que te permite crear contenedores (variacion de maquinas virtuales). Propone contenedores muy ligeros que sirven para poder guardar un conjunto de tecnologias, configuracion y todo lo que se necesario para que el funcionamiento de un Software\n- Cada contenedor puede heredar de una imagen base que ya tiene instalada todas las dependencias necesarias para que los microservicios corran\n\nPropone el concepto de Imagen de Docker que representa una descripcion para como se debe de instanciar un contenedor a partir de ella (Es como la OOP por Prototitpos).\n\n## Comandos Utiles\n- docker pull \\\u003cimagen\\\u003e\n- docker images\n- docker run \\\u003ccontainerId\\\u003e\n- docker push. Subir una imagen a la nube\n- docker ps. Ver las instancias de contenedores corriendo\n- docket stop \\\u003ccontainerId\\\u003e\n- docker run -it \\\u003ccontainerId\\\u003e /bin/bash. Te deja entrar a la linea de comandos de la maquina\n- docker inspect \\\u003ccontainerId\\\u003e. Te permite ver informacion detallada del contenedor\n\nCon un Dockerfile te puedes crear una imagen docker desde el ciclo de vida directo de Maven.\n\n## Referencias\n[Curso de microservicios con Java y Spring Boot](reference/@%20Curso%20de%20microservicios%20con%20Java%20y%20Spring%20Boot.md)\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Dominio-de-Negocio":{"title":"Dominio de Negocio","content":"Comprende todos esas actividades que realiza una empresa, organizacion, etc como objetivo para satisfacer necesidades (y usualmente, generar capital).\n\nCada empresa tiene un diferente dominio de negocio, y entenderlo es de vital importancia para poder aplicar bien la [Ingenieria del Software](notes/Ingenieria%20del%20Software.md).\n\nEl dominio no solo comprende las necesidades, si no tambien, la jerga con la cual se habla en el negocio en cuestion, por tanto, entenderla es de vital importancia para comunicar un equipo de desarrollo con los [Stakeholders](notes/Stakeholders.md), y asi poder obtener los [Requisitos](notes/Requisitos.md) del software.\n\nUna formalizacion utilizada en el [Desarrollo de Software](notes/Desarrollo%20de%20Software.md) para poder resolver un problema concreto es la creacion de un [Modelo del Dominio](notes/Modelo%20del%20Dominio.md) utilizando alguna estrategia en particular.\n\nInspirado de: [resenia](es/reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/resenia.md)","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Enhanced-Object-Literals-en-JavaScript":{"title":"Enhanced Object Literals en JavaScript","content":"Es una mejora implementada en ES6 a las declaraciones de objetos literales.\n\n## Bindear un Objeto dentro de Otro\nEn caso de querer agregar un objeto externo a otro objeto, la sintaxis clasica seria la siguiente\n```Javascript\n\t// obj\n\tobj2: obj2,\n\t// ...\n```\n\nCon la nueva sintaxis, podemos hacer lo mismo de forma mas simplificada\n\n```Javascript\n\t// obj\n\tobj2,\n\t// ...\n```\n\nY listo!\n\n## Escritura de metodos\nAntes para agregar un metodo a un objeto teniamos que escribirlo como una propiedad\n\n```JavaScript\nconst obj = {\n\tmetodo1: function() {\n\t\t//,,,\n\t}\n}\n```\n\nPues con la nueva sintaxis ya no, ahora solo es necesario colocar el nombre, sin la keyword function y sin los dos puntos.\n\n```JavaScript\nconst obj = {\n\tmetodo1() {\n\t\t//...\n\t}\n}\n```\n\n## Computar nombres\nAdemas ahora no necesitamos poner explicitamente el nombre de las propiedades, estas pueden ser computadas por expresiones!\n\n```JavaScript\nconst obj = {\n\t[expresion]: valor,\n\t[`day-${23+3}`]: valor,\n}\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Ensayo":{"title":"Ensayo","content":"## Que es\nUn ensayo es una pieza de texto escrita como intento para explorar un tema o responder una pregunta.\n\n## Para que\n1. Te ayuda a explorar, formular y organizar un conjunto de ideas coherentes, informadas y estructuradas sobre un tema\n2. Te ayuda a expandir tu canal cognitivo pudiendo organizar mas de una idea o multiples a la vez una vez estan escritas\n3. Te ayuda a evolucionar tu pensamiento evaluando y descartando ideas erroneas que tengas\n4. Te ayudan a desarrollar tu forma de pensar, haciendo que comunicarte y estructurar tus ideas sea mucho mas facil de modo que puedas defenderte y avanzar en la vida para cualquier aspecto.","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Estado":{"title":"Estado","content":"Se refiere a los valores que tiene el conjunto de datos que encontramos en un objeto en determinado momento. \n\nRegularmente el estado lo podemos comprobar mediante la interfaz publica especificada en la clase del objeto al que queremos consultar, imaginando que en algun lugar existe la clase fecha podriamos hacer:\n\n```Java\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tFecha fecha = new Fecha(1, 1, 2002);\n\t\t// Consulta de Estado\n\t\tfecha.imprimirFecha();\n\t}\n}\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Estrategias-de-Clasificacion-a-partir-del-Modelo-del-Dominio-Encontrar-clases":{"title":"Estrategias de Clasificacion a partir del Modelo del Dominio (Encontrar clases)","content":"Existen muchas estrategias para encontrar las clases a partir del [Modelo del Dominio](notes/Modelo%20del%20Dominio.md), veamos las cinco mas relevantes y sus aportaciones:\n- Descripcion Informal\n- Analisis Clasico\n- Analisis del Dominio\n- Analisis del Comportamiento\n\t- Patron Experto en la Informacion\n- Analisis de Casos de Uso\n\nDe las primeras tres se obtienen las clases y los datos (preferentemente) de palabras directas del experto y de la cuarta se obtiene un flujo de mensajes que se deben mandar las clases para satisfacer las operaciones que necesitan entre ellos y lograr el objetivo del software.\n## Descripcion Informal\nConsiste en tomar los requisitos en un documento escrito (regularmente informal) del cual se substraen los sustantivos y los verbos. Una vez extraido se dice que *todo sustantivo puede ser una clase y que todo verbo puede ser un metodo*.\n\nProblemas del enfoque: \n- **Ambiguedad del lenguaje natural**, debido a que solemos usar sinonimos, metaforas, etc. diferentes personas pueden interpretar cosas diferentes del mismo texto.\n- **Cosificacion** del lenguaje (Todo verbo puede ser un sustantivo y viceversa). La accion *correr* no solo puede ser un metodo de una persona, cosificado puede ser un *corredor*. Y la clase *Deportista* puede ser transformada a *hacer deporte*.\n\nRazones para entenderlo:\n- Ayuda a identificar los nombres y acciones clave que **deben terminar dentro del codigo si o si**.\n- Ayuda a **identificar el vocabulario comun entre desarrolladores y cliente** mediante el uso de las palabras que vienen del documento de requisitos.\n## Analisis Clasico\nSe formalizan las principales fuentes principales de clases y objetos:\n- Tangibles \n- Intangibles\n\nY tienen dos fuentes principales estos pueden venir tanto del problema como de la solucion. Por tanto, estas listas deben ser consultadas para asegurar que no se te quede ninguna palabra clave de los requisitos.\n## Analisis del Dominio\nSe busca traer todos los objetos, acciones y relaciones **directamente de la boca de un experto del dominio**, que sea el el que diga las cosas que hay en el sistema.\n\nCaracteristica de un Experto:\n- No suele desarrollar Software\n- Debe estar fuertemente implicado con el problema, como un usuario final.\n- Conoce el vocabulario que se utiliza en el entorno\n## Analisis del Comportamiento\nUn comportamiento surge de la cantidad de operaciones que ofrece una parte del sistema con el conocimiento que tiene dentro de si (los datos).\n\nCualquier parte del Software tiene un comportamiento. Un paquete, un subsistema, una clase, una funcion. \n\nPor tanto, debemos prestar suma atencion al modelo del dominio, debido a que este es el que genera no solo clases si no operaciones que ocurren dentro del sistema para lograr su objetivo.\n\n*Un objeto es conformado por conocimiento y operaciones que puede realizar. Su responsabilidad recae en la cantidad de contratos que satisface mediante sus operaciones*\n\nLo anterior no solo se aplica a un objeto, un paquete tambien tiene un conocimiento y una serie de operaciones que debe cumplir. Tambien un subsistema, tiene un conocimiento y una serie de operaciones a cumplir. Eso es el comportamiento, es mas abstracto y se aplica a distintas partes del sistema\n\n### Patron Experto en la Informacion\nEs una variacion y replanteamiento de las ideas definidas ya en el Analisis del Comportamiento. En este caso, se dice que un Objeto cuenta con dos responsabilidades principales.\n- Responsabilidad de Conocer. Conocer solo los datos que le interesan\n- Responsabilidad de Hacer. Se dice que un objeto tiene obligaciones que son dadas por los datos que guarda. Sus obligaciones es ofrecer una interfaz publica que satisfasca las operaciones necesarias que otros objetos tienen que hacer con ese dato.\n\nReafirma que se tiene que respetar el [Principio General de Asignacion de Responsabilidades](notes/Principio%20General%20de%20Asignacion%20de%20Responsabilidades.md)\n\n## Analisis de Casos de Uso","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Expresion-de-Programacion":{"title":"Expresion de Programacion","content":"Una expresion es un componente basico de todo lenguaje de programacion. Es un conjunto de caracteres que puede ser evaluado por el compilador para obtener un valor concreto.\n\nUna expresion suele devolver un booleano. Tambien hay excepciones como el operador ternario el cual puede devolver dos de forma alterna.\n\nEstas son utilizadas dentro del if, dentro del while, en el for hay tres expresiones, etc, etc.\n\n```Java\nif (expresion) \n\nboolean valor = expresion ? expr1 : expr2;\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Externacionalizacion":{"title":"Externacionalizacion","content":"La externalizacionc es un proceso en el cual se pasan las propiedades que son ajenas al codigo a archivos de texto plano que pueden ser importados hacia el codigo y poder ser utilizados de forma dinamica\n\nEn Spring la externalizacion se hace a archivos de texto plano con terminacion .properties (app.properties, config.properties, etc).\n\nPara acceder a ellos se utiliza SpEL y regularmente se crean Beans a partir de estas propiedades en texto plano. \n\n## Referencias\n[Curso de microservicios con Java y Spring Boot](reference/@%20Curso%20de%20microservicios%20con%20Java%20y%20Spring%20Boot.md)","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Focus":{"title":"Focus","content":"### Definicion\nEl Focus es una habilidad que consiste en llevar nuestro [Awareness](notes/Awareness.md) a las partes de la [Mente](notes/Mente.md) que nosotros queremos a voluntad y de forma consciente.\n\nLo contrario al Focus es la [Distraccion](notes/Distraccion.md).\n\n- Para desarrollarlo se necesita de una motivacion.\n- Consistencia en el ejercicio\n### Motivaciones para desarrollarla\n- Libertad. Debido a que eliges de forma precisa las cosas a las que les prestras atencion.\n- Facilidad de trabajo. Te permite trabajar de forma simple y fluida sin tener distracciones que te quiten el tiempo.\n- Aprovechar la vida. Aprovechas la corta vida que tenemos dandole atencion a lo que verdaderamente importa.\n- Disfrutar. Puedes disfrutar mucho mas de las experiencias que te rodean.\n\n### Como desarrollarla\n- Se consciente en todo momento de a donde estas dirigiendo tu [Awareness](notes/Awareness.md).\n- Si se va a otra parte de tu [Mente](notes/Mente.md), traela de vuelta a la fuerza.\n- Debido a que es una habilidad, mientras mas practiques, mas facil se volvera estar concentrado.\n\n### Consecuencias de no hacerlo\nA pesar de ser una habilidad tan importante, nunca se nos ense√±a como hacerla, en el Podcast [The Power of Unwavering Focus - Podcast](reference/The%20Power%20of%20Unwavering%20Focus%20-%20Podcast.md) se habla sobre las enfermedades de atencion como ADHD y ADD que muchas veces son diagnosticadas cuando a la gente ni siquiera se le ha ense√±ado a concentrarse.\n\nAlgunas de las consecuencias de no desarrollar esta habilidad son:\n- No ser libre debido a que dejas que el ambiente vaya manejando tu [Awareness](notes/Awareness.md) a su placer.\n- Desarrollas la habilidad para ser suceptible a la [Distraccion](notes/Distraccion.md) mucho mas facilmente.\n- Disminuir tu productividad y por tanto, efectividad para hacer un trabajo.\n\n*Idea inspirada de: [The Power of Unwavering Focus - Podcast](reference/The%20Power%20of%20Unwavering%20Focus%20-%20Podcast.md)*\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/For-of-Loop-en-JavaScript":{"title":"For of Loop en JavaScript","content":"Es un nuevo tipo de for que fue agregado en ES6 como otra forma de iterar sobre estructuras de datos con una sintaxis mas simple sin preocuparte por contadores o condiciones.\n\nEste loop simplemente iterara sobre la estructura elemento por elemento. (Es bastante similar al foreach loop de Java).\n\n```JavaScript\nfor (const element of elements) {\n\tconsole.log(element); // Para cada elemento de elemenetos imprimelo\n}\n```\n\nEste loop estaba concebido para no brindar el indice de los elementos, sin embargo, existe una forma de obtenerlos\n\n```JavaScript\nfor (const entry of elements.entries()) {\n\tconsole.log(entry);\n}\n```\n\nLa funcion .entries() es un array de arrays en el que cada uno contiene el indice y su elemento particular.\n\nEn este caso, cada entry sera un array que contiene el indice y su elemento.\n\n![[files/ForOfConEntriesJS.png]]\n\nY ahora podemos utilizar la poscion 0 para referirse al indice y la posicion 1 para referirse al elemento.\n\nO mejor aun... podriamos utilizar el mecanismo de [[notes/Destructuring en JavaScript]] para darle al indice y al elemento un nombre!\n\n```JavaScript\nfor(const [index, element] of elements.entries()) {\n\tconsole.log(`${index}: ${element}`);\n}\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Funciones-de-Alto-Orden":{"title":"Funciones de Alto Orden","content":"Una funcion de alto orden es toda aquella que recibe como parametro otra funcion, que retorna una funcion o ambas,\n\nComo es logico, son un tipo de funciones generadas gracias a la existencia de las [[notes/Funciones de Primera Clase]].\n\n## Funcion que Recibe otra como Parametro\n```JavaScript\nconst oneWordToLower(str) {\n\tconst [first, ...others] = str.split(' ');\n\tfirst = first.toLowerCase();\n\treturn [first, ...others].join(' ');\n}\n\nconst oneWordToUpper(str) {\n\tconst [first, ...others] = str.split(' ');\n\tfirst = first.toUpperCase();\n\treturn [first, ...others].join(' ');\n}\n\n// recibe un string y una callback function para ejecutar la transformacion! \nconst transformer(str, fn) {\n\tconst finalStrTransformed = fn(str);\n}\n\ntransformer('Hola me llamo Jaime', oneWordToLower);\n```\n\nOtro ejemplo en JS seria la funcion .addEventListener para la [[notes/Manipulacion del DOM]]\n\n```JavaScript\nconst simple = function() {\n\tconsole.log('hi!');\n}\n\n// Callback function recibida llamada simple!\ndocument.querySelector('button').addEventListener('click', simple)\n```\n\n**La sintaxis de un callback function es escribir su nombre como parametro pero sin parentesis para que sea pasada y despues llamada dentro de la funcion original**.\n\n## Funcion que retorna otra\n```JavaScript\nconst greet = function(greeting) {\n\treturn function (name) {\n\t\tconsole.log(`$[greeting} ${name}`)\n\t}\n}\n\ngreet('Hola')('Jaime');\n```\n\nEstos mecanismo es especialmente importante para la programacion funcional, debido a que permite encadenar funciones una tras otra\n\nEsto tambien se puede hacer con arrow functions\n\n```JavaScript\nconst greet = (greeting) =\u003e (name) =\u003e console.log(`${greeting} ${name}`);\n\ngreet('Hola')('Jaime');\n```\n\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Funciones-de-Primera-Clase":{"title":"Funciones de Primera Clase","content":"Significa que las funciones son tratadas como simples valores, por tanto, pueden ser utilizadas como propiedades, retornadas desde otra funcion o recibidas como parametros desde otras funciones.\n\nUtilizarlas permite una gran interaccion entre funciones y su ejecucion resulta en un desencadenamiento de funciones.\n\nEste tipo de funciones se encuentran\n## Caracteristicas\n- Pueden ser guardadas en variables o atributos.\n- Pueden ser pasadas como argumentos a otras funciones.\n- Pueden ser retornadas desde otras funciones.\n\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Funciones-en-JavaScript":{"title":"Funciones en JavaScript","content":"Existen tres tipos de funciones principales en JavaScript:\n- Funciones Declaradas ^4c2966\n- Expresiones Funcionales\n- Funciones Flecha\n\nTodas estas funciones cuentan con dos caracteristicas principales:\n- nombre (que sirve para invocar, ejecutar o llamar la funcion)\n- parametros \n\n### Funcion Declarada\nEs un tipo de funcion declarada con el keyword ```function```, su caracteristica especial esque puede ser utilizada aun antes de ser declarada.\n\n```JavaScript\nnombreFuncion('Jaime');\n\nfunction nombreFuncion(parametro) {\n\tconsole.log(`hola! ${parametro}`);\n}\n```\n\n### Expresiones Funcionales\nUna expresion funcional es simplemente una funcion anonima, en JavaScript es guardada en una variable para tener una forma de invocarse.\n\nSu caracteristica esque necesitan ser definidas antes de ser utilizadas en el codigo\n\n```JavaScript\nconst nombreFuncion = function (parametro) {\n\tconsole.log(`hola! ${parametro}`);\n}\n\nnombreFuncion()\n```\n\n### Funciones Flecha\nDebido a la existencia de funciones anonimas,, se nos permite crear expresiones mas cortas (tipo lambdas en Java) que sirven para simplificar el codigo. En JavaScript son llamdas *arrow functions* y se utiliza del operador especial ```=\u003e```.\n\n```JavaScript\nconst nombreFuncion = parametro =\u003e console.log(`hola! ${parametro}`);\n```\n\nDetalles a tener en cuenta:\n- La keyword 'this' no se refiera al [[notes/JavaScript Execution Context]] de la arrow function si no al de su padre inmediato, el cual puede ser incluso el GEC.\n- No estara disponible el objeto de los argumentos de la funcion, solo del padre inmediato.","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Fundamentos-de-la-Programacion":{"title":"Fundamentos de la Programacion","content":"Los fundamentos de la [[notes/Programacion|programacion]] (En cualquier paradigma) son cuatro:\n- Abstraccion. Utilizar terminos, conceptos e ideas para representar un concepto de manera fundamental, ignorando lo superfluo.\n- Encapsulacion. Ocultar informacion innecesaria al exterior.\n- Modularidad. El uso de unidades separadas que mientras mejor sean estaran pocamente acopladas y seran altamente cohesivas.\n- Jerarquia. La creacion de una estructura bien definida que permita seguir el flujo de un programa.\n___","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Hoisting":{"title":"Hoisting","content":"Es un mecanismo de [[notes/JavaScript]] que sirve para manejar la creacion y flujo de las variables. Lo que hace esque **permite a algunas variables ser utilizadas antes de que sean declaradas**.\n\nComo sabemos, en JavaScript se lee de arriba a abajo instruccion por instruccion, el Hoisting permite acceder a variables que se encuentran hasta abajo por lineas que se encuentran por arriba de esta.\n\n## Funcionamiento\nEl codigo es escaneado por variables y para cada una se le crea un elemento que es agregado al *variable environment*.\n\n### Funciones Declaradas\nEste proceso es exactamente lo que ocurre con el primer tipo de funcion, las Funciones Declaradas ([[notes/Funciones en JavaScript]]).\n\n### Variables con var\nPor otro lado, este proceso tambien es aplicado a las variables que se declaran con *var*, sin embargo, al tratar de ser utilizadas antes de ser asignadas por la linea que deberia se le da el valor de 'undefined'. Este es una de las razones principales por la cual muchos bugs son introducidos a los programas.\n\n### Variables con let/const\n\nFinalmente, las variables declaradas con *let* y *const* no tienen hoisting de manera efectiva, si tratan de ser utilizadas ocurrira un error *Uninitialized*, es debido a que se encuentran en una zona muerta temporal hasta que llegan a la sentencia donde se les asigna su valor real.\n\n### Expresiones Funcionales\nLa expresiones funcionales (o arrow functions) dependen del tipo de variable que se les asigna, let/const o var.\n\n![[files/Hoisting.png]]","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/IIFE-Expresiones-Funcionales-Inmediatamente-Invokadas-en-JavaScript":{"title":"IIFE (Expresiones Funcionales Inmediatamente Invokadas) en JavaScript","content":"Permite invocar una funcion anonima inmediatamente que se carga la pagina, de modo que no requiere de invocacion ni de ningun otro mecanismo.\n\nEs utilizada invocando una Expresion Funcional directamente despues de ser declarada\n\n```JavaScript\n(function () {\n\tconsole.log(\"Starting...\");\n})();\n```\n\n1. La funcion anonima es cubierta con parentesis para convertirla en una funcion como si fuese ya asignada\n2. Es invocada directamente sin ningun argumento ().\n\nEsta funcion no podra volver a ser invocada en todo el script puesto que no tiene un nombre y se ejecutara inmediatamente que cargue la pagina.\n\nDe este modo podemos tener una inicializacion dentro de una funcion (la cual tiene su propio [[notes/Scope]]) y por tanto, sus variables y otras funciones no estan disponibles fuera de ella de modo que hace el codigo mas limpio.","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Ingenieria-del-Software":{"title":"Ingenieria del Software","content":"Es la implementacion de disciplinas y practicas de la ingenieria (Como *requierements engineering*) para mejorar el [Desarrollo de Software](notes/Desarrollo%20de%20Software.md).\n\nInspirado de: [resenia](es/reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/resenia.md)","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Intercambiar-la-Visibilidad-de-un-Elemento-usando-JavaScript":{"title":"Intercambiar la Visibilidad de un Elemento usando JavaScript","content":"Para saber como cambiar la visibilidad de un objeto en JavaScript primero debemos tener un poco de conocimiento sobre la [Manipulacion del DOM](notes/Manipulacion%20del%20DOM.md).\n\n## Propiedades de CSS\nComo sabemos, mediante la [Manipulacion del DOM](notes/Manipulacion%20del%20DOM.md) se pueden cambiar los estilos de cualquier bloque del documento HTML.\n\nExisten dos propiedades particulares que nos dejaran cambiar la visibilidad de los elementos:\n\n```CSS {title='Propiedad display'}\ndisplay: none;\ndisplay: block;\ndisplay: inline;\ndisplay: inline-block;\n```\n\n```CSS {title='Propiedad visibility'}\nvisibility: visible;\nvisibility: hidden;\n```\n\n## Aplicacion con JavaScript\nUna vez conocemos las propiedades necesarias para ocultar y mostrar un elemento, su aplicacion con JavaScript seria la siguiente:\n\n```JavaScript\ndocument.querySelector('.clase').style.PROPIEDAD = 'VALOR';\n```\n\nEn donde PROPIEDAD puede ser visibility o display y VALOR puede ser cualquiera de los valores respectivos para la propiedad.\n\nAqui hay un [codepen de demostracion](https://codepen.io/Jaimayal/pen/ZEoXxYB) que podria ser relevante.\n\n### Codigo \n**Ocultar**\n```JavaScript\ndocument.querySelector('.selector').style.visibility = 'hidden';\n```\n\n**Mostrar**\n```JavaScript\ndocument.querySelector('.selector').style.visibility = 'visible';\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Java-Bean-Validation":{"title":"Validacion de Datos en API REST","content":"Sirve para validar los datos que son insertados por un usuario, regularmente estos validadores se mantienen en el DTO y se manejan con anotaciones.\n- @Regex\n- @Positive\n- @Min\n- @Max\n- @Size\n- @NotNull\n- @NotBlank\n\nGracias a estas y otras se nos permite hacer validaciones a los datos de entrada de un usuario.\n\nLa mejor practica es construir los mensajes de los validadores mediante una externalizacion, es decir, en un archivo .properties.\n\nAdicionalmente, tambien se debe de crecar un POJO para poder enviar los errores a traves de JSON al cliente.\n\n### Externalizacion e Internacionalizacion\nLos mensajes de las constraints de validacion pueden (y deben) ser externalizados aun archivo .properties en resources. De esta forma, aseguramos que la API tenga consistencia atraves de archivos planos.\n\nAdemas, gracias a ellos podemos agregar internacionalizacion al API para que dependiendo del RequestParam ?lang=  se pueda recibir un mensaje externalizado.\n\n### Custom Validators\nAdicionalmente tambien existe la forma de crear tus propios validators por anotaciones.\n\nPara ello se necesitan dos clases\n- @Interface la anotacion que sirve para decorar los atributos.\n- un Validador que implementa ConstraintValidator\\\u003c@interface, K\\\u003e que contenga toda la logica.\n\n\n### Validacion por Grupos\nPermite validar ciertas anotaciones cosas solo si la entrada de validacion se hace por determinado grupo por ejemplo, en creacion se hace una validacion y en actualizacion se hace otra.\n\n- Para crear un grupo se crean interfaces con el nombre del grupo\n- Despues se especifica en las anotaciones mediante su propiedad 'groups' bajo que grupos (.class) tienen que ser validados\n- Se debe aplicar la validacion utilizando @Validated y especificar el grupo por el que se va a aplicar la validacion (.class)\n\nDebido al punto 3. ahora solo se van a aplicar todas las validaciones que esten marcadas con ese grupo","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/JavaScript":{"title":"JavaScript","content":"JavaScript es un lenguaje de programacion que integra muchas caracteristicas que lo hacen el lenguaje por excelencia de la web.\n\n- Alto nivel. No tienes que encargarte del manejo de memoria de forma manual\n- Multiparadigma. Puedes escribir codigo orientado a objetos, procedimientos o funcional.\n- Orientado a Objetos (Prototipos). Mediante prototipos (creando un objeto inicial y despues todos son copias de el).\n- Funcional (funciones de primera clase). Funciones que pueden ser pasadas como parametros, devueltas y ejecutadas.\n- Debilmente tipado (dinamico). El tipo de una variable es inferido por el JIT.\n- Un solo hilo. Trabaja sobre un unico hilo principal\n- Garbage Collected. El recolector de basura se encarga de limpiar la memoria.\n- Concurrencia por eventos. Ejecuta tareas en segundo plano y las devuelve al hilo principal despues\n- Interpretado (JIT). No es traducido a codigo maquina hasta que es ejecutado.\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/JavaScript-Engine":{"title":"JavaScript Engine y Runtime","content":"JS Engine. El programa principal de un solo hilo que convierte el codigo de JavaScript, en un ejecutable de optimizacion constante.\n\nCada JS Engine esta compuesto por\n- CallStack -\u003e Execution Context\n- Heap -\u003e Memoria, donde los objetos son guardados\n\nTodos los JS Engine modernos utilizan compilacion Just-In-Time, por tanto, podemos definir el ciclo de ejecucion de codigo en JavaScript mediante los siguientes pasos:\n\n1. Entra codigo a un JS Engine\n2. Parseo. Es convertido linea por linea a un Abstract Syntax Tree (AST), en donde se almacenan todas las keywords relevantes del lenguaje.\n3. Compilacion. Es convertido a codigo maquina\n4. Ejecucion. Se ejecuta el codigo maquina hacia el callstack.\n5. Optimizacion. Debido a que se busca rapidez en la web, ocurre un ciclo de recompilacion y reejecucion para optimizar el codigo mejor optimizado sin detener la ejecucion.\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/JavaScript-Execution-Context":{"title":"JavaScript Execution Context","content":"### Definicion\nUn Execution Context es como un contenedor en el cual pueden vivir todas las partes de un codigo de javascript, keywords, objetos, funciones (solo las cabeceras), variables, etc.\n\n**Es un concepto analogo a un Stack Frame**\n### Componentes\n- Variable Environment. Principalmente manejada por el mecanismo de [Hoisting](notes/Hoisting.md).\n- [Scope](notes/Scope.md).\n- [this en JavaScript](notes/this%20en%20JavaScript.md).\n\n### Funciones\nAdentrandose mas sobre el conceptos de Execution Context es aplicado tras lograr la compilacion en el proceso de ejecucion dentro de un [JavaScript Engine](notes/JavaScript%20Engine.md).\n\n1. Tenemos el codigo compilado y listo para ser ejecutado\n2. Se crea el contexto global de ejecucion donde se ejecuta todo el codigo que esta fuera de cualquier funcion.\n3. Se ejecuta todo el codigo dentro del contexto global de ejecucion.\n4. Se ejecutan las funciones conforme se vayan llamando.\n\t1. Se llama una funcion\n\t2. Se crea un Function Execution Context, en donde podemos encontrar las variables locales, constantes, objetos, otras funciones, etc.\n\t3. Se agrega el FEC al Call Stack\n\t4. Se ejecuta el Call Stack siguiendo el LIFO.\n\nGEC (Global Execution Context). Exactamente uno es creado para todo el codigo que no se encuentra dentro de ninguna funcion.\n\nFEC (Function Execution Context). Uno es creado por cada funcion.","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/JavaScript-Runtime":{"title":"JavaScript Runtime","content":"Un Runtime funciona como un contenedor en el cual podemos encontrar herramientas que, de la mano de codigo en javascript, pueden lograr comunicarse y brindar funcionalidad especifica a ese runtime.\n\n### Runtime del navegador\n- [JavaScript Engine](notes/JavaScript%20Engine.md)\n- [[WEB APIs]]\n- [[Callback Queue]]\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Leer-para-Entender":{"title":"Leer para Entender","content":"Es la forma de lectura por excelencia que se deberia buscar alcanzar. Esta aplica tecnicas de lectura activa y avisa de las tecnicas de lectura pasiva que deben ser evitadas.\n\nAlgunas de las tecnicas que no funcionan son:\n- Solo leer pagina tras pagina sin pensar\n- Subrayar y Marcar el libro\n- Releer\n\nLas tecnicas recomendadas en su lugar son:\n- Extraer los puntos importantes y reescribirlos o refrasearlos con nuestras propias palabras entendiendo la conversacion que se tiene con el autor\n- Detenerse a pensar y contrastar la idea del autor, criticarla y unirla con otros pensamientos que ya existen en tu mente\n- Escribir los pensamientos y emociones que te cause la lectura\n- Escribir lo que aprendiste y las preguntas nuevas que surgieron en el proceso\n\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Legibilidad-del-Codigo":{"title":"Legibilidad del Codigo","content":"Es la disciplina encargada de escribir ya no las clases ni las partes especificas, es la parte del dise√±o que se enfoca a las lineas especificas de cada metodo, clase, etc.\n\n## KISS - Keep It Simple, Stupid\nLo sencillo es lo que funciona, menos es mas, sencillez, simple.\n- Keep it Simple Stupid \n- Keep it Small and Simple\n- Keep it Short and SImple\n\nPor cada linea que se escribe, cien mas son leidas, por tanto, escribe codigo que tu mismo y otros puedan enteder, codigo sencillo.\n\nLo contrario a hacer un codigo sencillo es hacer un codigo dificil de leer (es decir, con alta complejidad) lo que resulta en codigo espaguetti, con intenciones oscuras o de generalidad especulativa.\n\nSin embargo este principio no se aplica solo en codigo, se aplica en todo!, en el tama√±o de los sistemas, de las clases, de las funciones, si todo lo mantenemos simple estaremos maximizando la cohesion reduciendo el acoplamiento y teniendo bajo tama√±o, simplemente KISS.\n\n## Formato\nEs importante tener un conjunto de reglas comunes que sirvan para tener un formato de codigo homogeneo entre todos los desarrolladores.\n\nRegularmente se recomienda utilizar un estandar de formato de codigo popular en la comunidad del lenguaje en el que programas.\n\n## Comentarios\nNo comentes codigo malo, reescribelo creando nuevas funciones, distribuyendo responsabilidades entre clases u otras formas que no requieran escribir comentarios que aclaran lo que nadie va a entender, que nadie va a entender o que esta sujeto a malinterpretaciones.\n\n## Nombrado\nLos nombres de variables, metodos, funciones, clases y de todo deben de ser homogeneos, claros, sencillos, simples y suficientemente descriptivos como para que todos puedan entender lo que se engloba dentro de ese nombre (tanto de forma directa como los efectos secundarios que tiene).\n\n- Un nombre debe revelar su intencion\n- Un buen nombre lleva tiempo\n- Un nombre es dinamico, se puede cambiar y adaptar\n- Utiliza las palabras clave del [[notes/Modelo del Dominio]]\n- Se evitan acronimos, es decir, son legibles\n\n## Estandares\nMantener unos estandares y una unica forma de escribir el codigo de modo que todos puedan entender el codigo de todos sin a√±adir complejidad extra.\n\nExisten estandares en todos los lenguajes, en Java estan las de Oracle y las de Google, en JavaScript las de Alibaba.\n\n## Consistencia\nManten y has todas las cosas que tienen caracteristicas similares de la misma manera. Consistencia en los espacios, en los nombres, en las convenciones.\n\nRespeta las palabras del modelo del dominio, se consistente con como habla tu cliente!\n\n## Alertas\nManten las alertas y advertencias activadas, el compilador es tu amigo y busca ayudarte con los problemas que podrian surgir de tu codigo.\n\n## Codigo Muerto\nCodigo que no aporta nada al sistema, que lo unico que hace es llenar lineas por llenar. Codigo que pasa a estar desactualizado debido a su nula documentacion y sostenido por comentarios que no han sido mantenidos desde hace mucho tiempo. Codigo que no aporta nada al proyecto.\n\nEn caso de que el codigo se mantenga empezara a ocurrir el sindrome de las ventanas rotas.\n## YAGNI - You Aint Gonna Need It\nOcurre cuando se entregan caracteristicas innecesarias que no se requieren para el proyecto.\n\nEs una perdida de tiempo, tiempo el cual deberia ser usado en actividades de desarrollo como las pruebas, la documentacion, la programacion de funcionalidades que SI se solicitaron.\n\n## DRY - Dont Repeat Yourself\nEvitar re-codificar, re-analizar y repetir en general las partes que ya fueron desarrolladas en distintas secciones del software.\n\nPara evitar esto se debe incurrir en la reutilizacion de cosas que ya estan escritas y probadas. Sostenerte en algo que ya hiciste.\n\n\n","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Logical-Assignment-Operators-en-JavaScript":{"title":"Logical Assignment Operators en JavaScript","content":"Son operadores con sintaxis similar a los operadores de acumulacion. En este caso, los operadores logicos de asignacion sirven para comparar [[notes/Propiedades de Objetos en JavaScript]] y aplicar el mecanismo de [[notes/Short Circuiting en JavaScript]] para, por ejemplo, dar un valor por defecto a una propiedad.\n\n## Operador OR\nEste operador asigna el valor a la propiedad si su valor actual es falsy.\n\n```JavaScript\nobj.propiedad = obj.propiedad || 1; // normal con short circuiting\nobj.propiedad ||= 1; // operador de asignacion + short circuiting\n```\n\n## Operador Nullish Coalescing\nEste operador funciona de la misma forma que el OR pero solo lo asigna si su valor actual es nullish (null o undefined).\n\n```JavaScript\nobj.propiedad ??= 1; // operador de asignacion + short circuiting\n```\n\n## Operador AND\nAdicionalmente tambien existe el operador AND que asigna un valor solo si su propiedad actual es truthy.\n\n```JavaScript\nobj.propiedad \u0026\u0026= 23; // Si es truthy obj.propieda asignale el valor 23\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Loopear-sobre-Objetos-en-JavaScript":{"title":"Loopear sobre Objetos en JavaScript","content":"Aunque los objetos en javascript no tienen la propiedad de ser iterables, existe una forma de obtener un conjunto de elementos que si integran esta propiedad.\n\nDebido a que los objetos no son iterables, tenemos que conseguir una forma de pasarlos a un array. Es ahi donde entra las funciones de Object.\n\nTambien nos apoyaremos en la sintaxis especial del [[notes/For of Loop en JavaScript]].\n\nExisten tres alternativas dependiendo de lo que busquemos conseguir.\n\n## Keys - Nombre de Propiedades\nLa funcion especial que utilizamos es Object.keys().\n\n```JavaScript\nfor(const key of Object.keys(obj)) {\n\tconsole.log(key) // cada nombre de propiedad\n}\n```\n\n## Values - Valores de las Propiedades\nLa funcion especial que utilizamos es Object.value().\n\n```JavaScript\nfor(const value of Object.values(obj)) {\n\tconsole.log(value) // cada valor de propiedad\n}\n```\n\n\n## Entries - Ambos\nLa funcion especial que utilizamos es Object.entries(). Esta funcion retorna un array en el cual cada elemento es un array conteniendo el key y el value de cada propiedad.\n\nPor tanto, es muy conveniente utilizar [[notes/Destructuring en JavaScript]] para conseguir las dos variables separadas.\n\n```JavaScript\nfor(const [key, value] of Object.entries(obj)) {\n\tconsole.log(`${key}: ${value}`);\n}\n```\n\nComo se nota es bastante similar a lo que utilizamos en el array del ejemplo de [[notes/For of Loop en JavaScript]].","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Manipulacion-del-DOM":{"title":"Manipulacion del DOM","content":"La manipulacion del [DOM](notes/DOM.md) ocurre cuando utilizamos un lenguaje de programacion para interactuar de forma dinamica con un documento de HTML mediante el WEB API que ofrecen los navegadores.\n\nUtilizando JavaScript existen muchas formas de manipularlo. Aqui algunas de ellas.\n\n### querySelector()\nPrimeramente debemos obtener el objeto del documento html, y posteriormente llamar al metodo especial querySelector().\n\nEn el parametro del metodo querySelector debemos colocar un selector de la misma forma que lo hacemos en CSS. Un .nombre para clases un \\#nombre para los IDs, etc etc.\n\n\n```JavaScript\ndocument.querySelector('.text'); // Seleccion del primer elemento con el nombre de clase 'text', por ejemplo, \u003cp class='text'\u003eHola mi nombre es Jaime Ayala\u003c/p\u003e\n```\n\n#### Propiedades de un Elemento\nRecordemos que se maneja en estructura de arbol, por tanto, debemos especificar que parte del objeto con clase 'texto' queremos, en este caso, veamos su contenido textual:\n\n##### .textContent\n```JavaScript\nconsole.log(document.querySelector('.text').textContent); // Hola mi nombre es Jaime Ayala\n```\n\nAparte de poder leerla, tambien podemos sobreescribirla como si fuera una variable:\n\n```JavaScript\ndocument.querySelector('.text').textContent = 'Hola me llamo Jaime'; // Actualizacion del elemento con la clase 'text'\n```\n\n#### Funciones de un Elemento\n\nComo sabemos ahora, **los elementos de un objeto no solo son propiedades, si no que tambien pueden ser metodos**!. Por eso, tras seleccionar una etiqueta del documento podemos agregarle cosas como un escuchador de eventos para reaccionar a lo que hace el usuario.\n\n##### .addEventListener()\nVeamos un boton que al ser presionado actualiza el valor de nuestra etiqueta texto mediante el metodo .addEventListener:\n\n```JavaScript\ndocument.querySelector('.button').addEventListener('click', () =\u003e\n\tdocument.querySelector('.text').textContent = 'Presionado!';\n)\n```\n\nEl primer parametro de este metodo es el **tipo de evento al que esta escuchando** y el segundo la **expresion funcional (funcion anonima) que ejecutara cuando sea detectado**. En este caso utilice una arrow function.\n###### Informacion sobre el Evento\nEs posible obtener informacion detallada sobre el evento en forma de un objeto, esto se hace poniendo un parametro dentro de la expresion funcional del eventListener:\n\n```JavaScript\ndocument.querySelector('.button').addEventListener('click', (event) =\u003e\n\tconsole.log(event);\n)\n```\n###### Eventos en el Teclado\nUna de las funcionalidades mas basicas es interactuar con el usuario mediante el teclado, en una pagina web, se puede hacer mediante un eventListener.\n\nAl tratarse del teclado, se debe declarar como un **event global**. Es decir, que ocurriran sin importar en que parte o momento de la pagina nos encontremos porque se encuentra embebido dentro del documento.\n\nVeamos un ejemplo:\n\n```JavaScript\ndocument.addEventListener('keydown', (event) =\u003e {\n\tconsole.log(event);\n})\n```\n\n### querySelectorAll()\nTiene las mismas funciones y propiedades que querySelector solo que, en vez de seleccionar al primero, **selecciona todos los elementos con el selector especificado** y devuelve un NodeList (que funciona como un [Arrays en JavaScript](notes/Arrays%20en%20JavaScript.md)) con ellos dentro.\n### Estilos\n#### Inline\nTambien podemos cambiar los estilos de cualquier elemento de forma dinamica, esto se hace accediendo a la propiedad .style de cualquier objeto del querySelector:\n\n```JavaScript\ndocument.querySelector('.texto').style;\n```\n\nEsto devuelve un objeto con todos los estilos del elemento al que seleccionamos, de modo que ahora, solo nos queda especificar una propiedad de CSS por cambiar:\n\n```JavaScript\ndocument.querySelector('.texto').style.color = '00fffff'; // Cambia la letra a color amarillo\n```\n\n#### Clases\nOtra forma (y la mas utilizada) de modificiar los estilos de una pagina web es agregar, remover y modificar las clases de un elemento, de esta forma, podemos agregar y remover un grupo de caracteristicas del elemento que busquemos. \n\nPara esto, cada elemento del documento cuenta con un objeto especial llamado **classList** que sirve para referirse al atributo de clases de la etiqueta HTML.\n\n```JavaScript\ndocument.querySelector('.button').classList.add('hidden'); // Selecciona el elemento con la clase 'boton', selecciona su lista de clases y agrega la clase 'hidden'\n```\n\nEn este caso, si en el archivo CSS existen propiedades para la clase 'hidden' se aplicaran al elemento de forma dinamica.\n\n### insertAdjacentHtml()\nSirve para insertar html antes, dentro, antes de terminar y despues de la etiqueta de cierre de un elemento html, de esta forma, podemos agregar de manera dinamica elementos al DOM.\n\n```JavaScript\nconst htmlElement = '\u003cdiv class='hola'\u003ehola\u003c/div\u003e';\n\ndocument.querySelector('.div1').insertAdjacentHtml('afterbegin', htmlElement);\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Maps-en-JavaScript":{"title":"Maps en JavaScript","content":"\nLa diferencia entre objetos y mapas esque en los mapas las keys pueden ser de cualquier tipo de dato (No como en los objetos, que solo permiten strings).\n\nPara utilizarlos, tambien utilizamos la sintaxis del constructor\n\n```JavaScript\nconst map = new Map();\n```\n\n## Agregar Elementos\nUna vez creado el mapa, podemos empezar a agregar elementos con el metodo set.\n\n```JavaScript\nmap.set('key', 'value');\nmap.set(2, true);\nmap.set(false, 'somevalue');\n```\n\nEl metodo set returna el mapa ya modificado (mutado), esto nos permite encadenar multiples set consecutivos\n\n```JavaSCRIPT\nmap.set('key2', 'value2')\n\t.set(true, 'Esta abierto')\n```\n\n## Obtener Elementos\nPara obtener un elemento debemos referirnos a el mediante su key y se nos devolvera su valor con el metodo get\n\n```JavaScript\nmap.get('key');\nmap.get(2);\nmap.get(false);\n```\n\n## Checar si Existe\nPara checar si un elemento existe volvemos a reutilizar el metodo .has\n\n```JavaScript\nmap.has('key');\n```\n\n## Eliminar Elementos\nPara eliminar utilizamos el metodo .delete\n\n```JavaScript\nmap.delete('key');\n```\n\n## Otra alternativa de agregar elementos\nOtra forma de declarar un mapa es utilizar un array de arrays.\n\n```JavaScript\nconst map = new Map([\n\t['key', 'value']\n\t['key', 'value']\n])\n```\n\nExtra√±amente familiar a los metodos utilizados en [[notes/Loopear sobre Objetos en JavaScript]] (Object.entries). Debido a esto, es muy sencillo pasar un objeto a un mapa!\n\n```JavaScript\nconst map = new Map(Object.entries(obj)); // Convierte un objeto a un mapa\n```\n\n## Iteracion\nSu iteracion es exactamente igual que en [[notes/Loopear sobre Objetos en JavaScript]], se utiliza la [[notes/Destructuring en JavaScript]] para obtener el par de llave - valor.\n\n```JavaScript\nfor(const [key, value] of map) {\n\tconsole.log(`${key}: ${value}`);\n}\n```\n\n```JavaScript\n// challenge\nquestion.get(answer === question.get('correct'));\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Mensajes":{"title":"Mensajes","content":"Es la base sobre la cual objetos pueden interactuar con otros utilizando sus vistas publicas, es decir, sus interfaces. En ese caso, un objeto activo (El que envia el mensaje) se comunica con un objeto pasivo (El que lo recibe).\n\n```Java\nclass Pasivo {\n\tprivate int valor;\n\n\tpublic void imprimirValor() {\n\t\tSystem.out.println(valor);\n\t}\n}\n\nclass Activo {\n\tpublic static void main(String[] args) {\n\t\tPasivo pas = new Pasivo();\n\t\t// Mensaje desde this hasta pas\n\t\tpas.imprimirValor();\n\t}\n}\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Mente":{"title":"Mente","content":"Es un espacio en el cerebro en el cual se guarda todo en forma de archivero o biblioteca, esta divido por areas y se nos permite acceder a ellas mediante los movimientos del [Awareness](notes/Awareness.md).\n\n*Idea inspirada de: [The Power of Unwavering Focus - Podcast](reference/The%20Power%20of%20Unwavering%20Focus%20-%20Podcast.md)*","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Metodo-apply-en-JavaScript":{"title":"Metodo apply en JavaScript","content":"Es otro metodo que puede ser aplicado en las funciones que nos sirve para cambiar a donde apunta la keyword [[notes/this en JavaScript]].\n\nTiene exactamente la misma funcionalidad que [[notes/Metodo call en JavaScript]], sin embargo, este metodo **no permite recibir los argumentos de la funcion separados por comas, recibe un array de argumentos**.\n\n```JavaScript\nfuncion.apply(thisKeywordReplacer, [args]) // El primer argumento sera el objeto o cosa que sustituira la keyword this y el segundo los argumentos de la funcion normal\n```\n\nReutilizando el ejemplo \n\n```JavaScript\nconst obj1 = {\n\tname: 'Jaime',\n\tage: '20',\n}\n\nconst obj2 = {\n\tname: 'Pepe',\n\tage: '5',\n}\n\nfunction funcion(day) {\n\tconsole.log(`${this.name}: ${this.age} at ${day}`);\n}\n\nfuncion.call(obj1, [2]); // Jaime: 20\nfuncion.call(obj2, [23]); // Pepe: 5\n```\n\n**Este metodo ya no es tan utilizado gracias a la existencia de [[notes/Metodo call en JavaScript]] y el uso del [[notes/Spread Operator en JavaScript]] en caso de ser necesario**.","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Metodo-bind-en-JavaScript":{"title":"Metodo bind en JavaScript","content":"Tal y como los metodos [[notes/Metodo apply en JavaScript]] y [[notes/Metodo call en JavaScript]], este tambien nos permite cambiar la keyword [[notes/this en JavaScript]] de lugar.\n\nSin embargo, esta funcion tiene un comportamiento diferente. En vez de llamar a la funcion directamente, **retorna una funcion en la cual la keyword this ya esta asignada de forma correcta**.\n\nEsto nos sirve mucho para poder reutilizar el llamado de una funcion multiples veces para un objeto sin escribir tanto boilerplate code.\n\n```JavaScript\nconst nuevaFuncionBindeada = funcion.bind(thisKeywordReplacment);\n```\n\nSin embargo este funcion tambien permite asignar otros argumentos, la cuestion esque estos no podran ser cambiados a futuro\n\n```JavaScript\nconst nuevaFuncionConArg = funcion.bind(thiskeywordrepl, arg1) // El valor de arg1 sera permanente cuando se llame nuevaFuncionConArg.\n```\n\nA esto se le llama **aplicacion parcial** debido a que algunos argumentos ya estaban colocados. Sirve como crear una plantilla y posteriormente crear otros tipos de funciones similar a ella pero cambiando menos argumentos.","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Metodo-call-en-JavaScript":{"title":"Metodos call y apply en JavaScript","content":"Es un metodo muy util que sirve para aplicar una funcion global como si fuese llamada desde un objeto. De esta forma, hacemos que la keyword [[notes/this en JavaScript]] apunte al objeto en cuestion y no a undefined o window.\n\nSu sintaxis basica es:\n\n```JavaScript\nfuncion.call(thisKeywordReplacer, args) // El primer argumento sera el objeto o cosa que sustituira la keyword this y el segundo los argumentos de la funcion normal\n```\n\nUn ejemplo claro seria el siguiente: \n\n```JavaScript\nconst obj1 = {\n\tname: 'Jaime',\n\tage: '20',\n}\n\nconst obj2 = {\n\tname: 'Pepe',\n\tage: '5',\n}\n\nfunction funcion(day) {\n\tconsole.log(`${this.name}: ${this.age} at ${day}`);\n}\n\nfuncion.call(obj1, 2); // Jaime: 20\nfuncion.call(obj2, 23); // Pepe: 5\n```","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Metodologias-de-Desarrollo":{"title":"Practicas - Ciclo de Vida","content":"Las practicas relacionadas con el ciclo de vida de un proyecto de software se refiere a la cantidad de tiempo que tendra cada paso del ciclo de creacion, la duracion que tendra, la relevancia y si es iterable o no.\n\nEntre las metodologias de desarrollo mas relevantes tenemos: **Waterfall (Cascada), Iterativa y Agiles**.\n\n## Cascada\nLa metodologia de cascada surgio en los a√±os 60s y buscaba proponer un orden al caos que era desarrollar un software. **Establecio las distintas fases y tenia un metodo muy lineal que se tenia que seguir para desarrollar software**. La cantidad de proyectos fallidos debido a los problemas en las distintas fases de desarrollo fue lo que llevo a la caida de esta metodologia.\n\nAdicionalmente, la metodologia de cascada solo es el ejemplar mas popular de las metodologias estrictamente secuenciales.\n## Iterativas\nLas metodologias iterativas fueron un conjunto de metodologias que **integraron las fases traidas desde la cascada pero agregando iteraciones** en ellas, por tanto, no concebia al proceso de creacion de un software como completamente lineal sino como un proceso iterativo que se iba repitiendo hasta lograr tener un producto final. Al existir tantas metodologias iterativas se busco una estandarizacion, lo que resulto en UML y RUP. Estas metodologias fallaron debido a que eran muy estrictas, requerian de mucho modelado y trabajo extra.\n\nLas metodologias agiles son un conjunto de metodologias que integran gran parte de las ideas iterativas, sin embargo agregan que ahora **cada iteracion no solo debe ser repetible sino que debe ser incremental** para el producto de software que se esta desarrollando.\n\nInspirado de: [The Essentials of Modern Software Engineering](es/reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/main.md) (*Se refiere a ellas como Practicas del ciclo de vida*)","lastmodified":"2022-10-19T23:41:24.489405307Z","tags":null},"/notes/Metodos":{"title":"Metodo","content":"Define las operaciones (funciones, rutinas, operaciones) implantadas dentro de una clase que estaran disponibles para ser ejecutadas por los objetos que se generen de ella.\n\nLos metodos conforman la interfaz publica de una clase, para esto, utilizan el modificador de vista publica (==public==). Todos los metodos declarados con este estan disponibles para que objetos de otra [Clase](notes/Clase.md) o de su misma, puedan comunicarse usando [Mensajes](notes/Mensajes.md)\n\nAdicionalmente, tambien pueden servir como intermediario para otras operaciones si se especifican con el modificador de vista privada, de esta forma permite que desde un metodo publico se llamen a otros metodos privados\n\n```Java {title=\"Date.java\"}\nclass Date {\n\tprivate int day;\n\n\t// Parte de la vista privada\n\tprivate void print(Object value) {\n\t\tSystem.out.println(value);\n\t}\n\n\t// Parte de la vista publica / interfaz publica\n\tpublic void printDay() {\n\t\t// uso de un metodo privado para abstraer todavia mas\n\t\tprint(this.day);\n\t}\n}\n```\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Metodos-Utiles-Arrays-en-JavaScript":{"title":"Metodos Utiles Arrays en JavaScript","content":"Algunos de los metodos mas basicos para trabajar con [Arrays en JavaScript](notes/Arrays%20en%20JavaScript.md):\n- push. Apende un elemento al final del array\n- unshift. Apende un elemento al **inicio** del array.\n- pop. Remuve un elemento al **final** del array\n- shift. Remueve un elemento al **inicio** del array\n- indexOf. Retorna el indice de un elemento o -1 si no existe\n- includes. Retorna un booleano, true si incluye un elemento, false si no. **Checa por equalidad, solo devuelve true si existe equialidad entre el valor pasado y otro**\n\n```JavaScript\nconst array = ['elem1', 'elem23', 'elem98']\n\narray.push('elem3') // ['elem1', 'elem23', 'elem98', 'elem3']\narray.unshift('elem0') // ['elem0', 'elem1', 'elem23', 'elem98', 'elem3']\narray.shift() // ['elem1', 'elem23', 'elem98', 'elem3']\narray.pop() // ['elem1', 'elem23', 'elem98']\n\narray.includes('elem0') // false\narray.indexOf('elem23') // 1\n```\n\n- slice Permite extraer un array desde el indice especificado (inclusivo) hasta el otro indice especificado (exclusivo), en caso de no especificar el segundo se hace hasta el final. Esto **no muta el array**. Ademas tambien sirve para hacer un [[notes/Shallow Copy]]!\n- splice. Funciona de forma similar al slice pero este **si muta el array, es decir, sus elementos seran diferentes despues de ejecutarlo**.\n- reverse. **Muta el array revertiendo el orden de los elementos**\n- concat. Concatena dos arrays y devuelve uno nuevo.\n- join. Une todos los elementos en uno solo utilizando el delimitador especificado como parametro. \n\n## at()\nEs una forma de reemplazar la notacion tradicional de los corchetes para acceder a los elementos del array.\n\nLo que lo diferencia esque se pueden utilizar indices negativos y positivos para obtener elementos como en los metodos slice y splice.\n\n```JavaScript\nconsole.log(array[array-1]); // same\nconsole.log(array.at(-1)); // same\n```\n\n## forEach()\nSe le pasa un callback function como parametro, esta funcion sera llamada por cada iteracion (es decir, por cada elemento).\n\nComo caracteristicas especiales esque a esta callback function le puede pasar hasta un maximo de tres cosas.\n1. El elemento actual de la iteracion\n2. El indice del elemento actual\n3. El array entero\n\nEste metodo en particular tambien funciona con los [[notes/Sets en JavaScript]] y los [[notes/Maps en JavaScript]].\n\nEsta funcion por lo general busca mutar las estructuras de datos de cierta forma!\n## Transformaciones de Datos\nExisten multiples metodos para transformar los datos de un array.\n- map. Aplica una determinada operacion a cada elemento de un array. Devuelve un array nuevo con la operacion aplicada\n- filter. Filtra los elementos basado en cierto criterio, solo pasan los que satisfascan la condicion.\n- reduce. Reduce todos los elementos a uno solo aplicando una operacion de cada elemento hacia un acumulador. En cada iteracion por cada elemento se debe de devolver el valor del acumulador actualizado con la operacion ya ejecutada\n\n- find. Sirve para encontrar un solo elemento basado en una condicion (o un callback function). Retorna el primer elemento para el cual se obtiene true en la condicion.\n- findIndex. Funciona de la misma forma que el metodo find pero devuelve el indice en lugar del elemento\n- some. Hace lo mismo que includes pero puede recibir una condicion mas compleja (o un callback function). Por ejemplo si existe un elemento mayor que 0\n- every. Hace lo mismo que some pero solo devolvera true si todos los elementos pasan la condicion.\n\n- flat. Sirve para aplanar una estructura de datos que tiene otras anidadas. Devuelve un nuevo array con todos los elementos aplanados. **Como argumento podemos pasarle la cantidad de niveles a aplanar**.\n- flatMap. Combina los metodos flat y map en una misma operacion. Primero recibe una operacion para hacer map y al final aplana el resultado. **Este solo funciona con un nivel de nest**.\n\n- sort, Muta el array y lo ordena **basado en strings. primero lo convierte despues hace sorting, es decir, ordena de acuerdo al ascii**. Para arreglarlo se le debe pasa runa **funcion de comparacion como argumento** en forma de callback function. \n\nEste callback function de comparacion tiene dos argumentos 'a' y 'b'. Se espera un valor positivo o negativo. Si es negativo se colocara 'a' antes que 'b' y si es positivo viceversa.\n\nCrear arrays\n- Creacion por brackets []\n- Creacion por constructor \n- Creacion por constructor de elementos vacios + Fill\n- Creacion por relleno del metodo Array.from. Este recibe un objeto como primer parametro y un callback functionc omo segundo (la cual funciona como un map). Sirve para convertir otra estructura de datos en un array (pasandola como primer parametro).\n\n\n![[files/MetodosUtilesArraysFramework.png]]","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Metodos-de-Objetos-en-JavaScript":{"title":"Metodos de Objetos en JavaScript","content":"Para crear metodos (funciones, rutinas, etc) dentro de un objeto primero debemos entender que estos no son mas que **propiedades de un objeto ya existente**. Sin embargo, recordemos que existen dos formas de declarar [Funciones en JavaScript](notes/Funciones%20en%20JavaScript.md). \n\nEn este caso, lo que necesitamos es utilizar una Expresion Funcional (Forma normal o en flecha).\n\n```JavaScript\nconst object = {\n\tname: 'Jaime',\n\tlastName: 'Ayala',\n\n\tcalcAge: birthYear =\u003e 2022 - birthYear,\n\tcalcAge2: function (birthYear) {\n\t\treturn 2022 - birthYear;\n\t}\n}\n```\n\nAhora para llamarla podemos utilizar cualquiera de las dos formas de acceder a las [Propiedades de Objetos en JavaScript](notes/Propiedades%20de%20Objetos%20en%20JavaScript.md).\n\n```JavaScript\nconsole.log(object.calcAge(2002)); // 20\nconsole.log(object['calcAge'](2002)); // 20\n```\n\n```JavaScript\nconst object = {\n\t//...\n\tsummary: () =\u003e {\n\t\tconst age = this.age ? this.age : this.calcAge();\n\t\t\n\t\tconsole.log(`${this.firstName} is a ${age}-year old ${this.job}, and he has ${this.hasDriversLicence ? 'a' : 'no'} driver's licence`);\n\t}\n}\n```\n\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Metodos-y-Practicas-de-Strings-en-JavaScript":{"title":"Metodos y Practicas de Strings en JavaScript","content":"Aunque en JavaScript los strings son primitivos estos tienen metodos debido a que aprovecha el mecanismo del boxing.\n\nPor tanto, nuestro string primitivo es enboxeado en el objeto String.\n\n- Acceso mediante corchetes\n- length. Propiedad length\n- indexOf. Obtener indice de la primer ocurrencia de un substring\n- lastIndexOf. Obtener indice de la ultima ocurrencia de un substring\n- slice. Extraer un substring (inicio inclusivo final exclusivo)\n- toLowerCase. Convierte el string a lower case\n- toUpperCase. Convierte el string a upper case\n- trim. Remueve los espacios del principio y el final del string\n- replace. Reemplaza la primer instancia de una expresion (string o regex) dentro del string.\n- replaceAll. Reemplaza todas las instancias de una expreion dentro deun string.\n- includes. Devuelve true o falsa si el string incluye el substring\n- startsWith. Devuelve true o falsa si el string inicia con\n- endsWith. Devuelve true o falsa si el string inicia con\n- split. Dividir un string en multiples partes basado en un divisor (Lo podemos combinar con el mecanismo de [[notes/Destructuring en JavaScript]] debido a que retorna un array).\n- join. Une multiples strings con el caracter especificado en el parametro de este metodo.\n- padStart. Agrega el caracter dado al inicio hasta cumplir con la longitud indicada\n- padEnd. Agrega el caracter dado al final hasta cumplir con la longitud indicada\n- repeat. Duplica el string dentro de si mismo\n\n\n```JavaScript\nconst price = '$333'\nprice = price.replace('$', 'MXN');\n```\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Microservicios":{"title":"Microservicios","content":"Es un tipo de arquitectura de Software, algunas de sus caracteristicas principales son:\n- Dividir toda la solucion en multiples modulos llamados microservicios en el que cada uno resuelve una funcionalidad.\n- Los microservicios se comunican regularmente mediante REST o sistemas de mensajeria como RabbitMQ.\n- Se logra muy bajo acoplamiento afernte y eferente.\n- Aumenta la complejidad de despliegue{\n- Desarrollo puede ser agnostico al lenguaje\n- Permite reutilizarse en distintas soluciones para problemas.\n\nAnatomia tipica de un Microservicio\n![[files/ComponentesMicroservicio.png]]\n\nLa capa Controller solo debe encargarse de enviar los datos que recibe del mundo exterior a la capa Service.\n\nLa capa Service debe contener toda la logica de negocio.\n\nLa capa DAO unicamente debe encargarse de comunicarse con la persistencia de la aplicacion\n\n___\n\n## Referencias\n[Curso de microservicios con Java y Spring Boot](reference/@%20Curso%20de%20microservicios%20con%20Java%20y%20Spring%20Boot.md)","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Mindfulness":{"title":"Mindfulness","content":"Se obtiene como resultado secundario de desarrollar la habilidad del [Focus](notes/Focus.md). Consiste en tener la capacidad mental como para decidir a donde va tu [Awareness](notes/Awareness.md), de tal modo que tambien te permite reaccionar del modo que tu deseas.\n\nSe habla mucho de \"ser un observador\", esto solo ocurre cuando hacemos un buen manejo de nuestro [Awareness](notes/Awareness.md) de modo que podamos decidir de forma libre las reacciones que tendremos respecto a las cosas que ocurren en nuestro alrededor.\n\n*Idea inspirada de: [The Power of Unwavering Focus - Podcast](reference/The%20Power%20of%20Unwavering%20Focus%20-%20Podcast.md)*","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Modelo-del-Dominio":{"title":"Modelo del Dominio","content":"Es una representacion abstracta de lo que pasa en el mundo real, usualmente tambien es el primer modelo (dibujito, imagen, UML) y sirve para visualizar de forma clara como llega a haber colaboraciones entre los objetos de un problema.\n\nSe relaciona estrechamente con los [Requisitos](notes/Requisitos.md) y existen muchas estrategias para obtenerlo.\n\n\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Nombres-con-Sentido":{"title":"Nombres con Sentido","content":"Es una tecnica que se enfoca en el [[notes/Dise√±o en Codigo]] de bajo nivel. \n\nDebido a que los nombres se encuentran presentes en las funciones, las variables, los argumentos, las clases, los paquetes y las aplicaciones; utilizar nombres adecuados, descriptivos y detallados se vuelven muy relevantes.\n\nElegir un buen nombre lleva tiempo al decidir, requiere de buenas habilidades descriptivas y de un conocimiento de palabras comunes. Sin embargo, este peque√±o detalle ahorra mucho mas tiempo a futuro.\n\nEs importante tomar en consideracion que, si un nombre necesita un comentario, entonces no es un buen nombre.\n\nUtilizar un buen nombrado reduce la implicidad en el codigo e incrementa su expresividad para que todos puedan entenderlo.\n## Caracteristicas de Buen Nombrado\n### Revelan su Intencion\nLos nombres son capaces de responder por si mismos las preguntas basicas que cualquiera tendria:\n- Por que existe\n- Que hace\n- Como es utilizado\n\n```Java\n// mal nombrado\nint x = 189 // days elapsed since creation\n\n// buen nombrado\nint daysElapsedSinceCreation = 189; \n```\n\n### Evitan Desinformacion\nLos nombres no dejan pistas que podrian ser malinterpretadas si son leidas en cualquier contexto a futuro. \n\nPor tanto, un nombre que no desinforma:\n- Evita el uso de palabras reservadas\n- Evita abreviaciones\n- Evita nombres que tienen ligeras variaciones\n- Evita incoherencia\n\n### Distinciones Claras\n- No informan de nada\n- No tienen palabras que solo hacen ruido\n- No se parecen a otros nombres ya existentes\n- Son pronunciables\n- Son faciles de buscar\n- En caso de ambiguedad, la que es conocida por mas clientes debe ser la mas clara.\n- Se apegan a palabras del dominio o de la solucion. Evitan que se les de interpretacion manual.\n- Los nombres de las clases deben ser sustantivos\n- Los nombres de los metodos deben ser verbos y entenderse por si solos\n- No son tontos o graciosos\n- Son homogeneos a lo largo de toda la aplicacion.","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Nullish-Coalescing-Operator-en-JavaScript":{"title":"Nullish Coalescing Operator en JavaScript","content":"Este operador sirve para resolver las situaciones en las que hacer el [[notes/Short Circuiting en JavaScript]] llevara a tener errores debido a los falsy values raros (como 0 o '').\n\nVeamos el problema que tiene el operador OR.\n\n```JavaScript\nconst value = 0;\nconsle.log(value || 10); // 10\n```\n\nEsto debido a que trabaja con falsy values, debido a que 0 es falsy el shortcircuiting pasa a devolver 10.\n\nPor otro lado, veamos al operador nullish coalescing.\n\n```JavaScript\nconst value = 0;\nconsle.log(value ?? 10); // 0\n```\n\nEsto es debido a que trabaja con Nullish values en vez de Falsy values.\n\n**Los nullish values son Null y Undefined**.\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Objeto":{"title":"Objeto","content":"Es una instancia (es decir, una ocurrencia particular) o un ejemplar concreto proveniente de una clase ya definida. \n\nEstos son creados a partir de los constructores de una clase particular y por lo tanto, cuentan con sus atributos, metodos, vista publica y privada.\n\nSi comprobamos los atributos de un objeto en particular se dice que estamos comprobando su [Estado](notes/Estado.md).","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Objetos-en-JavaScript":{"title":"Objetos en JavaScript","content":"Un objeto consiste un conjunto de pares de llave-valor. Es una estructura de datos **desordenada**, por lo que el orden en el que aparecen sus datos es aleatorio.\n\nLa llave es el nombre o etiqueta que se puede usar para referirse al valor.\n\nLa siguiente sintaxis es la forma **literal** de escribir de un objeto:\n\n```javaScript\nconst object = {\n\tfirstName: 'Jaime',\n\tlastName: 'Ayala'\n};\n```\n\nAdicionalmente, los objetos en JavaScript tambien pueden tener funciones como atributos, a estos se les llama [Metodos de Objetos en JavaScript](notes/Metodos%20de%20Objetos%20en%20JavaScript.md)","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Optional-Chaining-en-JavaScript":{"title":"Optional Chaining en JavaScript","content":"Esta caracteristica introducida en ES6 ayuda cuando tenemos que estar comprobando la existencia de propiedades dentro de objetos.\n\n## Propiedades\nEsto es muy util debido a que comunmente muchos objetos suelen venir del exterior, por tanto, hay muchas propiedades opcionales que podrian estar o no en ellos. \n\nEn lugar de tener multiples ifs o otras estructuras de chequeo anidadas podemos utilizar la siguiente sintaxis:\n\n```JavaScript\nconsole.log(objeto.propiedad1?.propiedad2); // Si existe propiedad1 entonces devuelde propiedad2\n```\n\nBasicamente, el signo de interrogacion antes de pasar a la siguiente propiedad indica que, se debe comprobar que esa propiedad exista (Que no sea nullish), en caso de que exista procede a la siguiente, si no existe, devuelve undefined.\n\nDe este modo evitamos TypeErrors por acceder a propiedades de un valor undefined!\n\n## Metodos\nEsta misma sintaxis tambien sirve para llamar metodos que no estamos seguros si existen o no dentro del objeto.\n\n```JavaScript\nobj.method?.(); // Checa si method existe, si no existe, no lo ejecutes, si existe procede a ejecutarlo ().\n```\n\n## Arrays\nTambien podemos aplicarlo con cualquier elemento de un array si queremos seguir encadenando propiedades / metodos / otro array\n\n```JavaScript\nconsole.log(array[indice]?.[indice2]);\nconsole.log(array[indice]?.metodo?.());\nconsole.log(array[indice]?.propiedad);\n```","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Orientacion-a-Objetos":{"title":"Orientacion a Objetos","content":"### Vista publica de las clases - Interfaces\nLo publico es lo que es conocido en cualquier parte del sistema. Lo privado es lo que se conoce unicamente dentro de la declaracion de una clase\n- Public\n- Private\n- Clases\n- Metodos\n- Constructores\n- Overloading metodos\n- Destructores\n\nLas interfaces son sagradas","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Paradigma-Orientado-a-Objetos":{"title":"Paradigma Orientado a Objetos","content":"Es un paradigma que surge como sintesis tras la orientacion a datos y la orientacion a procesos. Tiene como objetivo dar la misma importancia tanto a datos como a procesos, utilizando el concepto de Clases y vistas.\n\nEl uso de clases mejora los aspectos basicos de la [[notes/Programacion|programacion]] (Abstraccion, Encapsulamiento, Modularidad y Jerarquia) e introduce unos nuevos para poder construir un software de mejor calidad. En especifico, agrega la Herencia y el Polimorfismo.\n\nEl uso de las vistas tambien ayuda a mejorar los fundamentos de la [[notes/Programacion|programacion]] mediante vistas publicas y privadas.","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Parametros-Default-en-JavaScript":{"title":"Parametros Default en JavaScript","content":"Es una caracteristica agregada a las funciones en ES6 que permite asignar valores por defecto a los parametros en caso de que no sean brindados por el usuario.\n\nSu sintaxis es muy intuitiva puesto que desde la funcion directamente podemos declararlos.\n\n```JavaScript\nfunction funcion(parametro1 = 'valorPorDefectoSiNoEsEspecificado') {\n\tconsole.log(parametro1); // parametro o valorpordefecto\n}\n```\n\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Patron-Experto-en-la-Informacion":{"title":"Patron Experto en la Informacion","content":"Se dice que un objeto tiene obligaciones que son dadas por los datos que guarda. Sus obligaciones es ofrecer una interfaz publica que satisfasca las operaciones necesarias que otros objetos tienen que hacer con ese dato.\n\nPensar muy bien la relacion que existe entre el conocimiento que tiene una parte del sistema y las operaciones que hace con esos datos.\n\nEs ilogico que un subsistma que busca persistir los datos haga calculos de cuanto tiempo tienen que durar en ella.\n\n**Este es el principio general de la asignaciond e responsabilidades:**\n\u003e *Inspirate en el Mundo Real, pero se coherente y has que las clases hagan las operaciones que les corresponden con los datos que encapsulan.*\n\nEn pocas palabras, **asigna la responsabilidad que le corresponde a la clase que tiene la informacion necesaria para cumplirarla**. De ser necesario tener colaboradores, tambien se puede especificar\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/PostgreSQL":{"title":"PostgreSQL","content":"PostgreSQL es un gestor de bases de datos relacionales de codigo abierto que integra una gran parte de la funcionalidad de otros con una mezcla de un dialecto nuevo de SQL. \n\nIncluye muchas funciones utiles, creacion de enumeradores y es mantenido hasta hoy en dia de forma constante por toda la comunidad\n\n## Descarga\nDirectamente del sitio web se puede descargar la version mas actualde PostgreSQL.\n\n\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Prerequisitos":{"title":"Prerequisitos","content":"## Definicion\nEs un conjunto de practicas que se realiza en el [[notes/Desarrollo de Software]] con el fin de reducir los riesgos, planear las partes criticas y garantizar la calidad desde el inicio de un proyecto.\n\nLos prerequisitos mas comunes son los siguientes tres pero pueden ser ajustados a mas o menos dependiendo del tipo de proyecto que se este desarrollando\n\n- [[notes/Definicion del Problema en un Desarrollo de Software]]\n- [[notes/Requisitos]]\n- Arquitectura de Alto Nivel\n\n## Razones de Impopularidad\nEste conjunto de practicas no es tan popular debido a que:\n1. No se habla tanto de el y por tanto, ni siquiera se sabe la importancia que tiene\n2. Los que saben subestiman la importancia de estos debido a la inexperiencia, no se identifica que la mayoria de problemas de un software suelen provenir de estos.\n3. Los jefes subestiman su importancia debido a que desconocen que tanto abarca una disciplina de desarrollo\n\n## Argumentos para ganar Importancia\n### Logico\nEs imposible desarrollar un software que cumpla las necesidades de un cliente si desde el principio no se sabe que problema tiene y no se tiene una idea de que hacer para resolverlo\n\n### Analogo\nEn ninguna disciplina se construye algo sin antes tener una preparacion, una planeacion clara de lo que se tiene que hacer y como se tiene que hacer.\n\nNuestra disciplina es considerada algo de solo escribir codigo, se subestima y no se toma en cuenta que en realidad, escribir codigo solo es la ultima actividad de todo el cliclo de escritura de un software. Debido a que es la ultima, si se detecta un error aqui, los costos que tendra seran extremadamente altos comparados a si se identificara en los prerequisitos del problema.\n\n### Area\nSin importar que [[notes/Metodologias de Desarrollo]] se utilice, los prerequisitos juegan un papel fundamental en garantizar que un proyecto de software salga bien desde un inicio.\n\n## Referencias\n*[[reference/@ Code complete]]*","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Principio-General-de-Asignacion-de-Responsabilidades":{"title":"Principio General de Asignacion de Responsabilidades","content":"\u003e *Inspirate en el Mundo Real, pero se coherente y has que las clases hagan las operaciones que les corresponden con los datos que encapsulan.*\n\nEn pocas palabras, **asigna la responsabilidad que le corresponde a la clase que tiene la informacion necesaria para cumplirarla**. De ser necesario tener colaboradores, tambien se puede especificar\n\nPor ejemplo, es ilogico que un subsistma que busca persistir los datos haga calculos de cuanto tiempo tienen que durar en ella.\n\nTambien buscar evitar clases get, get get get, set set set set, es decir, clases de datos vacias sin ningun comportamiento","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Principios-de-Inversion-de-Benjamin-Graham":{"title":"Principios de Inversion de Benjamin Graham","content":"Benjamin Graham fue uno de los mejores inversores manteniendo su empresa con un 15% de crecimiento anual de forma constante, hizo inversiones millonarias y creo el primer y mejor framework de inversion, lo redacto en su libro 'Security Analysis' un clasico para el area de finanzas hoy en dia.\n\n## Investing Principles\n- Un stock no es solo un simbolo o un blip electronico. Es un interes propietario que surge sobre un negocio el cual tiene un valor oculto que no depende del precio al que se oferta en el mercado.\n- El mercado es un pendulo constante que va del optimismo insostenible (hace que las acciones sean demasiado caras) al pesimismo injustificado (las hace demasiado baratas).\n- El inversor inteligente es aquel que compra los pesimistas y vende los optimistas.\n- El valor futuro de cada inversion depende de que tan caro la compres, mientras mas caro, menor sera tu retorno. (este no lo entiendo especificamente)\n- Sin importar que tan cuidadoso seas, la posibilidad del error siempre existe. Lo unico que podemos hacer es reducirlo (utilizando el 'margen de seguridad', es decuri, nunca sobrepagar sin importar que tan buena inversion parezca).\n- El secreto para el exito financiero se encuentra dentro de ti. Desarrolla el pensamiento critico como para invertir con firmeza y paciencia para obtener los resultados que deseas incluso en los peores mercados.","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Programacion":{"title":"Programacion","content":"Es una disciplina encargada de crear una serie de instrucciones en forma de codigo, utilizando un lenguaje especializado para hablar con la maquina que le permita dar las instrucciones suficientes como para que ejecute las tareas que se le asignan.\n___","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Programacion-Orientada-a-Objetos":{"title":"Programacion Orientada a Objetos","content":"Es un paradigma de [[notes/Programacion|programacion]] basado en *componentes*. En este caso, cada componente es un [notes/Objeto](es/notes/Objeto.md) (la unidad minima de construccion). \n\nConceptos relevantes:\n- [Paradigma Orientado a Objetos](notes/Paradigma%20Orientado%20a%20Objetos.md)\n- [Orientacion a Objetos](notes/Orientacion%20a%20Objetos.md)\n- [Clase](notes/Clase.md)\n- [Objeto](notes/Objeto.md)\n- [Atributos](notes/Atributos.md)\n- [Estado](notes/Estado.md)\n- [Metodos](notes/Metodos.md)\n- [Mensajes](notes/Mensajes.md)","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Propiedades-de-Objetos-en-JavaScript":{"title":"Interacciones con Objetos en JavaScript","content":"Existen dos formas basicas de interactuar con [Objetos en JavaScript](notes/Objetos%20en%20JavaScript.md) y cambiar o obtener sus propiedades.\n\n### Notacion con Punto (Member Access)\nSe especifica el nombre de la propiedad REAL que guarda el objeto y que se quiere obtener.\n\n```JavaScript\nobject.propiedad;\n```\n\nSe utiliza de forma general debido a que es la forma mas clara de obtener datos.\n### Notacion con Corchete (Computed Member Access)\nSe especifica mediante una expresion el nombre de la propiedad que se desea obtener.\n\n```JavaScript\nconst word = 'sion'\n\nobject['expre' + word];\n```\n\nSe utiliza cuando se necesita computar en una funcion o en otro lado el nombre de la propieda a obtener.\n\nEstas dos notaciones pueden ser utilizadas no solo para acceder a elementos de un objeto, si no para mutarlo y agregar nuevos pares a el:\n\n```JavaScript\nconst object = {\n\tname: 'Jaime',\n\tlastName: 'Ayala'\n}\n\nconsole.log(object.age) // Undefined\n\nobject.age = 2022 - 2002;\n\nconsole.log(object.career) // Undefined\n\nobject['career'] = 'IT'\n\nconsole.log(object.age) // 20\nconsole.log(object.career) // IT\n\nconsole.log(`${jonas.firstName} has ${jonas.friends.length} friends, and his best friend is called ${jonas.friends[0]}`);\n```\n\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Pruebas":{"title":"Pruebas","content":"Es probablemente el proceso mas infravalorado por los estudiantes que aprenden el [Desarrollo de Software](notes/Desarrollo%20de%20Software.md).\n\nEs absolutamente necesario si lo que se busca es trabajar en un entorno profesional. Hacer pruebas garantiza que, aunque te vayas de la empresa, tu codigo se pueda probar y por tanto, pueda cambiarse con facilidad y no rompa nada en el proceso.\n\nUsualmente los desarrolladores escriben sus propias Pruebas Unitarias.\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Pseudohacking":{"title":"Pseudohacking","content":"Es una practica que ocurre en la [Programacion](notes/Programacion.md) de un software, ocurre cuando un desarrollador agrega codigo casi aleatorio con el fin de conseguir un objetivo (cumplir un requisito, regularmente) sin entender realmente lo que hace el codigo que esta agregando al Software.\n\nEsta es una practica muy da√±ina y tristemente, muy popular hoy en dia.\n\nInspirado de: [The Essentials of Modern Software Engineering](es/reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/main.md)","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Relacion-de-Agregacion":{"title":"Relacion de Agregacion","content":"Siguiendo las caracteristicas de las [Relaciones entre Clases por Colaboracion](notes/Relaciones%20entre%20Clases%20por%20Colaboracion.md). La relacion por agregacion tendria las siguientes:\n\nEn esta relacion la agregacion se encarga de gestionar todo lo relacionado con los agregados una vez forman parte de ella.\n## Caracteristicas\n### Temporalidad - Media\nLa vida de la agregacion (el todo) no tiene porque coincidir con la vida de ninguno de los agregados (Las partes). \n\nUn grupo de estudio no deja de ser un grupo de estudio si alguien deja de asistir.\n### Fidelidad - Media\nLos agregados pueden formar parte de distintas agregaciones simultaneamente.\n\nAlguien puede asistir a multiples grupos de estudio en distintos horarios y no por eso dejan de existir o afecta a alguno de ellos. Sin embargo, cada una de las agregaciones lleva su gestion de forma privada\n\n### Versatilidad - Media\nLos agregados pueden ser intercambiados, sin embargo esto puede llegar a afectar a la agregacion o a otros agregados.\n\nAlguien puede ser reemplazado por otra persona en un grupo de estudio pero podrian surgir problemas porque falta coordinacion de horarios.\n\n**Por lo anterior, la agregacion es una composicion debil, un agregado puede existir sin la necesidad de que exista una agregacion.**.\n\n## Representacion en UML y Codigo\n### UML\n![RelacionAgregacion.PNG](files/RelacionAgregacion.PNG)\n\n### Codigo\nLa agregacion es una coleccion de agregados en el que todos pueden entrar yt salir.\n\n```Java\nclass Agregacion {\n\tprivate List\u003cAgregado\u003e agregados;\n\n\tpublic Todo() {\n\t\tthis.agregados = new ArrayList\u003cAgregado\u003e(); // No se crea ningun agregado, solo la estructura para almacenarlos\n\t}\n\n\tpublic void add(Agregado agregado) {\n\t\tthis.agregados.add(agregado);\n\t}\n\n\tpublic void remove(Agregado agregado) {\n\t\tthis.agregados.remove(agregado);\t\n\t}\n}\n```","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Relacion-de-Asociacion":{"title":"Relacion de Asociacion","content":"NO cuenta con ningun tipo de composicion, ni debil, ni fuerte, pero a la vez, es la primera que hace que una relacion entre un cliente (objeto activo) y un servidor (objeto pasivo) persista a traves de una temporalidad mas larga.\n\nLa colaboracion ocurre cuando una clase esta constatemente interactuando con otra para poder cumplir su servicio.\n\nEn esta relacion, los asociados no hacen mas que ofrecer los servicios, la asociacion no se encarga de administrar nada de ellos mas que usar los servicios cuando les sea necesario.\n\n## Caracteristicas\n### Temporalidad - Media\nLa asociacion puede nacer solo con una de las partes y despues integrar a otro asociado o cambiarlo cuando sea necesario.\n\n### Fidelidad - Baja\nDebido a que la asociacion no crea sus partes sino que en algun momento se le es asignada otro asociado para que ejecuten sus funciones\n\n### Versatilidad - Media\nEs estricto respecto a con quien esta asociado en particular para realizar su funcion en un momento, respeta a quien se referia y le permite en algun punto cambiar al asociado.\n\n## Representacion en UML y Codigo\n### UML\n![RelacionAsociacion.png](files/RelacionAsociacion.png)\n\n### Codigo\n```Java\nclass Asociacion {\n\tprivate Asociado asociado;\n\n\tpublic Asociacion() {\n\t\tthis.asociado = null; // Puedo iniciar sin asociado tambien y posteriormente asociarme mediante el metodo set.\n\t}\n\n\tpublic Asociacion(Asociado asociado) {\n\t\tthis.setAsociado(asociado); // Aveces naci ya asociado y se me puede cambiar despues, a veces no naci asociado, pero el metodo set siempre esta disponible.\n\t}\n\n\tpublic void setAsociado(Asociado asociado) {\n\t\tthis.asociado = asociado; // Metodo set para actualizar mi asociado\n\t}\n\n}\n```\n\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Relacion-de-Composicion":{"title":"Relacion de Composicion","content":"Siguiendo las caracteristicas de las [Relaciones entre Clases por Colaboracion](notes/Relaciones%20entre%20Clases%20por%20Colaboracion.md). La relacion por composicion tendria las siguientes:\n\n\n## Caracteristicas\n### Temporalidad - Alta\nRegularmente, este tipo de relaciones vinculan **toda la longevidad del todo con la longevidad de la parte**. Es decir, el todo no es el todo sin sus partes.\n\nUn ejemplo podria ser \"el humano promedio tiene un sistema circulatorio, nervioso, digestivo y si le quitas uno, deja de ser un humano promedio\":\n\n### Fidelidad - Alta\nLa parte es creada dentro del todo y el todo no puede ser sin su parte especifica.\n\nLos sistemas de un humano promedio no pueden ser compartidos de forma concurrente por otro humano,\n\n### Versatilidad - Baja\nLos sistemas del humano promedio son dise√±ados para si mismo y no pueden ser intercambiados por maquinas u otros porque dejaria de ser un humano promedio.\n\n**Por lo anterior, la composicion es una composicion fuerte. Una parte no puede existir sin el todo ni viceversa.**.\n\n## Representacion en UML y Codigo\n### UML\n![RelacionComposicion.PNG](files/RelacionComposicion.PNG)\n\n### Codigo\nEl todo de alguna manera se encarga de instanciar a su parte.\n\n```Java\nclass Todo {\n\tprivate Parte parte;\n\n\tpublic Todo() {\n\t\tthis.parte = new Parte(); // El mismo todo instancia su parte con alta fidelidad, alta temporalidad y poca versatilidad.\n\t}\n}\n```","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Relacion-de-Uso-Dependencia":{"title":"Relacion de Uso (Dependencia)","content":"Este tipo de relacion ocurre cuando una clase A utiliza los servicios de una clase B en algun punto especifico sin mayor dependencia a futuro.\n\n## Caracteristicas\n### Temporalidad - Baja\nEs momentanea, solo por un ratito y no dura casi nada mas que para satisfacer una necesidad especifica en un momento especifico.\n\n### Fidelidad - Variante\nSe puede utilizar algo tanto publico como privado, pero como la relacion es tan corta no resulta tan relevante.\n\n### Versatilidad - Alta\nEl usador puede utilizar a cualquiera que ofrezca los mismos servicios que el usado, sin importar quien sea.\n\n## Representaicon en UML y Codigo\n### UML\n![RelacionUso.png](files/RelacionUso.png)\n\n### Codigo\n```Java\nclass Usador {\n\t// Puede haber un usado por parametro\n\tpublic Usador(Usado usado) { \n\t\tUsado local = new Usado(); // O un usado local que me sirve para inicializar otras cosas\n\t\t//...\n\t}\n}\n```","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Relaciones-entre-Clases-Gestion-de-Dependencias":{"title":"Relaciones entre Clases (Gestion de Dependencias)","content":"Dependencia y Relacion son sinonimos en la [Programacion Orientada a Objetos](notes/Programacion%20Orientada%20a%20Objetos.md). Ambas se refieren a las colaboraciones que pueden existir entre las clases de una aplicacion.\n\nExisten dos grandes tipos de relaciones.\n1. Relaciones por Colaboracion (Funcionalidad)\n2. Relaciones por Herencia (Reusabilidad)\n\n## [Relaciones entre Clases por Colaboracion](notes/Relaciones%20entre%20Clases%20por%20Colaboracion.md)\n- [Relacion de Composicion](notes/Relacion%20de%20Composicion.md)\n- [Relacion de Agregacion](notes/Relacion%20de%20Agregacion.md)\n- [Relacion de Asociacion](notes/Relacion%20de%20Asociacion.md)\n- [Relacion de Uso (Dependencia)](notes/Relacion%20de%20Uso%20(Dependencia).md)\n\n## [Relaciones entre Clases por Herencia](notes/Relaciones%20entre%20Clases%20por%20Herencia.md)\nBusca crear jerarquias de clasificacion sin obligar a que exista una colaboracion.\n- Relacion de Herencia por Extension\n- Relacion de Herencia por Especializacion\n- Relacion de Herencia por Limitacion\n- Relacion de Herencia por Construccion","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Relaciones-entre-Clases-por-Colaboracion":{"title":"Relaciones entre Clases por Colaboracion","content":"Son un tipo de [Relaciones entre Clases (Gestion de Dependencias)](notes/Relaciones%20entre%20Clases%20(Gestion%20de%20Dependencias).md) que ocurre cuando existe un paso de mensajes entre clases. Ya sea que una se encuentre como valor de retorno, parametro, atributo privado, u otro.\n\nResponde al acronimo *tiene un*\n- A tiene un B ?\n## Caracteristicas\nTodas las relaciones por colaboracion tienen tres grandes caracteristicas.\n1. Fidelidad. ¬øCon qui√©n colaboro, colabora solo conmigo o con muchos otros?\n2. Temporalidad. ¬øCu√°nto tiempo dura mi colaboracion?\n3. Versatilidad. ¬øPuedo intercambiar mi colaborador por otro de caracteristicas similares?\n\n## Tipos\n- [Relacion de Composicion](notes/Relacion%20de%20Composicion.md)\n- [Relacion de Agregacion](notes/Relacion%20de%20Agregacion.md)\n- [Relacion de Asociacion](notes/Relacion%20de%20Asociacion.md)\n- [Relacion de Uso (Dependencia)](notes/Relacion%20de%20Uso%20(Dependencia).md)\n\n![RelacionesDeColaboracion.png](files/RelacionesDeColaboracion.png)","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Relaciones-entre-Clases-por-Herencia":{"title":"Relaciones entre Clases por Herencia","content":"Es un tipo de relacion que existe entre dos clases cuando se identifican factores en comun. Se obtiene una clase de mas alto nivel y se crea una peque√±a jerarquia.\n\nResponse al acronimo *es un*:\n- A es un B ?\n\n## Herencia por Especializacion\nSe tiene una clase padre que tiene elementos comunes, sin embargo, las clases hijas se especialziaran con unas operaciones sobre sus propios datos \n\nRectangulo es una Figura ?\n## Herencia por Extension\nLa clase base es un concepto mas abstracto que las clases hijas. Las clases hijas extienden mas el concepto del que heredan, a√±aden mas operaciones y lo extienden\n\nUna correa tiene operaciones para sostener cosas, una correa de perro tiene las mismas operaciones que una correa pero con distinto tama√±o, de otro material, etc.\n\n## Herencia por Limitacion\nLa clase base tiene un conjunto de operaciones abstractas que deben ser implementadas por las clases hijas y estas no la implementan porque simplemente no cuentan con esa posibilidad\n\nEs una herencia completamente desaconsejada y puede ser resuelta utilizando ... \n\nUn ejemplo seria la clase base Ave la cual tiene un metodo volar y la clase hija pinguino que como no puede volar no implementa el metodo\n\n## Herencia por Construccion\nLa clase base es en realidad una parte (es decir, una composicion) de la clase hija y se trata de forzar una herencia.\n\nEs un aherencia completamente desaconsejada debido a que incrementa la complejidad de como se ve un sistema.","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Requisitos":{"title":"Requisitos","content":"Es uno de los primeros procesos en el [Desarrollo de Software](notes/Desarrollo%20de%20Software.md). Ocurre cuando se establece comunicacion entre los [Stakeholders](notes/Stakeholders.md) y el equipo de desarrollo. \n\nSu objetivo principal es convertir las necesidades de los clientes en requisitos claros que puedan ser interpretados por el equipo de desarrolladores. Por tanto, es necesario tener un buen conocimiento del [Dominio de Negocio](notes/Dominio%20de%20Negocio.md) de la empresa que busca el Software.\n\nPara realizarlo se utiliza distintas practicas, incluso traidas de la ingenieria (muchas de ellas traidas de *requirements engineering*),\n\nEn caso de no tenerlos se puede incurrir en saber que es lo que se tiene que hacer pero fallar al proponer las soluciones posibles para lograrlo.\n\n![[files/RequisitosFallo.png]]\n\n## Lidiar con Cambios en los Requisitos\n1. Hacer que todos entiendan los costos en los que se incurre. Tanto de tiempo como de dinero.\n2. Establecer un plan de control para satisfacer las demandas de cambios. Los desarrolladores estaran felices porque sabran cuando llegan nuevos pedidos y los clientes porque se sentiran escuchados.\n3. Utilizar metodologias que se adapten bien a los cambios. Usualmente entre las [[notes/Metodologias de Desarrollo]] las que mas son adaptables a cambios son las Iterativas.\n4. Mantener en mente la [[notes/Definicion del Problema en un Desarrollo de Software]] para saber si algo es trivial o no\n\n## Referencias\n- [[reference/@ Code complete]]\n- [[reference/@ The essentials of modern software engineering_ Free the practices from the method prisons!]]","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Rest-Pattern-en-JavaScript":{"title":"Rest Pattern en JavaScript","content":"Utiliza la misma sintaxis del [[notes/Spread Operator en JavaScript]], sin embargo, hace lo contrario, recolecta multiples elementos y los condensa en una sola estructura, un array.\n\n**Notemos que se utuliza donde pondriamos variables separadas por comas**.\n\nEn este caso, para reconocerla, podemos ver que los tres puntos '...' se encuentran del **lado izquierdo de la asignacion**.\n\nPara utilizarla, podemos combinarla de forma simple con el [[notes/Destructuring en JavaScript]].\n\n```JavaScript\nconst array = [1, 2, 3];\nconst [valor, ...otrosValores] = array; // valor = 1, otrosValores = [2, 3]\n```\n\nSe utiliza el sobrenombre rest pattern debido a que **recolecta el resto de elementos de una estructura de datos**.\n\n## Caracteristicas\n- Solo puede existir un rest pattern en una asignacion\n- Debe ser el ultimo elemento del destructuring.\n\n## Aplicado a Funciones\nPpodemos aplicarlo a los parametros, al aplicarlo se les llama **rest parameters** y de esta forma podemos pasarle una cantidad indefinida de parametros a una funcion.\n\n```JavaScript\nconst sum = function(...numbers) {\n\tlet sum = 0;\n\tnumbers.forEach(number =\u003e sum += number);\n\tconsole.log(sum);\n}\n```","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Scope":{"title":"Scope","content":"Alcance que tiene una variable tomando en cuenta desde donde fue declarada. Pueden ser globales, de funcion o de bloque.\n\nPor tanto si decimos el Scope de una Variable nos referimos a los espacios desde donde puede ser accedida\n\nScoping es el termino que se usa para referirse al orden y alcance que tiene cada una de las variables del codigo.\n\n### Tipos\n#### Global\n- Son declaradas fuera de cualquier funcion\n- Pueden ser accedidas desde cualquier parte del programa\n\n#### Funcion\n- Son declaradas dentro de una funcion\n- Pueden ser accedidas solo desde dentro de una funcion\n- Si se declaran variables con la keyword *var* estas siempre tendran scope de funcion, nunca de bloque.\n\n#### Bloque\n- Son declaradas dentro de un bloque de codigo, es decir, entre {}.\n- Pueden ser accedidas solo desde dentro del bloque\n- Solo sirve con las variables declaradas mediante *let* y *const*.\n\n### Scope Chain\nUn scope chain se refiere a la cadena de herencia que ocurre con los scopes (y su contenido, variables) cuando se tienen multiples estructuras anidadas. Este forma parte fundamental del [[notes/JavaScript Execution Context]]\n\nLa funcion interna tendra acceso a las variables de todos los scopes superiores a ella (incluyendo argumentos en [[notes/JavaScript]])..\n\n![[files/ScopeChain.png]]\n\nAl proceso que ocurre cuando una funcion trata de buscar una variable en sus scopes superiores se le llama *Variable Look-up*.","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Sentencias-en-Programacion":{"title":"Sentencias en Programacion","content":"Una sentencia es una instruccion a ejecutar por el compilador en un lenguaje de programacion.\n\nEs una unidad minima de la cual podemos partir para crear software. \n\nUn if por ejemplo esta compuesto por una [[notes/Expresion de Programacion]] y por un conjunto de sentencias alternativas a ejecutar en sus bloques if else\n\n```Java\n// ... Sentencias\nif (expresion) {\n\t// sentencias\n} else {\n\t// Sentencias alternativas\n}\n// Mas sentencias\n```\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Sets-en-JavaScript":{"title":"Sets en JavaScript","content":"Un set es una estructura de datos que no permite ningun elemento repetido. En JavaScript fue introducido en ES6 junto con los Maps en JavaScript.\n\nPara crear un nuevo set utilizamos la instanciacion de un objeto y como parametro le podemos pasar un objeto que sea Iterable (Como un array o un String).\n\n```JavaScript\nconst set= new Set(array);\n```\n\n- En caso de tener elementos duplicados, el Set se encargara de eliminarlos a todos ellos. \n- Es una estructura desordenada, por tanto, no le importan el orden de los elementos y nunca esta garantizado que los de en determinado orden.\n- No hay forma de obtener valores desde un Set.\n- Son **iterables**\n\n**Son mayormente utilizados para filtrar los elementos de un array y quedarse con los valores unicos**. Combinandolo con el [[notes/Spread Operator en JavaScript]] que funciona sobre todos los iterables podemos obtener un array de vuelta!\n\n```JavaScript\nconst array = [1, 2, 3, 3, 1, 4, 1];\nconst uniques = [...new Set(array)];\n```\n\n## Metodos Utiles\n```JavaScript\nset.size // Devuelve el tamano de la estructura\nset.has(elem) // Devuelve un booleano es como includes de los arrays\nset.add(elem) // agrega un elemento al array\nset.remove(elem) // remueve un elemento del array\n```\n\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Shallow-Copy":{"title":"Shallow Copy","content":"Tipo de clonado de un objeto que ocurre cuando solo se logra clonar los atributos superficiales, las referencias internas que componen al objeto no cambiaran, solo lo superficial.\n\n### JavaScript\nLa forma de hacer shallow copy en JavaScript es utilizando el metodo Object.assign.\n\n```JavaScript\nconst original = {\n\tfirstName: 'Jaime',\n\tlastName: 'Ayala',\n\tfamily: ['Pepe', 'Mari']\n};\n\nconst clone = Object.assign({}, original);\nclone.lastName = 'Perez'; // Solo cambia clone\nclone.family.push('Luz'); // Cambia clone y original\n\nconsole.log(original);// Jaime Ayala ['Pepe', 'Mari', 'Luz']\nconsole.log(clone); // Jaime Perez ['Pepe', 'Mari', 'Luz']\n```","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Short-Circuiting-en-JavaScript":{"title":"Short Circuiting en JavaScript","content":"En JavaScript los operadores logicos AND y OR (\u0026\u0026 e ||) sirven para hacer mas que comparaciones logicas.\n\nJavaScript posee un mecanismo que le permite utilizar cualquier valor mas alla de boleanos en ambos lados de la evaluacion logica. Este mecanismo es conocido como short-circuiting.\n\nEsto lo hace utilizando las reglas de los truthy y falsy values.\n\n## OR Short Circuiting\nEste mecanismo consiste en que la expresion logica devolvera **el primer termino que sea truthy** y en caso de encontrar falsy values seguira buscando hasta encontrar uno.\n\n```JavaScript\nconsole.log(3 || 'Jaime') // 3 debido a que es un truthy value\nconsole.log('' || 'Jonas') // Jonas debido a que '' es un falsy value y no es devuelto\nconsole.log(true || 0) // true debido a que es un truthy value\nconsole.log(undefined || null); // Aunque los dos sean falsy values el ultimo es devuelto\n```\n\nEsto es util debido a que nos podria dar un valor por defecto para una variable\n\n```JavaScript\nconsole.log(obj.number || -1); // imprime obj.number o -1 si no existe\n```\n\n## AND Short Circuiting\nEste mecanismo es exactamente igual al OR Short Circuiting, solo que esta vez, devolvera **el primer termino que sea falsy** y en caso de encontrar falsy values seguira buscando hasta encontrar uno.\n\n```JavaScript\nconsole.log(0 || 'Jaime') // 0 debido a que es falsy\nconsole.log('Jaime' || '') // '' debido a que es falsy\nconsole.log('jaime' || 23) // 23 debido a que no hay ningun valor falsy\nconsole.log(0 || '') // 0 debido a que es el primery falsy\n```","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Spread-Operator-en-JavaScript":{"title":"Spread Operator","content":"El Spread Operator es un operador que sirve para aplanar los elementos de un array, funciona como recorrer todo el array y colocarlo en variables independientes utilizando lel [[notes/Destructuring en JavaScript]], sin embargo, nos da una sintaxis super simple y limpia de trabajo.\n\n**Notemos que se utiliza donde se colocarian valores separados por comas.**\n\nTiene una sintaxis muy similar al [[notes/Rest Pattern en JavaScript]], sin embargo, el operador de los tres puntos '...' se encuentra del **lado derecho de la asignacion**.\n\n```JavaScript\nconst array = [7, 8, 9];\nconst newArray = [1, 2, ...array]; // 1, 2, 7, 8, 9\n\nconsole.log(newArray); // [1, 2, 7, 8, 9]\nconsole.log(...newArray); // 1 2 7 8 9\n```\nEsta sintaxis como **resultado da todos los valores del array separados por comas**, por tanto, no crea ninguna variable.\n\n**Este operador funciona en todos los objetos que son 'iterables'**. Estos son arrays, strings, mapas, sets y otros.\n\nSin embargo, apartir de ES6 tambien funciona con objetos.\n\n```JavaScript\nconst oldObj = {\n\tnombre: 'Rest'\n\tdireccion: '123'\n}\n\nconst newObj = {\n\t...oldObj, // Todo lo de oldObj \n\tpropied1: 2323, \n\tcreacion: 1999\n}\n```\n\nSe utiliza el sobrenombre spread porque **expande (aplana) los elementos del array**.\n\n## Aplicado a Funciones\nPodemos aplicar un aplanmiento directo a un array que pasemos a una funcion como parametros\n\n```JavaScript\nconst sum = function(number1, number2) {\n\tconsole.log(number1 + number2);\n}\n\nconst array = [2, 3];\nsum(...array);\n```","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Spring-IoC-Container":{"title":"Spring IoC Container","content":"El IoC, tambien llamado patron Hollywood jajaja, \"no nos llames nosotros te llamaremos\". Es una forma de ceder el control del flujo del programa al framework en vez de al codigo.\n\nSe utiliza la Inyeccion de Dependencias, de esta manera se evita la construccion de objetos y se delega la construccion a Spring\n\nEstyo reduce el acoplamiento entre interfaz e implementacion. Ademas permite tener un punto de control para cambios de implementacion\n\nAnotaciones interesantes para la Inyeccion de Dependencia\n- @Autowired. Deja al contenedor de spring insertar el bean de forma automatica\n- @Qualifier. Especifica al contenedor de spring el bean a insertar por nombre, en un bean permite especificar el nombre que tiene\n- @Primary. Marca un bean como el primario para ser elegido en caso de ambiguedad.\n- @Lazy. Especifica que la inyeccion no se realizara sino hasta que sea neesario\n- @ConditionalOnProperty. Es mucho mas potente, permite colocar expresiones que permiten elegir un bean o otro basado en ellas.\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Stakeholders":{"title":"Stakeholders","content":"Son personas las cuales guardan algun tipo de relacion con la empresa (Inversionista, due√±o, experto, etc) y que, por tanto, les interesan las decisiones que se tomen dentro de ella, debido a que estas les afectan de una u otra forma.\n\nInspirado de: [The Essentials of Modern Software Engineering](reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/main.md)","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Swagger":{"title":"Untitled Page","content":"---\ntitle: \"Swagger\"\ndate: \"2022-10-08 19:23\"\ntags: \n  - programming\ndraft: fakse\n---\nEs un conjunto de aplicaciones que sirven para generar codigo y documentacion interactiva siguiendo el estandar de OpenAPI.\n\n## Integracion en Spring\nEn Spring puede ser integrada para hacer ingenieria inversa, es decir, generar un documento Swagger a partir de una API ya establecida. Para ello existe una libreria llamada springfox\n\nLa libreria nos a√±ade anotaciones para poder documentar la interfaz generada de Swagger.\n- @ApiModel - Documentacion para el modelo\n- @ApiModelProperty - Documentacion para un atributo del modelo\n- @Api - Documentacion para un controlador\n- @ApiOperation - Documentacion para un metodo de un controlador\n- @ApiResponse - Documentacion para un metodo de un controlador, pero especifico para los codigos de respuesta\n- @ApiParam - Documentacion para los parametros de un metodo\n\n\nAdemas, es buena practica guardar el YAML que te da esta ingenieria inversa como documentacion para referencias futuras.\n\n## Referencias\n[Curso de microservicios con Java y Spring Boot](reference/@%20Curso%20de%20microservicios%20con%20Java%20y%20Spring%20Boot.md)","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/Valores-vs-Referencias-en-Funciones-de-JavaScript":{"title":"Valores vs Referencias en Funciones de JavaScript","content":"Es importante entender como funciona el paso por valor y paso por referencia en JavaScript.\n\nCuando a una funcion se le pasa una referencia (una estructura de datos o un objeto) le estamos pasando la misma referencia que existe dentro de cualquier otro contexto que se utilice la misma.\n\nEs decir, que si mutamos el objeto dentro de la funcion, lo mutaremos para quien sea que tenga la misma referencia (Es decir, a otros [[notes/JavaScript Execution Context]], en especifico, afecta a todos los [[notes/Scope]])\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/notes/this-en-JavaScript":{"title":"this keyword","content":"Es una referencia creada para referirse al objeto actual (En el caso de [[notes/JavaScript]], al [[notes/JavaScript Execution Context]] actual).\n\nEn JavaScript esta referencia es dinamica y cambia dependiendo de la forma en que se llame a una funcion. \n\n### Metodo\nSi se llama como metodo (propiedad de un objeto) la keyword 'this' hara referencia al objeto que la contiene y por tanto, tendra acceso a sus otras propiedades (otras funciones  y otros atributos.)\n\n### Llamada simple\nSi se llama una funcion simple desde cualquier punto esta tendra el valor de 'undefined' en el caso del strict mode y Window en caso contrario.\n\n![[files/thisUndefinedOrWindow.png]]\n\n### Arrow Function\nEl arrow function no tiene keyword this, por tanto, es como si todo el tiempo estuvieramos hablando del this desde donde se le declaro. Por ejemplo, si la tratamos de utilizar dentro de un objeto literal lo mas seguro esque si usamos 'this' nos refiramos al objeto window (debido a que desde ahi se esta declarando al objeto) y si utilizamos el strict mode, obtendremos undefined.\n\n![[files/thisArrowFunc.png]]\n\nPor eso esque es **buena practica no utilizar arrow functions como metodos**.\n\n### Llamada desde cualquier otro elemento\nSi se trata de una expresion funcional y se le llama desde cualquier otro elemento menos una llamada simple la keyword this apuntara al objeto que la llamo.  \n\n![[files/thisDesdeBoton.png]]\n\nEn este caso, el codigo devuelve el elemento 'boton', por tanto, es posible modificar su lista de clases.\n\n### Resumen\n![[files/thiskeywordjavascript.png]]\n","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/reference/The-essentials-of-modern-software-engineering-Free-the-practices-from-the-method-prisons/main":{"title":"The essentials of modern software engineering: Free the practices from the method prisons","content":"Libro que habla sobre las practicas y metodos creados por el SEMAT (Software Engineering Methods And Theory) con el fin de buscar una serie de practicas y consejos bases sobre las cuales construir metodologias de desarrollo agiles. Estandarizado en 2013 por la OMG como \"Essentials\", el libro entra en detalle sobre su uso, los problemas que resuelve y una aplicacion efectiva.\n\n### [Rese√±a completa + Valoracion](es/reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/resenia.md)\n### [Notas + Resumen](es/reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/notas.md)","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/reference/The-essentials-of-modern-software-engineering-Free-the-practices-from-the-method-prisons/notas":{"title":"The essentials of modern software engineering: Free the practices from the method prisons - Notes","content":"*[Volver a la Nota Principal](es/reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/main.md)*\n## 1. From Programming to Software Engineering\nEste capitulo en particular busca definir de forma clara los conceptos de programador, desarrollador de software e ingeniero de software. Nos dara sus diferencias y semejanzas para poder distinguir y transicionar de una posicion a otra.\n\n### 1.1 Beginning with Programming\n**Programacion** se considera como sinonimo de *implementacion* o *codificacion*, este proceso no incluye ningun tipo de debug, o pruebas, se limita a la escritura del codigo fuente de una aplicacion.\n\n**Desarrollo de Software** es una actividad que integra la *toma de requisitos*, el *dise√±o*, la *implementacion* (programacion), las *pruebas* y el *deployment*.\n\n**Ingenieria de Software** es unir conceptos de la disciplina de *ingenieria* con el *desarrollo de software*, de modo que se obtengan todas las ventajas de ella y se agreguen a un proceso ya establecido.\n\nPara esta parte, en la jornada de Smith el ya ha aprendido todo lo basico de programacion, desde programacion estructurada hasta programacion orientada a objetos y un par de lenguajes (Java y JavaScript).\n\n### 1.2 Programming is Not Software Engineering\nHacking y Desarrollo profesional son dos cosas muy distintas y son dos acercamientos muy distintos que podemos tener a la programacion de un software.\n\n**Desarrollo Profesional** es cuando escribes el codigo de forma que refleja tu analisis y pensamiento para resolver determinado problema, de esta manera, entiendes el codigo que acabas de escribir.\n\n**Hacking** es cuando intentas codigo casi al azar hasta lograr alcanzar el objetivo que tienes sin siquiera saber como funciona.\n\nEl Desarrollo Profesional es una parte vital de la Ingenieria del Software, adicionalmente, esta ultima tiene muchas mas actividades relacionadas que no son solo escribir codigo.\n\nPara esta parte, Smith ya ha trabajado en un proyecto con compa√±eros y se dio cuenta que programar solo forma una parte del ciclo, llego a la conclusion de que se tienen que tener unos requisitos, se llega a un consenso mediante lluvia de ideas, se desarrolla y finalmente se mantiene, algo todavia muy alejado de la realidad.\n### 1.3 From Internship to Industry\nUsualmente, en un equipo de desarrollo podemos encontra dos tipos de personas:\n- Aquellas que dictan y solicitan lo que el software debe hacer\n- Aquellas que lo codifican, prueban y entregan\n\n La comunicacion entre Managers o personas con dominio sobre el problema del que se trata (primer grupo) hablan una jerga muy particular, usualmente, esta varia de empresa a empresa debido al dominio de la misma.\n\nComo leccion, para ser un buen ingeniero de software, no solo debes conocer la forma de desarrollo de tu equipo sino tambien el dominio del problema de tu empresa.\n\nUsualmente el trabajo en una empresa no se va a tratar de escribir codigo nuevo, si no de mantener y revisar el ya existente, ademas, para asegurarse de que no rompiste nada siempre hay que realizar testing a todos los cambios que hagas.\n\nMientras mas vas avanzando en los puestos de desarrollo, mayor es la cantidad de Sr (Seniority) que se te atribuye, conforme esta crece lo hacen proporcionalmente tus responsabilidades de liderazgo y comunicacion con los Stakeholders (Empresarios, jefes, CEOs, etc).\n\nUna buena comunicacion con los Stakeholders se basa en llegar a terminos y practicas comunes de modo que permitan el flujo de trabajo de todos los miembros del equipo, basandose en unos buenos valores (en tiempo, forma y de alta calidad). Engloban cosas como revisiones, correccion de bugs, recibimiento de feedback y otras habilidades para alcanzar esas metas particulares que ambos tienen en mente.\n### 1.4 Journey into the Software Engineering Profession\nLa experiencia en la universidad solo son los fundamentos de desarrollo pero carece de los siguientes aspectos:\n- No se realiza mantenimiento al codigo\n- No se implementan nuevas caracteristicas\n- No se escala para el uso de mas usuarios\n\nIgnorando las grandes compa√±ias de tecnologia como Facebook, Amazon, Twitter, Netflix, Shopify, etc. Una compa√±ia promedio seguramente buscara tener un departamento de desarrollo para satisfacer una necesidad suya, de sus clientes o de sus usuarios finales.\n\nUn joven estudiante seguramente estara mas interesado en conocer las tecnologias, las computadoras, las redes con las que se trabaja y no tanto con el dominio (negocio) de la empresa para la que va a trabajar, por tanto, no le interesaran las practicas de desarrollo, los valores u otras cosas relacionadas.\n\nLos equipos del trabajo son la unidad minima con la que se construye un software, si es un software grande, usualmente distintos equipos trabajaran de forma sincronizada en distintas funcionalidades.\n\nPara desarrollar un software primero necesitamos los requisitos, saber que es lo que se necesita hacer y revisar con los expertos para corregir cualquier mal funcion o recibir feedback respecto a las ya existentes.\n\nHay una disciplina de la ingenieria dedicada exclusivamente a los requisitos, su interpretacion, como se obtienen y como se piensa y razona sobre ellos, su nombre es *requierements engineering*.\n\nExiste otra disciplina que conforma el **dise√±o** del software, se refiere a la calidad que se coloca en el codigo de modo que le permita ser mantenible, reusable, escalable, etc. \n\nUn dise√±o se puede estudiar de dos formas:\n- Viendo las clases, modulos, funciones, unidades del codigo en cuestion.\n- Utilizando una herramienta de diagramas que te permita modelar tu codigo.\n\n*Me parecio interesante como hace mencion del dise√±o como la disciplina en la cual se le da forma al codigo para que sea de calidad / mantenible, es decir, que sea facil de escalar, de entender, de probar, de cambiar, es como lo que nos comentaba el profesor Luis en el curso de Recurrencia en el Desarrollo de Software. Lo que se busca finalmente es REDUCIR SU COMPLEJIDAD*.\n\nNo son las unicas tareas que debe hacer un ingeniero de software, usualmente se agregan dos que son las **pruebas** y el **despliegue**.\n\nSe podria decir entonces que la Ingenieria del Software es una disciplina replicable y evolucionable, que busca convertir las necesidades de un cliente en requisitos claros, para que desarrolladores con las habilidades sociales como para comunicarse y escribir codigo de calidad (es decir, en modulos que tengan alta mantenibilidad) lo dise√±en, lo desarrollen, lo prueben, reciban feedback, lo corrigan y repitan, hasta lograr el producto deseado por los clientes, en ese momento, ocurrira el despliegue.\n\n## Resumen - From Programming to Software Engineering\nProgramar es muy diferente a desarrollar software, de hecho, la programacion es solo una actividad del desarrollo, un ciclo completo del desarrollo de Software se veria asi:\n- Disciplina de Requisitos\n- Disciplina de Analisis y Dise√±o\n- Disciplina de Programacion\n- Disciplina de Pruebas\n- Disciplina de Despliegue\n\nLa Ingenieria del Software no es mas que la integracion de discplinas de la ingenieria al proceso del desarrollo de software, esto con el fin de que sea una actividad replicable, mejorable, organizada y facil de llevar.\n\nExiste una diferencia muy clara entre **desarrollo profesional** y el **\"hacking\"**, la ultima se refiere a cuando se utiliza codigo de forma casi aleatoria sin saber lo que hace hasta lograr obtener el resultado esperado, la primera ocurre cuando analisas y escribes el codigo de forma clara, de modo que, cuando lo integres con el resto del codigo sepas que es lo que esta haciendo.\n\nEl conocimiento de la jerga que se encuentra en el dominio de la empresa para la que trabajas es fundamental para comunicarse de forma efectiva con los expertos.\n\nConforme se avanza en la industria del desarrollo del Software (Es decir, se incrementa el Seniority) las habilidades de comunicacion juegan un rol cada vez mas importante. Entre ellas podemos decir que resaltan el liderazgo de un equipo y la comunicacion con los Stakeholders (o expertos) para la toma de requisitos.\n\nLa toma de requisitos puede ocurrir de distintas formas, ya sea que se te pida copiar a otro software, que se te de un papel o una simple idea. De hecho es tan cambiante e interesante que hay una disciplina de la ingenieria dedicada a ello, *requierements engineering*.\n\nDebido a que los requisitos se encuentran en constante cambio, el dise√±o del codigo del software debe de ser muy modular, con piezas que sean altamente mantenibles (faciles de entender, reusables, probables y cambiables).\n\nLas pruebas toman un rol extremadamente importante, escribirlas garantiza que aunque tu te vayas de la empresa en un futuro tu unidad de trabajo pueda seguir siendo matenible sin problemas.\n\nEl despliegue usualmente no es llevado acabo por desarrolladores, sin embargo, puede serlo, este proceso es cuando se coloca el software en un servidor o en produccion para que los usuarios finales puedan hacer uso de el.\n\n## 2. Software Engineering Methods and Practices\nEste capitulo busca introducir a la estandarizacion de las practicas y metodos utilizados en el desarrollo de software. Principalmente se abordaran tres temas:\n- Problemas que enfrenta nuestra industria\n- Metodologias de Desarrollo en los ultimos 40 a√±os\n- Motivaciones para la esencia\n\n### 2.1 Software Engineering Challenges\nExisten retos en la industria, principalmente los podemos ver en noticias de sucesos que ocurren respecto a fallos en el Software que se encuentra detras de cosas tan importantes como sistemas de seguridad o sistemas financieros.\n\nErrores como estos pueden tratar ser prevenidos pero nunca nunca sera completamente cierto que dejaran de ocurrir o que podran ser evitados del todo.\n\n### 2.2 The Rise of Software Engineering Methods and Practices\nEsta claro que la \"Crisis del Software\" no solo ocurrio por mala programacion, principalmente porque como ya vimos, un desarrollo de software no solo ocurre con programar y ya, tiene sus requisitos, comunicacion, equipos, pruebas, etc.\n\nA traves de la historia han surgido metodos de desarrollo que han servido para cumplir distintas necesidades. A las partes comunes entre un metodo y otro se le ha estandarizado como **practicas**, estas definen la esencia de las metodologias de desarrollo.\n\nEstas practicas pueden ser de distintos tipos para el equipo (ambiente agradable, de facil codificacion, de facil colaboracion), para el cliente (buena toma de requisitos, conocimiento del dominio, conocimiento de la jerga) entre otras.\n\n#### 2.2.1 There Are Lifecycles\n*Al estar leyendo sobre la introduccion a la metodologia de cascada note una similitud con lo que estamos viendo en Informatica V. En la clase vimos el proceso de Planificar, Hacer, Verificar y Actuar, en la metodologia de cascada tenemos Requisitar, Dise√±ar, Implementar y Verificar.*\n\nHubieron dos grandes cambios en las metodologias de la industria del Software.\n\nLa primera fue la introduccion de la metodologia de cascada, esta concebia al desarrollo de software como un proceso lineal en el cual se llevaba acabo la toma de requisitos, el analisis y dise√±o, la coficiacion y las pruebas. Era muy malo seguirla a rajatabla debido a que muchas veces en un proyecto de software los requisitos desde un inicio no llegan a estar completamente claros. Por tanto, al momento de probar y darle a tus usuarios el software se denota que le falta muchisima funcionalidad, le sobran muchisimas cosas cuando parecia que estabas por terminar!\n\nLa segunda fue la introduccion de iteraciones, esta dictaba que solo se tomaban pocos requisitos, se analizaba, se programaba y se probaba, de modo que, en lapsos de tiempo mucho mas cortos se pueda recibir feedback del usuario final para saber como mejorar el producto, y asi avanzar de forma iterativa\n\nEsta ultima fue tomada por metodologias agiles y la metodologia de gestion mas popular hoy en dia es SCRUM, combinada con Agile (iteraciones) forma una potente forma de desarrollar software\n\n#### 2.2.2 There Are Technical Practices\nDesde los inicios del software, los problemas con la toma de requisitos, el analisis, las pruebas, comunicacion, manejo de proyectos y liderazgo han sido recurrentes. Sin embargo, antes estos problemas eran atacados desde la perspectiva del codigo y no se le prestaba mucha atencion a lo demas. Hoy en dia, nos enfrentamos a todos los retos de forma conjunta y constante, es por eso, que surgieron nuevas metodologias para tener un marco de trabajo sobre el cual estructurar los proyectos.\n\n##### 2.2.2.1 The Structured Methods Era\nEl desarrollo se basaba en metodologias estructuradas, esto quiere decir que se percibian las funciones por un lado y los datos por otro. Surgieron marcos de trabajo y grandes proyectos bajo esta metodologia, sin embargo, al mantenimiento y la escalabilidad del software era casi nula, eso fue lo que acabo con esta era.\n\n##### 2.2.2.2 The Component Methods Era\nEl desarrollo se basaba en metodologias por *componentes* (modulos, clases, objetos, espacios, unidades, etc) principalmente influenciado por el paradigma orientado a objetos que concebia a los datos e informacion por igual. Surgieron muchos enfoques, hasta que en 1990 se unifico el modelado creando el UML (Unified Modeling Language) y se impulso la metodologia RUP (Rational Unified Process), todas las demas murieron. \n\nEsta era culmino con la creacion de practicas mas avanzadas como las arquitecturas EA - Enterprise Architecture, SOA Service-Oriented Architecture, PLA - Product-Line Architecture. Hoy en dia las podemos ver con Web Development, Cloud Services, Mobile Development, etc.\n\n##### 2.2.2.3 The Agile Methods Era\nEl desarrollo conservo los conceptos traidos desde la era anterior, se estandarizo practicas tecnicas y humanas para crear un marco de trabajo que funcionara sobre la metodologia iterativa, integro la idea de la mejora continua (Esto lo vemos con la creacion de backlogs, refactoring, TDD, etc) para continuar mejorando el desarrollo agil.\n\n##### 2.2.2.4 There Are People Practices\nAnterior a las metodologias agiles no se le tomaba importancia al capital humano, se consideraba que eso era parte de R.H. Sin embargo, tras la llegada de Agile al mundo de desarrollo se pasaron a crear nuevas practicas (Como el pair programming, las daily standups) que se enfocaban mas en darle las herramientas a los desarrolladores para que pudieran trabajar de forma continua. Es por eso que es el paradigma mas popular hoy en dia.\n\n#### 2.2.3 Consequences\nYa vimos todos los cambios que ocurrieron entre paradigmas, ciclos de vida. los proyectos, por que scrum es popular pero hay que pensar en las consecuencias que ha traido (y probablemente traera) hacer cambios por cambiar:\n- Necesidad de nueva capacitacion. Principalmente debido al cambio de vocabulario, de ideologia, de forma de desarrollar, de metodologias, de cambios en el codigo, etc, etc.\n- Creacion de 10000 metodologias bajo la misma idea, monolitos. Cada autor busca que te cases con su \"forma definitiva de desarrollar software basada en agiles\" sin tomar en cuenta las malas ideas que tienen ni nada\n- Innovaciones incitan cambios. Que bajo cada innovacion que se haga en la industria se necesitaran cambios y dependiendo la metodologia sera de mayor o menor perdida para todos.\n\n¬øTodo esto en que concluye? En perdidas de tiempo, dinero, capital de todos los tipos, tiranias de gobierno en metodologias, etc. En una industria tan grande como el desarrollo de software esto es imperdonable. Para solucionar estos problemas esque se ha la organizacion del SEMAT (Software Engineering Method And Theory)\n\n### 2.3 The SEMAT Initiative\nFue una inciativa iniciada por Ivar Jacobson en 2009 para lograr abstraer una serie de practicas bases (llamadas kernel) sobre las cuales se pudieran desarrollar metodos orientados al desarrollo de software basados en la disciplina de la ingenieria.\n\nLos principales problemas que busca atacar son:\n- Adaptarse a los problemas de nuestra industria (cambio de requerimientos, de gente, de tecnologias)\n- Formar un conjunto de practicas base llamado kernel que sea altamente extensible.\n- Apoyado por gente con relevancia en la industria, empresas, universidades, etc.\n\n### 2.4 Essence: The OMG Standard\nUna vez fueron establecidas como acuerdo todas estas practicas, se busco que fueran altamente adoptadas por todos los desarrolladores del mundo. Para conseguir esto se busco una estandarizacion y en este caso se opto por la OMG.\n\nLa OMG acepto la iniciativa de SEMAT y a todo su conjunto de practicas, consejos y terminos le denomino \"Essencia\".\n\n## Resumen - Software Engineering Methods and Practices\nSe busca introducir un poco de historia sobre los metodos y practicas que se han llevado acabo en los ultimos a√±os de la Ingenieria del Software. Esto con el fin de justificar la creacion del conjunto de practicas, conceptos e ideas propuestos por el SEMAT en 2009 (Estandarizado por la OMG como \"escencia\" en el 2014) de la cual hablar√° el resto del libro.\n\n**Metodo**. conjunto de tareas que se deben realizar para lograr conseguir el desarrollo de un software.\n\n**Practicas**. conjunto de recomendaciones enfocadas a un aspecto de cualquier metodo de desarrollo.\n\n### Ciclo de Vida\nEntre las practicas del ciclo de vida tenemos los metodos de: Cascada e Iterativas.\n\nEl ciclo de vida en cascada sirvio para dar guia y salir de la crisis del software, concebio las primeras ideas de como se tenia que hacer un ciclo de desarrollo, sin embargo no tomo en cuenta el contexto de nuestra industria, en el cual todo cambia y te piden que implementes nuevas funcionalidades, que mantengas, que cambies. \n\nFallo al hacerse un estandar debido a que no supo adaptarse a la industria, sin embargo logro su objetivo de introducir un poco de orden en el caos que habia en el mundo de desarrollo\n\nEl ciclo de vida iterativo concibe que no se tiene que realizar una gran casacada si no que se tiene que ir haciendo por ciclos, se requisita un poco, se dise√±a un poco, se programa un poco, se prueba un poco y se despliega para recibir feedback y volver a empezar.\n\nHoy en dia un ciclo de vida como este es el que se sigue empleando debido a que se adapta a nuestra industria, sin embargo, el problema que enfrentamos esque no hay un conjunto de estandares para referirse a los terminos comunes entre distintos metodos.\n\n### Tecnicas\nEntre las practicas tecnicas tenemos dos formas: Estructuradas, Componentes\n\nLos metodos estructurados se basan en la programacion estructural, en la cual se separan los datos de las funciones y se perciben como conjuntos separados en el cual cualquier dato puede interactuar con cualquier funcion y viceversa. Uno de los metodos mas populares fue el SADT (Tecnica de Analisis y Dise√±o Estructurado)\n\nSe desecho debido a que surgieron grandes proyectos de ella pero muchisimos fallaban y tenian problemas, principalmente de matenibilidad (Creaba codigo que era dificil de leer, dificil de escalar, dificil de cambiar y no se podia probar).\n\nLos metodos en componentes se basan en la programacion orientada a objetos, en la cual se perciben a datos y funciones como un modulo y estos modulos interactuan entre si mediante interfaces publicas. Aqui en vez de permitir que existieran muchos metodos de desarrollo se busco una estandarizacion y se creo UML y RUP.\n\nNo se ha desechado todavia, solo se dejo en el pasado UML y RUP por lo fuerte que era respecto a como se tenian que hacer las cosas, siempre como ellos decian.\n\n### Agiles\nEl conjunto de practicas mas utilizado hoy en dia son las agiles, se basa en las ideas de desarrollo iterativas, usualmente una escritura basada en componentes e incorpora practicas mas alla de solo el desarrollo. Practicas humanas para permitir un buen flujo de trabajo mediante reuniones, backlog, pair programming, etc. Practicas tecnicas permitiendo elegir lenguajes comodos para todo el equipo, con buen hardware. Practicas de codigo como el TDD, BDD, DDD, etc. Ademas de esto simplifica todo lo que se ha aprendido a lo largo de la historia y lo conjunta con un desarrollo por prototipos.\n\n### Escencia y SEMAT\nDebido a la poca estandarizacion, el exceso de reinvencion de practicas con 1000 metodologias agiles, la perdida de tiempo, la perdida de dinero y otros capitales, con el SEMAT se busca crear un conjunto de practicas base (kernel le llaman ellos) que sirvan para que todos puedan crear sus propias variaciones de un metodo que sirva como marco de trabajo para que cada equipo pueda desarrollar software a su manera.\n\nFue aceptado por la OMG en 2014 y fue estandarizado como \"Escencia\". Es de lo que se hablar√° el resto del libro.","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null},"/reference/The-essentials-of-modern-software-engineering-Free-the-practices-from-the-method-prisons/resenia":{"title":"The essentials of modern software engineering: Free the practices from the method prisons - Review","content":"*[Volver a la Nota Principal](es/reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/main.md)*\n\n## üå± Idea Principal\nDebido a que el Software se encuentra presente en todos los aspectos de nuestra vida, este libro da la fundacion principal para construir una metodologia agil, tambien llamada *escencia* para que puedas dirigir equipos y desarrollar software de forma efectiva.\n## üå† Consideraciones\n- **Es un libro sobre METODOLOGIAS de desarrollo**.\n- Asume conocimientos de Programacion Estructurada y Programacion Orientada a Objetos.\n- Los ejemplos se encuentran escritos en Java y JavaScript.\n- Se necesita un minimo de nociones sobre UML.\n- Se necesita un poco de conocimientos sobre otras metodologias agiles (como Disciplined Agile) para hacer un contraste.\n\n## üåå Impacto\nMe ayudo a entender el ciclo de aprendizaje por el que pasaron los autores, las practicas mas comunes en empresas reales hoy en dia y me ayudo a entender las partes que tenia que rellenar en mi conocimiento. Aprendi un poco mas sobre la historia de practicas de desarrollo.\n\nA pesar de lo anterior, **deje de leer el libro**. Mis razones son las siguientes:\n- Parece otra metodologia de desarrollo agil, sin embargo, la mayoria del material para entenderla y aplicarla se encuentra detras de un paywall, \n- No hay proyectos exitosos (o siquiera que hayan fracasado) que utilicen esta metodologia. \n- Se asemeja a RUP pero sin ser tan estricta e incorporando practicas populares agiles (como juegos).\n- Crean terminologia como \"kernel\", \"competencias\" que peca de lo que critica, tener que aprender conceptos de nuevo, gastar recursos, etc.\n\n**Recomiendo los primeros dos capitulos para entender un poco sobre como se trabaja en el mundo real utilizando diferentes metodologias de desarrollo**.\n\n## ‚úç Mejores Frases\n\u003e *Software engineering is the application of a systematic, disciplined, and quantifiable approach to the development, testing, deployment, operation, and maintenance of software systems.*\n\n## *2.5 / 5.0* ‚≠ê\n\nFinalmente, checa las üìî [Notas](es/reference/The%20essentials%20of%20modern%20software%20engineering%20Free%20the%20practices%20from%20the%20method%20prisons/notas.md) que hice sobre los aspectos relevantes del libro!","lastmodified":"2022-10-19T23:41:24.493405316Z","tags":null}}