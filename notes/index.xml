<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on</title><link>https://jaimayal.github.io/digital-garden/notes/</link><description>Recent content in Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jaimayal.github.io/digital-garden/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Analisis y Diseño</title><link>https://jaimayal.github.io/digital-garden/notes/Analisis-y-Disenio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Analisis-y-Disenio/</guid><description>¿Qué es el Diseño? Es un proceso que se realiza en el Desarrollo de Software, su objetivo principal es reducir la complejidad de un software.</description></item><item><title>Antipatron Descomposicion Funcional</title><link>https://jaimayal.github.io/digital-garden/notes/Antipatron-Descomposicion-Funcional/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Antipatron-Descomposicion-Funcional/</guid><description>Tambien llamado Functional Descomposition, concepto creado por William Brown, se refiere a una mala practica que puede ocurrir en el desarrollo de un programa que consiste en romper completamente el Principio General de Asignacion de Responsabilidades.</description></item><item><title>Aprendizaje por Capas</title><link>https://jaimayal.github.io/digital-garden/notes/Aprendizaje-por-Capas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Aprendizaje-por-Capas/</guid><description>Es una tecnica de estudio la cual sirve para aprender y organizar una estructura de conceptos en forma jerarquica de modo que puedas determinar que ideas son clave, cuales son detalles y cuales son extras.</description></item><item><title>Arrays en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Arrays-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Arrays-en-JavaScript/</guid><description>Los Arrays son una de las estructuras de datos mas basicas de los lenguajes de Programacion, y en JavaScript se encuentran implementados de forma dinamica.</description></item><item><title>Atributos</title><link>https://jaimayal.github.io/digital-garden/notes/Atributos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Atributos/</guid><description>Constituyen los datos particulares de una clase, pueden estar soportados por tipos primitivos (int, char, boolean, float, double, etc) o pueden estar soportados por otras clases.</description></item><item><title>Awareness</title><link>https://jaimayal.github.io/digital-garden/notes/Awareness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Awareness/</guid><description>Se describe al awareness como una esfera de cristal que se desliza a traves de las partes de la Mente y permite al consciente pensar sobre ese tema.</description></item><item><title>Buenas Practicas API REST</title><link>https://jaimayal.github.io/digital-garden/notes/Buenas-Practicas-API-REST/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Buenas-Practicas-API-REST/</guid><description>A continuacion una lista de buenas practicas recomendadas al desarrollar una RESTful API
Rest es orientado a recursos, por tanto, poner plurales en las URI Entregar codigos HTTP adecuados No anidar mas de tres niveles de recursos Tener un JSON claro de maximo dos - tres niveles de anidacion Integrar paginacion Integrar Sorting Integrar filtros Documentar la API Preferentemente OPEN API - Swagger Generar links de Navegacion Preferentemente siguiendo HATEOAS Asegurar la API definiendo roles (seguridad) Exportar clientes de demostracion Preferentemente usando POSTMAN Entregar errores definidos y verbosos Validacion de Campos Versionado de la API</description></item><item><title>Call Stack</title><link>https://jaimayal.github.io/digital-garden/notes/Call-Stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Call-Stack/</guid><description>Es la forma en que un compilador trabaja con el llamado y la ejecucion de funciones. Mediante ella, se sabe que funcion se ejecuta primero, quien esta esperando su resultado y quien sigue posteriormente.</description></item><item><title>Clase</title><link>https://jaimayal.github.io/digital-garden/notes/Clase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Clase/</guid><description>Las clases son un concepto basico de la programacion orientada a objetos. Una clase es un molde del cual podemos instanciar (crear, generar, construir, inicializar) objetos de ese tipo en particular.</description></item><item><title>Closures en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Closures-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Closures-en-JavaScript/</guid><description>Es una caracteristica especial de las [[notes/Funciones en JavaScript]] que combina los [[notes/JavaScript Execution Context]], el [[notes/Call Stack]]y los [[notes/Scope]] .</description></item><item><title>Compilacion vs Interpretacion</title><link>https://jaimayal.github.io/digital-garden/notes/Compilacion-vs-Interpretacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Compilacion-vs-Interpretacion/</guid><description>Como se sabe, las computadoras solamente entienden codigo maquina (Binario, regularmente). En la [[notes/Programacion]] existen dos tipos de lenguajes que llegan a este fin de maneras diferentes, los lenguajes Compilados y los Interpretados.</description></item><item><title>Construccion de Software</title><link>https://jaimayal.github.io/digital-garden/notes/Construccion-de-Software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Construccion-de-Software/</guid><description>Se podria decir que es una variante del [[notes/Desarrollo de Software]], sin embargo, tiene un enfoque mucho mas especifico a las partes de [[notes/Programacion]] y [[notes/Pruebas]].</description></item><item><title>Constructores</title><link>https://jaimayal.github.io/digital-garden/notes/Constructores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Constructores/</guid><description>Popularmente llamados &amp;ldquo;constructores&amp;rdquo; son metodos especiales en el codigo que sirven como inicializadores de objetos. Buscan crear instancias especificas de una clase, una instancia en particular tambien es llamada Objeto.</description></item><item><title>DataGrip</title><link>https://jaimayal.github.io/digital-garden/notes/DataGrip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/DataGrip/</guid><description>Cliente inteligente desarrollado por Jetbrains para el manejo de bases de datos.
Herramiente excelente utilizada por un monton de empresas grandes</description></item><item><title>Definicion del Problema en un Desarrollo de Software</title><link>https://jaimayal.github.io/digital-garden/notes/Definicion-del-Problema-en-un-Desarrollo-de-Software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Definicion-del-Problema-en-un-Desarrollo-de-Software/</guid><description>La definicion del problema es el primer paso para lograr tener unos buenos [[notes/Prerequisitos]].
Busca identificar lo que se busca resolver de modo que, si se desarrolla un software, se garantiza que se ataque al problema correcto.</description></item><item><title>Desarrollo de Software</title><link>https://jaimayal.github.io/digital-garden/notes/Desarrollo-de-Software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Desarrollo-de-Software/</guid><description>El desarrollo de Software es toda una serie de procesos que se realizan con el fin de desarrollar un software de fin a fin.</description></item><item><title>Desarrollo de un Monolito en Spring</title><link>https://jaimayal.github.io/digital-garden/notes/Desarrollo-de-un-Monolito-en-Spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Desarrollo-de-un-Monolito-en-Spring/</guid><description>Buenas Practicas Generales Spring Specification sirve para meter filtros a los recursos de forma estandarizada.
En caso de enviar un request malo es buena practica devolver los tipos de request que un endpoint acepta</description></item><item><title>Desarrollo Profesional</title><link>https://jaimayal.github.io/digital-garden/notes/Desarrollo-Profesional/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Desarrollo-Profesional/</guid><description>Ocurre cuando en el proceso de Programacion se analiza y escribe el codigo pensando claramente en cumplir los Requisitos, contrario al Pseudohacking, en el desarrollo profesional se busca agregar unicamente el codigo que se sabe y entiende claramente lo que realiza.</description></item><item><title>Despliegue</title><link>https://jaimayal.github.io/digital-garden/notes/Despliegue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Despliegue/</guid><description>Es uno de los procesos terminales que ocurre en el ciclo de Desarrollo de Software, busca crear un entorno de produccion para que los usuarios finales puedan utilizar el software.</description></item><item><title>Destructuring en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Destructuring-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Destructuring-en-JavaScript/</guid><description>Es un mecanismo de [[notes/JavaScript]] que sirve para desestructurar una estructura de datos hacia multiples variables.
Para esto, existe una sintaxis especial que sirve para declarar multiples variables basada en los elementos que ya tiene una estructura de datos.</description></item><item><title>Diseño en Codigo</title><link>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-en-Codigo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Dise%C3%B1o-en-Codigo/</guid><description>El Diseño en el Codigo es la aplicacion mas basica del diseño en la [[notes/Programacion|programacion]] y contempla dos aspectos generales:</description></item><item><title>Diseño Modular</title><link>https://jaimayal.github.io/digital-garden/notes/-Dise%C3%B1o-Modular/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/-Dise%C3%B1o-Modular/</guid><description>Es el nivel posterior al Diseño en Codigo, aparte de ser codigo bien inspirado del modelo del dominio que es altamente legible, se agrega que son modulos (o piezas) de codigo que tienen un tamaño homogeneo con alta cohesion y poco acoplamiento.</description></item><item><title>Diseño orientado a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/-Dise%C3%B1o-orientado-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/-Dise%C3%B1o-orientado-a-Objetos/</guid><description>Nivel siguiente al $ Diseño Modular, ahora ya no solo son piezas bien inspiradas, legibles, poco acopladas y cohesivas, si no que se aprovechan los mecanismos de Polimorfismo y Herencia + Composicion para hacer jerarquias altamente reusables y flexibles respetando principios de la programacion orientada a objetos.</description></item><item><title>Distraccion</title><link>https://jaimayal.github.io/digital-garden/notes/Distraccion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Distraccion/</guid><description>Es el fenomeno que ocurre cuando dejas que tu Awareness vaya a un lado de tu Mente sin decidir tu de forma consciente a donde fue.</description></item><item><title>Docker</title><link>https://jaimayal.github.io/digital-garden/notes/Docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Docker/</guid><description>Es una tecnologia que te permite crear contenedores (variacion de maquinas virtuales). Propone contenedores muy ligeros que sirven para poder guardar un conjunto de tecnologias, configuracion y todo lo que se necesario para que el funcionamiento de un Software</description></item><item><title>DOM</title><link>https://jaimayal.github.io/digital-garden/notes/DOM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/DOM/</guid><description>El DOM se refiere al Document Object Model. El DOM es una representacion estructurada de un documento HTML, mediante este, podemos cambiar de forma dinamica los estilos y el contenido de los elementos de una pagina web.</description></item><item><title>Dominio de Negocio</title><link>https://jaimayal.github.io/digital-garden/notes/Dominio-de-Negocio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Dominio-de-Negocio/</guid><description>Comprende todos esas actividades que realiza una empresa, organizacion, etc como objetivo para satisfacer necesidades (y usualmente, generar capital).
Cada empresa tiene un diferente dominio de negocio, y entenderlo es de vital importancia para poder aplicar bien la Ingenieria del Software.</description></item><item><title>Enhanced Object Literals en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Enhanced-Object-Literals-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Enhanced-Object-Literals-en-JavaScript/</guid><description>Es una mejora implementada en ES6 a las declaraciones de objetos literales.
Bindear un Objeto dentro de Otro En caso de querer agregar un objeto externo a otro objeto, la sintaxis clasica seria la siguiente</description></item><item><title>Ensayo</title><link>https://jaimayal.github.io/digital-garden/notes/Ensayo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Ensayo/</guid><description>Que es Un ensayo es una pieza de texto escrita como intento para explorar un tema o responder una pregunta.</description></item><item><title>Estado</title><link>https://jaimayal.github.io/digital-garden/notes/Estado/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Estado/</guid><description>Se refiere a los valores que tiene el conjunto de datos que encontramos en un objeto en determinado momento.
Regularmente el estado lo podemos comprobar mediante la interfaz publica especificada en la clase del objeto al que queremos consultar, imaginando que en algun lugar existe la clase fecha podriamos hacer:</description></item><item><title>Estrategias de Clasificacion a partir del Modelo del Dominio (Encontrar clases)</title><link>https://jaimayal.github.io/digital-garden/notes/Estrategias-de-Clasificacion-a-partir-del-Modelo-del-Dominio-Encontrar-clases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Estrategias-de-Clasificacion-a-partir-del-Modelo-del-Dominio-Encontrar-clases/</guid><description>Existen muchas estrategias para encontrar las clases a partir del Modelo del Dominio, veamos las cinco mas relevantes y sus aportaciones:</description></item><item><title>Expresion de Programacion</title><link>https://jaimayal.github.io/digital-garden/notes/Expresion-de-Programacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Expresion-de-Programacion/</guid><description>Una expresion es un componente basico de todo lenguaje de programacion. Es un conjunto de caracteres que puede ser evaluado por el compilador para obtener un valor concreto.</description></item><item><title>Externacionalizacion</title><link>https://jaimayal.github.io/digital-garden/notes/Externacionalizacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Externacionalizacion/</guid><description>La externalizacionc es un proceso en el cual se pasan las propiedades que son ajenas al codigo a archivos de texto plano que pueden ser importados hacia el codigo y poder ser utilizados de forma dinamica</description></item><item><title>Focus</title><link>https://jaimayal.github.io/digital-garden/notes/Focus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Focus/</guid><description>Definicion El Focus es una habilidad que consiste en llevar nuestro Awareness a las partes de la Mente que nosotros queremos a voluntad y de forma consciente.</description></item><item><title>For of Loop en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/For-of-Loop-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/For-of-Loop-en-JavaScript/</guid><description>Es un nuevo tipo de for que fue agregado en ES6 como otra forma de iterar sobre estructuras de datos con una sintaxis mas simple sin preocuparte por contadores o condiciones.</description></item><item><title>Funciones de Alto Orden</title><link>https://jaimayal.github.io/digital-garden/notes/Funciones-de-Alto-Orden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Funciones-de-Alto-Orden/</guid><description>Una funcion de alto orden es toda aquella que recibe como parametro otra funcion, que retorna una funcion o ambas,</description></item><item><title>Funciones de Primera Clase</title><link>https://jaimayal.github.io/digital-garden/notes/Funciones-de-Primera-Clase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Funciones-de-Primera-Clase/</guid><description>Significa que las funciones son tratadas como simples valores, por tanto, pueden ser utilizadas como propiedades, retornadas desde otra funcion o recibidas como parametros desde otras funciones.</description></item><item><title>Funciones en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Funciones-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Funciones-en-JavaScript/</guid><description>Existen tres tipos de funciones principales en JavaScript:
Funciones Declaradas ^4c2966 Expresiones Funcionales Funciones Flecha Todas estas funciones cuentan con dos caracteristicas principales:</description></item><item><title>Fundamentos de la Programacion</title><link>https://jaimayal.github.io/digital-garden/notes/Fundamentos-de-la-Programacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Fundamentos-de-la-Programacion/</guid><description>Los fundamentos de la [[notes/Programacion|programacion]] (En cualquier paradigma) son cuatro:
Abstraccion. Utilizar terminos, conceptos e ideas para representar un concepto de manera fundamental, ignorando lo superfluo.</description></item><item><title>Hoisting</title><link>https://jaimayal.github.io/digital-garden/notes/Hoisting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Hoisting/</guid><description>Es un mecanismo de [[notes/JavaScript]] que sirve para manejar la creacion y flujo de las variables. Lo que hace esque permite a algunas variables ser utilizadas antes de que sean declaradas.</description></item><item><title>IIFE (Expresiones Funcionales Inmediatamente Invokadas) en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/IIFE-Expresiones-Funcionales-Inmediatamente-Invokadas-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/IIFE-Expresiones-Funcionales-Inmediatamente-Invokadas-en-JavaScript/</guid><description>Permite invocar una funcion anonima inmediatamente que se carga la pagina, de modo que no requiere de invocacion ni de ningun otro mecanismo.</description></item><item><title>Ingenieria del Software</title><link>https://jaimayal.github.io/digital-garden/notes/Ingenieria-del-Software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Ingenieria-del-Software/</guid><description>Es la implementacion de disciplinas y practicas de la ingenieria (Como requierements engineering) para mejorar el Desarrollo de Software.
Inspirado de: resenia</description></item><item><title>Interacciones con Objetos en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Propiedades-de-Objetos-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Propiedades-de-Objetos-en-JavaScript/</guid><description>Existen dos formas basicas de interactuar con Objetos en JavaScript y cambiar o obtener sus propiedades.
Notacion con Punto (Member Access) Se especifica el nombre de la propiedad REAL que guarda el objeto y que se quiere obtener.</description></item><item><title>Intercambiar la Visibilidad de un Elemento usando JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Intercambiar-la-Visibilidad-de-un-Elemento-usando-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Intercambiar-la-Visibilidad-de-un-Elemento-usando-JavaScript/</guid><description>Para saber como cambiar la visibilidad de un objeto en JavaScript primero debemos tener un poco de conocimiento sobre la Manipulacion del DOM.</description></item><item><title>JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/JavaScript/</guid><description>JavaScript es un lenguaje de programacion que integra muchas caracteristicas que lo hacen el lenguaje por excelencia de la web.</description></item><item><title>JavaScript Engine y Runtime</title><link>https://jaimayal.github.io/digital-garden/notes/JavaScript-Engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/JavaScript-Engine/</guid><description>JS Engine. El programa principal de un solo hilo que convierte el codigo de JavaScript, en un ejecutable de optimizacion constante.</description></item><item><title>JavaScript Execution Context</title><link>https://jaimayal.github.io/digital-garden/notes/JavaScript-Execution-Context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/JavaScript-Execution-Context/</guid><description>Definicion Un Execution Context es como un contenedor en el cual pueden vivir todas las partes de un codigo de javascript, keywords, objetos, funciones (solo las cabeceras), variables, etc.</description></item><item><title>JavaScript Runtime</title><link>https://jaimayal.github.io/digital-garden/notes/JavaScript-Runtime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/JavaScript-Runtime/</guid><description>Un Runtime funciona como un contenedor en el cual podemos encontrar herramientas que, de la mano de codigo en javascript, pueden lograr comunicarse y brindar funcionalidad especifica a ese runtime.</description></item><item><title>Leer para Entender</title><link>https://jaimayal.github.io/digital-garden/notes/Leer-para-Entender/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Leer-para-Entender/</guid><description>Es la forma de lectura por excelencia que se deberia buscar alcanzar. Esta aplica tecnicas de lectura activa y avisa de las tecnicas de lectura pasiva que deben ser evitadas.</description></item><item><title>Legibilidad del Codigo</title><link>https://jaimayal.github.io/digital-garden/notes/Legibilidad-del-Codigo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Legibilidad-del-Codigo/</guid><description>Es la disciplina encargada de escribir ya no las clases ni las partes especificas, es la parte del diseño que se enfoca a las lineas especificas de cada metodo, clase, etc.</description></item><item><title>Logical Assignment Operators en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Logical-Assignment-Operators-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Logical-Assignment-Operators-en-JavaScript/</guid><description>Son operadores con sintaxis similar a los operadores de acumulacion. En este caso, los operadores logicos de asignacion sirven para comparar [[notes/Propiedades de Objetos en JavaScript]] y aplicar el mecanismo de [[notes/Short Circuiting en JavaScript]] para, por ejemplo, dar un valor por defecto a una propiedad.</description></item><item><title>Loopear sobre Objetos en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Loopear-sobre-Objetos-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Loopear-sobre-Objetos-en-JavaScript/</guid><description>Aunque los objetos en javascript no tienen la propiedad de ser iterables, existe una forma de obtener un conjunto de elementos que si integran esta propiedad.</description></item><item><title>Manipulacion del DOM</title><link>https://jaimayal.github.io/digital-garden/notes/Manipulacion-del-DOM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Manipulacion-del-DOM/</guid><description>La manipulacion del DOM ocurre cuando utilizamos un lenguaje de programacion para interactuar de forma dinamica con un documento de HTML mediante el WEB API que ofrecen los navegadores.</description></item><item><title>Maps en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Maps-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Maps-en-JavaScript/</guid><description>La diferencia entre objetos y mapas esque en los mapas las keys pueden ser de cualquier tipo de dato (No como en los objetos, que solo permiten strings).</description></item><item><title>Mensajes</title><link>https://jaimayal.github.io/digital-garden/notes/Mensajes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Mensajes/</guid><description>Es la base sobre la cual objetos pueden interactuar con otros utilizando sus vistas publicas, es decir, sus interfaces. En ese caso, un objeto activo (El que envia el mensaje) se comunica con un objeto pasivo (El que lo recibe).</description></item><item><title>Mente</title><link>https://jaimayal.github.io/digital-garden/notes/Mente/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Mente/</guid><description>Es un espacio en el cerebro en el cual se guarda todo en forma de archivero o biblioteca, esta divido por areas y se nos permite acceder a ellas mediante los movimientos del Awareness.</description></item><item><title>Metodo</title><link>https://jaimayal.github.io/digital-garden/notes/Metodos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodos/</guid><description>Define las operaciones (funciones, rutinas, operaciones) implantadas dentro de una clase que estaran disponibles para ser ejecutadas por los objetos que se generen de ella.</description></item><item><title>Metodo apply en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodo-apply-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodo-apply-en-JavaScript/</guid><description>Es otro metodo que puede ser aplicado en las funciones que nos sirve para cambiar a donde apunta la keyword [[notes/this en JavaScript]].</description></item><item><title>Metodo bind en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodo-bind-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodo-bind-en-JavaScript/</guid><description>Tal y como los metodos [[notes/Metodo apply en JavaScript]] y [[notes/Metodo call en JavaScript]], este tambien nos permite cambiar la keyword [[notes/this en JavaScript]] de lugar.</description></item><item><title>Metodos call y apply en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodo-call-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodo-call-en-JavaScript/</guid><description>Es un metodo muy util que sirve para aplicar una funcion global como si fuese llamada desde un objeto. De esta forma, hacemos que la keyword [[notes/this en JavaScript]] apunte al objeto en cuestion y no a undefined o window.</description></item><item><title>Metodos de Objetos en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodos-de-Objetos-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodos-de-Objetos-en-JavaScript/</guid><description>Para crear metodos (funciones, rutinas, etc) dentro de un objeto primero debemos entender que estos no son mas que propiedades de un objeto ya existente.</description></item><item><title>Metodos Utiles Arrays en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodos-Utiles-Arrays-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodos-Utiles-Arrays-en-JavaScript/</guid><description>Algunos de los metodos mas basicos para trabajar con Arrays en JavaScript:
push. Apende un elemento al final del array unshift.</description></item><item><title>Metodos y Practicas de Strings en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Metodos-y-Practicas-de-Strings-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodos-y-Practicas-de-Strings-en-JavaScript/</guid><description>Aunque en JavaScript los strings son primitivos estos tienen metodos debido a que aprovecha el mecanismo del boxing.
Por tanto, nuestro string primitivo es enboxeado en el objeto String.</description></item><item><title>Microservicios</title><link>https://jaimayal.github.io/digital-garden/notes/Microservicios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Microservicios/</guid><description>Es un tipo de arquitectura de Software, algunas de sus caracteristicas principales son:
Dividir toda la solucion en multiples modulos llamados microservicios en el que cada uno resuelve una funcionalidad.</description></item><item><title>Mindfulness</title><link>https://jaimayal.github.io/digital-garden/notes/Mindfulness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Mindfulness/</guid><description>Se obtiene como resultado secundario de desarrollar la habilidad del Focus. Consiste en tener la capacidad mental como para decidir a donde va tu Awareness, de tal modo que tambien te permite reaccionar del modo que tu deseas.</description></item><item><title>Modelo del Dominio</title><link>https://jaimayal.github.io/digital-garden/notes/Modelo-del-Dominio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Modelo-del-Dominio/</guid><description>Es una representacion abstracta de lo que pasa en el mundo real, usualmente tambien es el primer modelo (dibujito, imagen, UML) y sirve para visualizar de forma clara como llega a haber colaboraciones entre los objetos de un problema.</description></item><item><title>Nombres con Sentido</title><link>https://jaimayal.github.io/digital-garden/notes/Recomendaciones-de-Nombrado-para-mantener-un-buen-codigo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Recomendaciones-de-Nombrado-para-mantener-un-buen-codigo/</guid><description>Son una serie de heuristicas que se enfocan en el [[notes/Diseño en Codigo]] de bajo nivel. Particularmente, en el nombrado de las cosas.</description></item><item><title>Nullish Coalescing Operator en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Nullish-Coalescing-Operator-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Nullish-Coalescing-Operator-en-JavaScript/</guid><description>Este operador sirve para resolver las situaciones en las que hacer el [[notes/Short Circuiting en JavaScript]] llevara a tener errores debido a los falsy values raros (como 0 o &amp;lsquo;&amp;rsquo;).</description></item><item><title>Objeto</title><link>https://jaimayal.github.io/digital-garden/notes/Objeto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Objeto/</guid><description>Es una instancia (es decir, una ocurrencia particular) o un ejemplar concreto proveniente de una clase ya definida.
Estos son creados a partir de los constructores de una clase particular y por lo tanto, cuentan con sus atributos, metodos, vista publica y privada.</description></item><item><title>Objetos en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Objetos-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Objetos-en-JavaScript/</guid><description>Un objeto consiste un conjunto de pares de llave-valor. Es una estructura de datos desordenada, por lo que el orden en el que aparecen sus datos es aleatorio.</description></item><item><title>Optional Chaining en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Optional-Chaining-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Optional-Chaining-en-JavaScript/</guid><description>Esta caracteristica introducida en ES6 ayuda cuando tenemos que estar comprobando la existencia de propiedades dentro de objetos.
Propiedades Esto es muy util debido a que comunmente muchos objetos suelen venir del exterior, por tanto, hay muchas propiedades opcionales que podrian estar o no en ellos.</description></item><item><title>Orientacion a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Orientacion-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Orientacion-a-Objetos/</guid><description>Vista publica de las clases - Interfaces Lo publico es lo que es conocido en cualquier parte del sistema. Lo privado es lo que se conoce unicamente dentro de la declaracion de una clase</description></item><item><title>Paradigma Orientado a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Paradigma-Orientado-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Paradigma-Orientado-a-Objetos/</guid><description>Es un paradigma que surge como sintesis tras la orientacion a datos y la orientacion a procesos. Tiene como objetivo dar la misma importancia tanto a datos como a procesos, utilizando el concepto de Clases y vistas.</description></item><item><title>Parametros Default en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Parametros-Default-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Parametros-Default-en-JavaScript/</guid><description>Es una caracteristica agregada a las funciones en ES6 que permite asignar valores por defecto a los parametros en caso de que no sean brindados por el usuario.</description></item><item><title>Patron Experto en la Informacion</title><link>https://jaimayal.github.io/digital-garden/notes/Patron-Experto-en-la-Informacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Patron-Experto-en-la-Informacion/</guid><description>Es una heuristica que dicta que un objeto tiene obligaciones que son dadas por los datos que guarda. Sus obligaciones deben ser cumplidas y debe proveer interfaz publica para hacerlas accesibles a otros objetos desde fuera.</description></item><item><title>Patron Singleton</title><link>https://jaimayal.github.io/digital-garden/notes/Patron-Singleton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Patron-Singleton/</guid><description>Asegurar que una clase solo tenga una unica instancia y proveer un unico punto global de acceso a ella
Problema Este patron surge de la necesidad de que una clase cuente con una unica instancia para multiples clases del sistema.</description></item><item><title>Patrones de Diseño</title><link>https://jaimayal.github.io/digital-garden/notes/Patrones-de-Dise%C3%B1o/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Patrones-de-Dise%C3%B1o/</guid><description>Un patron de diseño se define como Una solucion a un problema en un contexto. Para efectos de la [[notes/Programacion Orientada a Objetos]], un patron tambien se podria definir como un conjunto de objetos y clases relacionados que solucionan un problema de diseño en un dominio especifico.</description></item><item><title>PostgreSQL</title><link>https://jaimayal.github.io/digital-garden/notes/PostgreSQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/PostgreSQL/</guid><description>PostgreSQL es un gestor de bases de datos relacionales de codigo abierto que integra una gran parte de la funcionalidad de otros con una mezcla de un dialecto nuevo de SQL.</description></item><item><title>Practicas - Ciclo de Vida</title><link>https://jaimayal.github.io/digital-garden/notes/Metodologias-de-Desarrollo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Metodologias-de-Desarrollo/</guid><description>Las practicas relacionadas con el ciclo de vida de un proyecto de software se refiere a la cantidad de tiempo que tendra cada paso del ciclo de creacion, la duracion que tendra, la relevancia y si es iterable o no.</description></item><item><title>Prerequisitos</title><link>https://jaimayal.github.io/digital-garden/notes/Prerequisitos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Prerequisitos/</guid><description>Definicion Es un conjunto de practicas que se realiza en el [[notes/Desarrollo de Software]] con el fin de reducir los riesgos, planear las partes criticas y garantizar la calidad desde el inicio de un proyecto.</description></item><item><title>Principio General de Asignacion de Responsabilidades</title><link>https://jaimayal.github.io/digital-garden/notes/Principio-General-de-Asignacion-de-Responsabilidades/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Principio-General-de-Asignacion-de-Responsabilidades/</guid><description>Inspirate en el Mundo Real, pero se coherente y has que las clases hagan las operaciones que les corresponden con los datos que encapsulan.</description></item><item><title>Principios de Inversion de Benjamin Graham</title><link>https://jaimayal.github.io/digital-garden/notes/Principios-de-Inversion-de-Benjamin-Graham/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Principios-de-Inversion-de-Benjamin-Graham/</guid><description>Benjamin Graham fue uno de los mejores inversores manteniendo su empresa con un 15% de crecimiento anual de forma constante, hizo inversiones millonarias y creo el primer y mejor framework de inversion, lo redacto en su libro &amp;lsquo;Security Analysis&amp;rsquo; un clasico para el area de finanzas hoy en dia.</description></item><item><title>Programacion</title><link>https://jaimayal.github.io/digital-garden/notes/Programacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Programacion/</guid><description>Es una disciplina encargada de crear una serie de instrucciones en forma de codigo, utilizando un lenguaje especializado para hablar con la maquina que le permita dar las instrucciones suficientes como para que ejecute las tareas que se le asignan.</description></item><item><title>Programacion Orientada a Objetos</title><link>https://jaimayal.github.io/digital-garden/notes/Programacion-Orientada-a-Objetos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Programacion-Orientada-a-Objetos/</guid><description>Es un paradigma de [[notes/Programacion|programacion]] basado en componentes. En este caso, cada componente es una Clase (la unidad minima de construccion).</description></item><item><title>Pruebas</title><link>https://jaimayal.github.io/digital-garden/notes/Pruebas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Pruebas/</guid><description>Es probablemente el proceso mas infravalorado por los estudiantes que aprenden el Desarrollo de Software.
Es absolutamente necesario si lo que se busca es trabajar en un entorno profesional.</description></item><item><title>Pseudohacking</title><link>https://jaimayal.github.io/digital-garden/notes/Pseudohacking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Pseudohacking/</guid><description>Es una practica que ocurre en la Programacion de un software, ocurre cuando un desarrollador agrega codigo casi aleatorio con el fin de conseguir un objetivo (cumplir un requisito, regularmente) sin entender realmente lo que hace el codigo que esta agregando al Software.</description></item><item><title>Relacion de Agregacion</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Agregacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Agregacion/</guid><description>Siguiendo las caracteristicas de las Relaciones entre Clases por Colaboracion. La relacion por agregacion tendria las siguientes:
En esta relacion la agregacion se encarga de gestionar todo lo relacionado con los agregados una vez forman parte de ella.</description></item><item><title>Relacion de Asociacion</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Asociacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Asociacion/</guid><description>NO cuenta con ningun tipo de composicion, ni debil, ni fuerte, pero a la vez, es la primera que hace que una relacion entre un cliente (objeto activo) y un servidor (objeto pasivo) persista a traves de una temporalidad mas larga.</description></item><item><title>Relacion de Composicion</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Composicion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Composicion/</guid><description>Siguiendo las caracteristicas de las Relaciones entre Clases por Colaboracion. La relacion por composicion tendria las siguientes:
Caracteristicas Temporalidad - Alta Regularmente, este tipo de relaciones vinculan toda la longevidad del todo con la longevidad de la parte.</description></item><item><title>Relacion de Uso (Dependencia)</title><link>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Uso-Dependencia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relacion-de-Uso-Dependencia/</guid><description>Este tipo de relacion ocurre cuando una clase A utiliza los servicios de una clase B en algun punto especifico sin mayor dependencia a futuro.</description></item><item><title>Relaciones entre Clases (Gestion de Dependencias)</title><link>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-Gestion-de-Dependencias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-Gestion-de-Dependencias/</guid><description>Dependencia y Relacion son sinonimos en la Programacion Orientada a Objetos. Ambas se refieren a las colaboraciones que pueden existir entre las clases de una aplicacion.</description></item><item><title>Relaciones entre Clases por Colaboracion</title><link>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Colaboracion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Colaboracion/</guid><description>Son un tipo de Relaciones entre Clases (Gestion de Dependencias) que ocurre cuando existe un paso de mensajes entre clases. Ya sea que una se encuentre como valor de retorno, parametro, atributo privado, u otro.</description></item><item><title>Relaciones entre Clases por Herencia</title><link>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Herencia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Relaciones-entre-Clases-por-Herencia/</guid><description>Es un tipo de relacion que existe entre dos clases cuando se identifican factores en comun. Se obtiene una clase de mas alto nivel y se crea una pequeña jerarquia.</description></item><item><title>Requisitos</title><link>https://jaimayal.github.io/digital-garden/notes/Requisitos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Requisitos/</guid><description>Es uno de los primeros procesos en el Desarrollo de Software. Ocurre cuando se establece comunicacion entre los Stakeholders y el equipo de desarrollo.</description></item><item><title>Rest Pattern en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Rest-Pattern-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Rest-Pattern-en-JavaScript/</guid><description>Utiliza la misma sintaxis del [[notes/Spread Operator en JavaScript]], sin embargo, hace lo contrario, recolecta multiples elementos y los condensa en una sola estructura, un array.</description></item><item><title>Scope</title><link>https://jaimayal.github.io/digital-garden/notes/Scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Scope/</guid><description>Alcance que tiene una variable tomando en cuenta desde donde fue declarada. Pueden ser globales, de funcion o de bloque.</description></item><item><title>Sentencias en Programacion</title><link>https://jaimayal.github.io/digital-garden/notes/Sentencias-en-Programacion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Sentencias-en-Programacion/</guid><description>Una sentencia es una instruccion a ejecutar por el compilador en un lenguaje de programacion.
Es una unidad minima de la cual podemos partir para crear software.</description></item><item><title>Sets en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Sets-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Sets-en-JavaScript/</guid><description>Un set es una estructura de datos que no permite ningun elemento repetido. En JavaScript fue introducido en ES6 junto con los Maps en JavaScript.</description></item><item><title>Shallow Copy</title><link>https://jaimayal.github.io/digital-garden/notes/Shallow-Copy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Shallow-Copy/</guid><description>Tipo de clonado de un objeto que ocurre cuando solo se logra clonar los atributos superficiales, las referencias internas que componen al objeto no cambiaran, solo lo superficial.</description></item><item><title>Short Circuiting en JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Short-Circuiting-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Short-Circuiting-en-JavaScript/</guid><description>En JavaScript los operadores logicos AND y OR (&amp;amp;&amp;amp; e ||) sirven para hacer mas que comparaciones logicas.
JavaScript posee un mecanismo que le permite utilizar cualquier valor mas alla de boleanos en ambos lados de la evaluacion logica.</description></item><item><title>Spread Operator</title><link>https://jaimayal.github.io/digital-garden/notes/Spread-Operator-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Spread-Operator-en-JavaScript/</guid><description>El Spread Operator es un operador que sirve para aplanar los elementos de un array, funciona como recorrer todo el array y colocarlo en variables independientes utilizando lel [[notes/Destructuring en JavaScript]], sin embargo, nos da una sintaxis super simple y limpia de trabajo.</description></item><item><title>Spring IoC Container</title><link>https://jaimayal.github.io/digital-garden/notes/Spring-IoC-Container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Spring-IoC-Container/</guid><description>El IoC, tambien llamado patron Hollywood jajaja, &amp;ldquo;no nos llames nosotros te llamaremos&amp;rdquo;. Es una forma de ceder el control del flujo del programa al framework en vez de al codigo.</description></item><item><title>Stakeholders</title><link>https://jaimayal.github.io/digital-garden/notes/Stakeholders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Stakeholders/</guid><description>Son personas las cuales guardan algun tipo de relacion con la empresa (Inversionista, dueño, experto, etc) y que, por tanto, les interesan las decisiones que se tomen dentro de ella, debido a que estas les afectan de una u otra forma.</description></item><item><title>Swagger</title><link>https://jaimayal.github.io/digital-garden/notes/Swagger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Swagger/</guid><description>Es un conjunto de aplicaciones que sirven para generar codigo y documentacion interactiva siguiendo el estandar de OpenAPI.
Integracion en Spring En Spring puede ser integrada para hacer ingenieria inversa, es decir, generar un documento Swagger a partir de una API ya establecida.</description></item><item><title>this keyword</title><link>https://jaimayal.github.io/digital-garden/notes/this-en-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/this-en-JavaScript/</guid><description>Es una referencia creada para referirse al objeto actual (En el caso de [[notes/JavaScript]], al [[notes/JavaScript Execution Context]] actual).
En JavaScript esta referencia es dinamica y cambia dependiendo de la forma en que se llame a una funcion.</description></item><item><title>Validacion de Datos en API REST</title><link>https://jaimayal.github.io/digital-garden/notes/Java-Bean-Validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Java-Bean-Validation/</guid><description>Sirve para validar los datos que son insertados por un usuario, regularmente estos validadores se mantienen en el DTO y se manejan con anotaciones.</description></item><item><title>Valores vs Referencias en Funciones de JavaScript</title><link>https://jaimayal.github.io/digital-garden/notes/Valores-vs-Referencias-en-Funciones-de-JavaScript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jaimayal.github.io/digital-garden/notes/Valores-vs-Referencias-en-Funciones-de-JavaScript/</guid><description>Es importante entender como funciona el paso por valor y paso por referencia en JavaScript.
Cuando a una funcion se le pasa una referencia (una estructura de datos o un objeto) le estamos pasando la misma referencia que existe dentro de cualquier otro contexto que se utilice la misma.</description></item></channel></rss>